---
title: "Supporting information Appendix for Pichler & Hartig â€“ Can machine learning be used for causal inference?"
format: 
  docx:
    toc: true
    number-sections: true
    reference-doc: custom-reference-doc.docx
  html: default
---

```{r}
#| echo: false
#| message: false
library(ggplot2)
library(hrbrthemes)
library(viridis)
library(gridExtra)
library(tidyverse)
library(igraph)
library(glmmTMB)
library(flextable)
library(dplyr)
library(knitr)
library(kableExtra)
library(readr)
library(tidyr)
library(broom)
library(ggeffects)
library(gridExtra)

set_flextable_defaults(
  font.size = 8, theme_fun = theme_vanilla)

source("utils.R")
knitr::opts_chunk$set(fig.path="plots/", echo = FALSE)

```

**Summary:** This document provides supporting information on Pichler & Hartig -- Can machine learning be used for causal inference.


## Proof of concept

```{r}
#| echo: false

files =        c("collinearity_0.5.RDS", 
                 "collinearity_0.90.RDS", 
                 "collinearity_0.99.RDS", 
                 "effects.RDS", 
                 "no_effects.RDS", 
                 "confounder_unequal.RDS", 
                 "confounder.RDS")

Results = 
  lapply(files, function(f) {
    confounder = readRDS(paste0("results/",f))
    Result = do.call(rbind, lapply(1:8, function(j) (apply(abind::abind(lapply(1:100, function(i) confounder[[i]][[j]][[1]] ), along = 0L), 2, mean))))
    colnames(Result) = LETTERS[1:5]
    rownames(Result) = c("LM", "RF", "BRT", "NN", "Dropout", "l1", "l2", "l1l2")
    return(Result)
  })
names(Results) = unlist(strsplit(files, ".RDS", TRUE))

Results_rmse = 
  lapply(files, function(f) {
    confounder = readRDS(paste0("results/",f))
    Result = do.call(rbind, lapply(1:8, function(j) (apply(abind::abind(lapply(1:100, function(i) confounder[[i]][[j]][[2]] ), along = 0L), 2, mean))))
    #colnames(Result) = LETTERS[1:5]
    rownames(Result) = c("LM", "RF", "BRT", "NN", "Dropout", "l1", "l2", "l1l2")
    return(Result)
  })
names(Results_rmse) = unlist(strsplit(files, ".RDS", TRUE))

Results_rmse_sd = 
  lapply(files, function(f) {
    confounder = readRDS(paste0("results/",f))
    Result = do.call(rbind, lapply(1:8, function(j) (apply(abind::abind(lapply(1:100, function(i) confounder[[i]][[j]][[2]] ), along = 0L), 2, sd))))
    #colnames(Result) = LETTERS[1:5]
    rownames(Result) = c("LM", "RF", "BRT", "NN", "Dropout", "l1", "l2", "l1l2")
    return(Result)
  })
names(Results_rmse_sd) = unlist(strsplit(files, ".RDS", TRUE))


Results_sd = 
  lapply(files, function(f) {
    confounder = readRDS(paste0("results/",f))
    Result = do.call(rbind, lapply(1:8, function(j) (apply(abind::abind(lapply(1:100, function(i) confounder[[i]][[j]][[1]] ), along = 0L), 2, sd))))
    colnames(Result) = LETTERS[1:5]
    rownames(Result) = c("LM", "RF", "BRT", "NN", "Dropout", "l1", "l2", "l1l2")
    return(Result)
  })
names(Results_sd) = unlist(strsplit(files, ".RDS", TRUE))

layout = matrix(c(0,10,
                  0,5,
                  0,0,
                  5,5), nrow = 4L, 2L, byrow = TRUE) 

```

### Variance 

```{r}
#| label: Fig_S1
#| fig-width: 10
#| fig-height: 9
sc = c("no_effects", "no_effects", "confounder", "collinearity_0.99")

algorithms = c("LM","RF",  "BRT", "NN","Dropout", "l1", "l2", "l1l2")

par(mfcol = c(3,6), mar = c(5,0.5, 2, 1.4), oma = c(1, 2, 2, 1))
labs =  c("LM","RF",  "BRT", "NN", "Dropout", "l1", "l2", "Elastic-net")
#plot_scenarios(1.0)
#dev.off()
cex_fac = 1.3

plot_scenarios(1.0, layout = matrix(c(1,1,
                             0,1,
                             0,0,
                             0,2), nrow = 4L, 2L, byrow = TRUE))

true_effs = matrix(c(
  NA, NA, NA,
  0, 0.0, 0,
  1, 1, 1,
  1, 0, 1
), 4, 3, byrow = TRUE)

for(i in c(1, 2, 3, 4, 8)) {
  counter = 1
  for(j in c(2, 4, 3)) {

    tmp = Results_sd[[sc[j]]]**2
    sd = Results_sd[[sc[j]]][i,]
    edges = round(tmp[i,], 5)
    bias = edges[c(1, 2, 5)] #- true_effs[j,]
    g1 = graph(c("X1", "Y", "X2", "Y", "X3", "Y"),  
                directed=TRUE ) 
    layout_as_tree(g1, root = "Y", circular = TRUE, flip.y = TRUE)
    eqarrowPlot(g1, matrix(c(1,1,
                             0,1,
                             0,0,
                             0,2), nrow = 4L, 2L, byrow = TRUE) ,
                #cols = c( "skyblue","#B0A8B9", "#B0A8B9", "#B0A8B9"),
                cols = c(addA(rep("#87CEEB", 1), 1.0), "#B0A8B9", addA(rep("#87CEEB", 1), 1.0), addA(rep("#87CEEB", 1), 1.0)),
                edge.arrow.size=abs(edges[c(1, 2, 5)]), 
                edge.width=abs(edges[c(1, 2, 5)])*cex_fac,
                edge.label = c(paste0(format(round(bias, 2)[1], nsmall = 1), "\n\n"),paste0(format(round(bias, 2)[2], nsmall = 1), "\n"), paste0("", format(round(bias, 2)[3], nsmall=1))),
                edge.label.cex = 1.4,
                edge.colors = ifelse(abs(edges[c(1, 2, 5)]) < 0.001, "white", "grey"))
    text(labs[i], x = 0, y = 2.3, xpd = NA, cex = 1.4, pos = 3)
    if(i == 1) {
      text(letters[counter], cex = 1.9, x = -2.2, y = 2.5, xpd = NA, font = 2)
      counter = counter + 1
    }
    

  }
  if(i == 3) {
    points(x = 0-1, y = -1.1*0.5, col = "#e60000", xpd = NA, pch = 15, cex = 1.8)
    text(x = 0.1-1, y = -1.1*0.5, label = "Variance", xpd = NA, pos = 4, cex = 1.4)
  }
}


```


#### RMSE on holdout

```{r}
#| label: Fig_SRMSEPROOF
#| fig-width: 10
#| fig-height: 5

res_rmse = do.call(rbind, lapply(Results_rmse, function(d) data.frame(values = d, method = rownames(d))))
res_rmse$scenario = rep(names(Results_rmse), each = 8)
res_rmse$type = "rmse"

res_rmse_sd = do.call(rbind, lapply(Results_rmse_sd, function(d) data.frame(values = d, method = rownames(d))))
res_rmse$var = res_rmse_sd$values


res_rmse$method = forcats::lvls_reorder(res_rmse$method, c(6, 8, 1, 7, 4, 3, 5, 2))

ggplot(res_rmse, aes(y=values, x=method)) + 
  geom_bar(stat = 'identity', fill = "lightgrey") +
  geom_errorbar(aes(ymin=values-var, ymax=values+var), width=.2) +
  facet_grid(~ scenario) +
  theme_bw()  + 
  labs(x = "", y = "") +
  theme(panel.grid.major.x = element_blank()) +
  theme(strip.background = element_rect(fill = "white")) +
  theme(strip.text = element_text(colour = 'black')) + 
  theme(strip.placement = "outside") +
  theme(strip.text = element_text(hjust = 0.5)) +
  theme(legend.position="bottom")+
  theme(axis.text.x = element_text(angle = 45, hjust=1))

```



### NN with Dropout, LASSO, and Ridge

#### Bias

Dropout, l1 and l2 bias

```{r}
#| label: Fig_S2
#| fig-width: 7
#| fig-height: 9

sc = c("no_effects", "effects", "confounder_unequal", "collinearity_0.90")

algorithms = c("LM","RF",  "BRT", "NN","Dropout", "l1", "l2", "l1l2")

par(mfcol = c(3,4), mar = c(5,0.5, 2, 1.4), oma = c(1, 2, 2, 1))
labs =  c("LM","RF",  "BRT", "NN","Dropout", "l1", "l2", "Elastic-net")
#plot_scenarios(1.0)
#dev.off()
cex_fac = 1.3

plot_scenarios(1.0, layout = matrix(c(1,1,
                             0,1,
                             0,0,
                             0,2), nrow = 4L, 2L, byrow = TRUE))

    points(x = 0, y = -0.55, col = "grey", xpd = NA, pch = 15, cex = 1.8)
    text(x = 0.1, y = -0.55, label = "True effect", xpd = NA, pos = 4, cex = 1.4)
    
    points(x = 0, y = -0.75, col = "#ffab02", xpd = NA, pch = 15, cex = 1.8)
    text(x = 0.1, y = -0.75, label = "Correlation", xpd = NA, pos = 4, cex = 1.4)


true_effs = matrix(c(
  NA, NA, NA,
  1, 0.5, 1,
  -1, 0.5, 1,
  1, 0, 1
), 4, 3, byrow = TRUE)

for(i in c(5, 6, 7)) {
  counter = 1
  for(j in c(2, 4, 3)) {

    tmp = Results[[sc[j]]]
    edges = round(tmp[i,], 5)
    bias = edges[c(1, 2, 5)] - true_effs[j,]
    g1 = graph(c("x\U2081", "y", "x\U2082", "y", "x\U2083", "y"),  
                directed=TRUE ) 
    layout_as_tree(g1, root = "y", circular = TRUE, flip.y = TRUE)
    eqarrowPlot(g1, matrix(c(1,1,
                             0,1,
                             0,0,
                             0,2), nrow = 4L, 2L, byrow = TRUE) ,
                #cols = c( "skyblue","#B0A8B9", "#B0A8B9", "#B0A8B9"),
                cols = c(addA(rep("#87CEEB", 1), 1.0), "#B0A8B9", addA(rep("#87CEEB", 1), 1.0), addA(rep("#87CEEB", 1), 1.0)),
                edge.arrow.size=abs(bias)*2.3,#abs(edges[c(1, 2, 5)]), 
                edge.width=abs(bias)*cex_fac*2,#abs(edges[c(1, 2, 5)])*cex_fac,
                edge.label = c(paste0(format(round(bias, 2)[1], nsmall = 1), "\n\n"),
                               paste0("          ",format(round(bias, 2)[2], nsmall = 1), "\n"), 
                               paste0("          ", format(round(bias, 2)[3], nsmall=1))),
                edge.label.cex = 1.4,
                edge.colors = ifelse(abs(edges[c(1, 2, 5)]) < 0.001, "white", "#e60000"))
    text(labs[i], x = 0, y = 2.3, xpd = NA, cex = 1.4, pos = 3)
    if(i == 1) {
      text(letters[counter], cex = 1.9, x = -2.2, y = 2.5, xpd = NA, font = 2)
      counter = counter + 1
    }

  }
  if(i == 3) {
    points(x = 0-1, y = -1.1*0.5, col = "#e60000", xpd = NA, pch = 15, cex = 1.8)
    text(x = 0.1-1, y = -1.1*0.5, label = "Bias = estiamted effect - true effect", xpd = NA, pos = 4, cex = 1.4)
  }
}

```


#### Variance

Dropout, l1 and l2 variance

```{r}
#| label: Fig_S3
#| fig-width: 7
#| fig-height: 9

sc = c("no_effects", "effects", "confounder_unequal", "collinearity_0.90")

algorithms = c("LM","RF",  "BRT", "NN","Dropout", "l1", "l2", "l1l2")

par(mfcol = c(3,4), mar = c(5,0.5, 2, 1.4), oma = c(1, 2, 2, 1))
labs =  c("LM","RF",  "BRT", "NN","Dropout", "l1", "l2", "Elastic-net")
#plot_scenarios(1.0)
#dev.off()
cex_fac = 1.3

plot_scenarios(1.0, layout = matrix(c(1,1,
                             0,1,
                             0,0,
                             0,2), nrow = 4L, 2L, byrow = TRUE))

    points(x = 0, y = -0.55, col = "grey", xpd = NA, pch = 15, cex = 1.8)
    text(x = 0.1, y = -0.55, label = "True effect", xpd = NA, pos = 4, cex = 1.4)
    
    points(x = 0, y = -0.75, col = "#ffab02", xpd = NA, pch = 15, cex = 1.8)
    text(x = 0.1, y = -0.75, label = "Correlation", xpd = NA, pos = 4, cex = 1.4)


true_effs = matrix(c(
  NA, NA, NA,
  1, 0.5, 1,
  -1, 0.5, 1,
  1, 0, 1
), 4, 3, byrow = TRUE)

for(i in c(5, 6, 7)) {
  counter = 1
  for(j in c(2, 4, 3)) {

    tmp = Results_sd[[sc[j]]]**2
    edges = round(tmp[i,], 5)
    bias = edges[c(1, 2, 5)] #- true_effs[j,]
    g1 = graph(c("x\U2081", "y", "x\U2082", "y", "x\U2083", "y"),  
                directed=TRUE ) 
    layout_as_tree(g1, root = "y", circular = TRUE, flip.y = TRUE)
    eqarrowPlot(g1, matrix(c(1,1,
                             0,1,
                             0,0,
                             0,2), nrow = 4L, 2L, byrow = TRUE) ,
                #cols = c( "skyblue","#B0A8B9", "#B0A8B9", "#B0A8B9"),
                cols = c(addA(rep("#87CEEB", 1), 1.0), "#B0A8B9", addA(rep("#87CEEB", 1), 1.0), addA(rep("#87CEEB", 1), 1.0)),
                edge.arrow.size=abs(bias)*2.3,#abs(edges[c(1, 2, 5)]), 
                edge.width=abs(bias)*cex_fac*2,#abs(edges[c(1, 2, 5)])*cex_fac,
                edge.label = c(paste0(format(round(bias, 2)[1], nsmall = 1), "\n\n"),
                               paste0("          ",format(round(bias, 2)[2], nsmall = 1), "\n"), 
                               paste0("          ", format(round(bias, 2)[3], nsmall=1))),
                edge.label.cex = 1.4,
                edge.colors = ifelse(abs(edges[c(1, 2, 5)]) < 0.001, "white", "#e60000"))
    text(labs[i], x = 0, y = 2.3, xpd = NA, cex = 1.4, pos = 3)
    if(i == 1) {
      text(letters[counter], cex = 1.9, x = -2.2, y = 2.5, xpd = NA, font = 2)
      counter = counter + 1
    }

  }
  if(i == 6) {
    points(x = 0-1, y = -1.1*0.5, col = "#e60000", xpd = NA, pch = 15, cex = 1.8)
    text(x = 0.1-1, y = -1.1*0.5, label = "Variance", xpd = NA, pos = 4, cex = 1.4)
  }
}
```



## Sensitivity analysis

```{r}

small_10 = readRDS("results/NN_pars_100_10.RDS")
small_100 = readRDS("results/NN_pars_100_100.RDS")
large_10 = readRDS("results/NN_pars_1000_10.RDS")
large_100 = readRDS("results/NN_pars_1000_100.RDS")
results = list(small_10, small_100, large_10, large_100)
results = lapply(results, function(r) do.call(rbind, r))
results = lapply(results, function(r) r[abs(r$bias_1) < 0.98,])
results = lapply(results, function(r) r[abs(r$bias_5) < 0.98,])


models_bias_1 = lapply(results, function(data) lm(bias_1~0+activations+depth+width+sgd+dropout, data = data[complete.cases(data),]))
models_bias_0 = lapply(results, function(data) lm(bias_0~0+activations+depth+width+sgd+dropout, data = data[complete.cases(data),]))

models_rmse = lapply(results, function(data) lm(rmse~0+activations+depth+width+sgd+dropout, data = data))

par(mfrow = c(1, 4), mar = rep(4, 4))
title = c("N = 100, P = 10", "N = 100, P = 100", "N = 1000, P = 10", "N = 1000, P = 100")
for(i in 1:4) {
  plot(results[[i]]$bias_1, results[[i]]$rmse, las = 1, xlab = "Bias", ylab = "RMSE",
       main = title[i])
}


```



```{r}
#| label: Fig_S777
#| fig-width: 14
#| fig-height: 13


ggs = do.call(c, lapply(models_bias_1, function(g) plot(ggpredict(g) )))
ggs = lapply(ggs, function(g) g+xlab("") )
ggs[-c(1, 6, 11, 16)] = lapply(ggs[-c(1, 6, 11, 16)], function(g) g+ylab(""))
ggs[c(1, 6, 11, 16)] = lapply(ggs[c(1, 6, 11, 16)], function(g) g+ylab("Bias of X1"))
ggs = lapply(ggs, function(g) g+ggtitle("") )

ggs[[3]] = ggs[[3]] + ggtitle("N = 100, P = 10")
ggs[[8]] = ggs[[8]] + ggtitle("N = 100, P = 100")
ggs[[13]] = ggs[[13]] + ggtitle("N = 1000, P = 10")
ggs[[18]] = ggs[[18]] + ggtitle("N = 1000, P = 100")
ggs = lapply(ggs, function(g) g+theme_bw() )
ggs[c(1, 6, 11, 16)] = lapply(ggs[c(1, 6, 11, 16)], function(g) g+ theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)))


do.call(grid.arrange, c(ggs, ncol = 5))
```



```{r}
#| label: Fig_S888
#| fig-width: 14
#| fig-height: 13


ggs = do.call(c, lapply(models_bias_0, function(g) plot(ggpredict(g) )))
ggs = lapply(ggs, function(g) g+xlab("") )
ggs[-c(1, 6, 11, 16)] = lapply(ggs[-c(1, 6, 11, 16)], function(g) g+ylab(""))
ggs[c(1, 6, 11, 16)] = lapply(ggs[c(1, 6, 11, 16)], function(g) g+ylab("Bias of X2"))
ggs = lapply(ggs, function(g) g+ggtitle("") )

ggs[[3]] = ggs[[3]] + ggtitle("N = 100, P = 10")
ggs[[8]] = ggs[[8]] + ggtitle("N = 100, P = 100")
ggs[[13]] = ggs[[13]] + ggtitle("N = 1000, P = 10")
ggs[[18]] = ggs[[18]] + ggtitle("N = 1000, P = 100")
ggs = lapply(ggs, function(g) g+theme_bw() )
ggs[c(1, 6, 11, 16)] = lapply(ggs[c(1, 6, 11, 16)], function(g) g+ theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)))


do.call(grid.arrange, c(ggs, ncol = 5))
```



```{r}
#| label: Fig_S999
#| fig-width: 14
#| fig-height: 13


ggs = do.call(c, lapply(models_rmse, function(g) plot(ggpredict(g) )))
ggs = lapply(ggs, function(g) g+xlab("") )
ggs[-c(1, 6, 11, 16)] = lapply(ggs[-c(1, 6, 11, 16)], function(g) g+ylab(""))
ggs[c(1, 6, 11, 16)] = lapply(ggs[c(1, 6, 11, 16)], function(g) g+ylab("RMSE"))
ggs = lapply(ggs, function(g) g+ggtitle("") )

ggs[[3]] = ggs[[3]] + ggtitle("N = 100, P = 10")
ggs[[8]] = ggs[[8]] + ggtitle("N = 100, P = 100")
ggs[[13]] = ggs[[13]] + ggtitle("N = 1000, P = 10")
ggs[[18]] = ggs[[18]] + ggtitle("N = 1000, P = 100")
ggs = lapply(ggs, function(g) g+theme_bw() )
ggs[c(1, 6, 11, 16)] = lapply(ggs[c(1, 6, 11, 16)], function(g) g+ theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)))


do.call(grid.arrange, c(ggs, ncol = 5))
```


## Data-poor simulation

### RMSE data-poor without interactions

```{r}
#| label: Fig_SRMSEPDATAPOOR
#| fig-width: 10
#| fig-height: 5

effs_true = c(1.0, 0.0, 0.0, 0.0, 1, rep(0, 95))


inter_low = readRDS("results/data_poor_small.RDS")
inter_med = readRDS("results/data_poor_mid.RDS")
inter_large = readRDS("results/data_poor_big.RDS")
extract_rmse = function(RI, exponent = 1) {
  return(t(apply(abind::abind(lapply(1:60, function(j) t(sapply(1:8, function(i) RI[[j]][[i]][[2]]))), along = 0L), 2:3, mean)**exponent))
}

extract_rmse_sd = function(RI, exponent = 1) {
  return(t(apply(abind::abind(lapply(1:60, function(j) t(sapply(1:8, function(i) RI[[j]][[i]][[2]]))), along = 0L), 2:3, sd)**exponent))
}

rmse_low = extract_rmse(inter_low, exponent = 1)
rmse_med = extract_rmse(inter_med, exponent = 1)
rmse_large = extract_rmse(inter_large, exponent = 1)

sd_low = extract_rmse_sd(inter_low)
sd_med = extract_rmse_sd(inter_med)
sd_large =extract_rmse_sd(inter_large)

rownames(rmse_low) = rownames(rmse_med) = rownames(rmse_large) = rownames(sd_low) = rownames(sd_med) = rownames(sd_large)= c( "LM","RF", "BRT", "NN","NN_Drop", "L1", "L2", "glmnet")

res_rmse = do.call(rbind, lapply(list(rmse_low, rmse_med, rmse_large), function(d) data.frame(values = d, method = rownames(d))))
res_rmse$scenario = rep(c("low", "med", "large"), each = 8)
res_rmse$type = "rmse"

res_rmse_sd = do.call(rbind, lapply(list(sd_low, sd_med, sd_large), function(d) data.frame(values = d, method = rownames(d))))
res_rmse$var = res_rmse_sd$values


res_rmse$method = forcats::lvls_reorder(res_rmse$method, c(6, 8, 1, 7, 4, 3, 5, 2))
res_rmse$scenario = forcats::lvls_reorder(res_rmse$scenario, c(2, 3, 1))

ggplot(res_rmse, aes(y=values, x=method)) + 
  geom_bar(stat = 'identity', fill = "lightgrey") +
  geom_errorbar(aes(ymin=values-var, ymax=values+var), width=.2) +
  facet_grid(~ scenario) +
  theme_bw()  + 
  labs(x = "", y = "") +
  theme(panel.grid.major.x = element_blank()) +
  theme(strip.background = element_rect(fill = "white")) +
  theme(strip.text = element_text(colour = 'black')) + 
  theme(strip.placement = "outside") +
  theme(strip.text = element_text(hjust = 0.5)) +
  theme(legend.position="bottom")+
  theme(axis.text.x = element_text(angle = 45, hjust=1))

```



### With interactions and Collinearity

```{r}
#| echo: false
effs_true = c(1.0, 0.0, 0.0, 0.0, 1, rep(0, 24))
inter_true = diag(effs_true)
inter_true[1,2] = inter_true[2,1] = inter_true[3, 4] = inter_true[4,3] = 1


inter_low = readRDS("results/data_poor_small_inter.RDS")
inter_med = readRDS("results/data_poor_mid_inter.RDS")
inter_large = readRDS("results/data_poor_big_inter.RDS")


extract_B = function(RI, exponent = 1) {
  Bias = apply(abind::abind(lapply(1:100, function(j) t(sapply(1:8, function(i) diag(RI[[j]][[i]][[1]]) - diag(inter_true)))), along = 0L), 2:3, mean)**exponent
  
  Bias_1 = apply(Bias[,c(diag(inter_true) > 0.5)], 1, mean)
  Bias_0 = apply(Bias[,c(diag(inter_true) < 0.5)], 1, mean)
  
  Bias_Inter = apply(abind::abind(lapply(1:100, function(j) t(sapply(1:8, function(i) RI[[j]][[i]][[1]][lower.tri(diag(29))] - inter_true[lower.tri(diag(29))]  ))), along = 0L), 2:3, mean)**exponent
  Bias_Inter_1 = apply(Bias_Inter[,c(inter_true[lower.tri(diag(29))]  > 0.5)], 1, mean)
  Bias_Inter_0 = apply(Bias_Inter[,c(inter_true[lower.tri(diag(29))]  < 0.5)], 1, mean)
  return(cbind(Bias_1, Bias_0, Bias_Inter_1, Bias_Inter_0))
}

extract_V= function(RI) {
  Var = apply(abind::abind(lapply(1:100, function(j) t(sapply(1:8, function(i) diag(RI[[j]][[i]][[1]])))), along = 0L), 2:3, var)
  Var_1 = apply(Var[,c(diag(inter_true) > 0.5)], 1, mean)
  Var_0 = apply(Var[,c(diag(inter_true) < 0.5)], 1, mean)
  Var_Inter = apply(abind::abind(lapply(1:100, function(j) t(sapply(1:8, function(i) RI[[j]][[i]][[1]][lower.tri(diag(29))] ))), along = 0L), 2:3, var)
  Var_Inter_1 = apply(Var_Inter[,c(inter_true[lower.tri(diag(29))] > 0.5)], 1, mean)
  Var_Inter_0 = apply(Var_Inter[,c(inter_true[lower.tri(diag(29))] < 0.5)], 1, mean)
  return(cbind(Var_1, Var_0, Var_Inter_1, Var_Inter_0))
}

```


```{r}
#| echo: false


bias_low = extract_B(inter_low, exponent = 1)
bias_med = extract_B(inter_med, exponent = 1)
bias_large = extract_B(inter_large, exponent = 1)

var_low = extract_V(inter_low)
var_med = extract_V(inter_med)
var_large =extract_V(inter_large)

colnames(bias_low) = colnames(bias_med) = colnames(bias_large) = c("bias_1_Main", "bias_0_Main", "bias_1_Inter", "bias_0_Inter")
colnames(var_low) = colnames(var_med) = colnames(var_large) = c("var_1_Main", "var_0_Main", "var_1_Inter", "var_0_Inter")
rownames(bias_low) = rownames(bias_med) = rownames(bias_large) = rownames(var_low) = rownames(var_med) = rownames(var_large)= c( "LM","RF", "BRT", "NN","NN_Drop", "L1", "L2", "glmnet")

bias_low_L = bias_low %>% data.frame %>% mutate(method = rownames(.)) %>%  pivot_longer(cols = c("bias_1_Main", "bias_0_Main", "bias_1_Inter", "bias_0_Inter"), values_to = "bias") %>% mutate(N = "low")
bias_med_L = bias_med %>% data.frame %>% mutate(method = rownames(.)) %>%  pivot_longer(cols = c("bias_1_Main", "bias_0_Main", "bias_1_Inter", "bias_0_Inter"), values_to = "bias") %>% mutate(N = "med")
bias_large_L = bias_large %>% data.frame %>% mutate(method = rownames(.)) %>%   pivot_longer(cols = c("bias_1_Main", "bias_0_Main", "bias_1_Inter", "bias_0_Inter"), values_to = "bias") %>% mutate(N = "large")
var_low_L = var_low %>% data.frame%>% mutate(method = rownames(.)) %>%   pivot_longer(cols = c("var_1_Main", "var_0_Main", "var_1_Inter", "var_0_Inter"), values_to = "var") %>% mutate(N = "low")
var_med_L = var_med %>% data.frame %>% mutate(method = rownames(.)) %>%  pivot_longer(cols = c("var_1_Main", "var_0_Main", "var_1_Inter", "var_0_Inter"), values_to = "var") %>% mutate(N = "med")
var_large_L = var_large %>% data.frame %>% mutate(method = rownames(.)) %>%   pivot_longer(cols = c("var_1_Main", "var_0_Main", "var_1_Inter", "var_0_Inter"), values_to = "var") %>% mutate(N = "large")

data_bias = rbind(bias_low_L, bias_med_L, bias_large_L)
data_var = rbind(var_low_L, var_med_L, var_large_L)
data_bias$var = data_var$var
colnames(data_bias)[2] = "which_bias"
data = data_bias  %>% pivot_longer(cols = c("bias", "var"))

data$N = forcats::lvls_reorder(data$N, c(2, 3, 1))
data$name = forcats::lvls_reorder(data$name, c(2, 1))
data$which_bias = forcats::lvls_reorder(data$which_bias, c(4, 3, 2, 1))

data$method = forcats::lvls_reorder(data$method, c(5,8, 1, 6,7, 3, 4, 2))
data$label = c(rep("NA", 8), rep("", nrow(data)-8))
```

```{r}
#| label: Fig_S4
#| fig-width: 10
#| fig-height: 6.7
#| warning: false

levels(data$method)[8] = "Elastic-net"

par(mfrow = c(3, 5), mar = c(1, 1, 1, 1)*0.5, oma = c(8, 4, 4, 4))
methods = c("LM", "RF", "BRT", "NN", "Elastic-net")
sizes = c("low", "med", "large")
y_labels = c("N = 100", "N = 600", "N = 2000")
for(j in 1:3) {
  for(i in 1:5) {
    if(i == 1) axes = TRUE
    else axes = FALSE
    if(j ==1) create_gapped_stacked(tmp = data[data$method == methods[i] & data$N== sizes[j], ], 
                                    to2 = c(100, 2000),
                                    labels2 = c("100", "1050", "2000"),
                                    axes = axes, to = c(0, 1), labels1 = c("0.0", "0.2", "0.4", "0.6", "0.8", "1.0"), d_between = 0.08)
    else create_gapped_stacked(tmp = data[data$method == methods[i] & data$N== sizes[j], ], 
                               axes = axes, to2 = c(2.0, 5), 
                               labels2 = c("2.0","3.0", "4.0", "5.0"), to = c(0, 1.0),
                                labels1 = c("0.0", "0.2", "0.4", "0.6", "0.8", "1.0"), d_between = 0.08)
    if(j == 3){
      text(x = seq(0, 1, length.out = 6)[-c(1, 6)]-0.30,y = -0.24, 
           labels = c("Bias+Variance for beta = 1", "Bias+Variance for beta = 0", "Bias+Variance for Inter = 1", "Bias+Variance for Inter = 0"), 
           srt = 45,
           xpd = NA, pos = 1)
    }
    
    if(j == 1) {
      rect(0, 1.0, 1.0, 1.1, xpd = NA, border = "black")
      text(0.5, y = 0.98, pos = 3, xpd = NA, label = methods[i], cex = 1.3, font = 2)
    }
    if(i == 5) {
      rect(1, 0, 1.15, 1.0, xpd = NA, border = "black")
      text(y = 0.72, x = 1.01, pos = 4, xpd = NA, label = y_labels[j], cex = 1.3, font = 2, srt = -90)
    }
    if(i == 5 & j == 1) {
      legend("topright", bty = "n", col = c("#96c6ed","#e0acd5" ), pch = 15, legend = c("Bias", "Variance"))
    }
  }
}


```


#### RMSE


```{r}
#| label: Fig_SRMSEPDATAPOOR2
#| fig-width: 10
#| fig-height: 5



inter_low = readRDS("results/data_poor_small_inter.RDS")
inter_med = readRDS("results/data_poor_mid_inter.RDS")
inter_large = readRDS("results/data_poor_big_inter.RDS")
extract_rmse = function(RI, exponent = 1) {
  return(t(apply(abind::abind(lapply(1:60, function(j) t(sapply(1:8, function(i) RI[[j]][[i]][[2]]))), along = 0L), 2:3, mean)**exponent))
}

extract_rmse_sd = function(RI, exponent = 1) {
  return(t(apply(abind::abind(lapply(1:60, function(j) t(sapply(1:8, function(i) RI[[j]][[i]][[2]]))), along = 0L), 2:3, sd)**exponent))
}

rmse_low = extract_rmse(inter_low, exponent = 1)
rmse_med = extract_rmse(inter_med, exponent = 1)
rmse_large = extract_rmse(inter_large, exponent = 1)

sd_low = extract_rmse_sd(inter_low)
sd_med = extract_rmse_sd(inter_med)
sd_large =extract_rmse_sd(inter_large)

rownames(rmse_low) = rownames(rmse_med) = rownames(rmse_large) = rownames(sd_low) = rownames(sd_med) = rownames(sd_large)= c( "LM","RF", "BRT", "NN","NN_Drop", "L1", "L2", "glmnet")

res_rmse = do.call(rbind, lapply(list(rmse_low, rmse_med, rmse_large), function(d) data.frame(values = d, method = rownames(d))))
res_rmse$scenario = rep(c("low", "med", "large"), each = 8)
res_rmse$type = "rmse"

res_rmse_sd = do.call(rbind, lapply(list(sd_low, sd_med, sd_large), function(d) data.frame(values = d, method = rownames(d))))
res_rmse$var = res_rmse_sd$values


res_rmse$method = forcats::lvls_reorder(res_rmse$method, c(6, 8, 1, 7, 4, 3, 5, 2))
res_rmse$scenario = forcats::lvls_reorder(res_rmse$scenario, c(2, 3, 1))

ggplot(res_rmse, aes(y=values, x=method)) + 
  geom_bar(stat = 'identity', fill = "lightgrey") +
  geom_errorbar(aes(ymin=values-var, ymax=values+var), width=.2) +
  facet_grid(~ scenario) +
  theme_bw()  + 
  labs(x = "", y = "") +
  theme(panel.grid.major.x = element_blank()) +
  theme(strip.background = element_rect(fill = "white")) +
  theme(strip.text = element_text(colour = 'black')) + 
  theme(strip.placement = "outside") +
  theme(strip.text = element_text(hjust = 0.5)) +
  theme(legend.position="bottom")+
  theme(axis.text.x = element_text(angle = 45, hjust=1))

```


### With interactions without collinearity



```{r}
#| echo: false
effs_true = c(1.0, 0.0, 0.0, 0.0, 1, rep(0, 24))
inter_true = diag(effs_true)
inter_true[1,2] = inter_true[2,1] = inter_true[3, 4] = inter_true[4,3] = 1


inter_low = readRDS("results/data_poor_small_inter_without_coll.RDS")
inter_med = readRDS("results/data_poor_mid_inter_without_coll.RDS")
inter_large = readRDS("results/data_poor_big_inter_without_coll.RDS")


extract_B = function(RI, exponent = 1) {
  Bias = apply(abind::abind(lapply(1:100, function(j) t(sapply(1:8, function(i) diag(RI[[j]][[i]][[1]]) - diag(inter_true)))), along = 0L), 2:3, mean)**exponent
  
  Bias_1 = apply(Bias[,c(diag(inter_true) > 0.5)], 1, mean)
  Bias_0 = apply(Bias[,c(diag(inter_true) < 0.5)], 1, mean)
  
  Bias_Inter = apply(abind::abind(lapply(1:100, function(j) t(sapply(1:8, function(i) RI[[j]][[i]][[1]][lower.tri(diag(29))] - inter_true[lower.tri(diag(29))]  ))), along = 0L), 2:3, mean)**exponent
  Bias_Inter_1 = apply(Bias_Inter[,c(inter_true[lower.tri(diag(29))]  > 0.5)], 1, mean)
  Bias_Inter_0 = apply(Bias_Inter[,c(inter_true[lower.tri(diag(29))]  < 0.5)], 1, mean)
  return(cbind(Bias_1, Bias_0, Bias_Inter_1, Bias_Inter_0))
}

extract_V= function(RI) {
  Var = apply(abind::abind(lapply(1:100, function(j) t(sapply(1:8, function(i) diag(RI[[j]][[i]][[1]])))), along = 0L), 2:3, var)
  Var_1 = apply(Var[,c(diag(inter_true) > 0.5)], 1, mean)
  Var_0 = apply(Var[,c(diag(inter_true) < 0.5)], 1, mean)
  Var_Inter = apply(abind::abind(lapply(1:100, function(j) t(sapply(1:8, function(i) RI[[j]][[i]][[1]][lower.tri(diag(29))] ))), along = 0L), 2:3, var)
  Var_Inter_1 = apply(Var_Inter[,c(inter_true[lower.tri(diag(29))] > 0.5)], 1, mean)
  Var_Inter_0 = apply(Var_Inter[,c(inter_true[lower.tri(diag(29))] < 0.5)], 1, mean)
  return(cbind(Var_1, Var_0, Var_Inter_1, Var_Inter_0))
}

```


```{r}
#| echo: false


bias_low = extract_B(inter_low, exponent = 1)
bias_med = extract_B(inter_med, exponent = 1)
bias_large = extract_B(inter_large, exponent = 1)

var_low = extract_V(inter_low)
var_med = extract_V(inter_med)
var_large =extract_V(inter_large)

colnames(bias_low) = colnames(bias_med) = colnames(bias_large) = c("bias_1_Main", "bias_0_Main", "bias_1_Inter", "bias_0_Inter")
colnames(var_low) = colnames(var_med) = colnames(var_large) = c("var_1_Main", "var_0_Main", "var_1_Inter", "var_0_Inter")
rownames(bias_low) = rownames(bias_med) = rownames(bias_large) = rownames(var_low) = rownames(var_med) = rownames(var_large)= c( "LM","RF", "BRT", "NN","NN_Drop", "L1", "L2", "glmnet")

bias_low_L = bias_low %>% data.frame %>% mutate(method = rownames(.)) %>%  pivot_longer(cols = c("bias_1_Main", "bias_0_Main", "bias_1_Inter", "bias_0_Inter"), values_to = "bias") %>% mutate(N = "low")
bias_med_L = bias_med %>% data.frame %>% mutate(method = rownames(.)) %>%  pivot_longer(cols = c("bias_1_Main", "bias_0_Main", "bias_1_Inter", "bias_0_Inter"), values_to = "bias") %>% mutate(N = "med")
bias_large_L = bias_large %>% data.frame %>% mutate(method = rownames(.)) %>%   pivot_longer(cols = c("bias_1_Main", "bias_0_Main", "bias_1_Inter", "bias_0_Inter"), values_to = "bias") %>% mutate(N = "large")
var_low_L = var_low %>% data.frame%>% mutate(method = rownames(.)) %>%   pivot_longer(cols = c("var_1_Main", "var_0_Main", "var_1_Inter", "var_0_Inter"), values_to = "var") %>% mutate(N = "low")
var_med_L = var_med %>% data.frame %>% mutate(method = rownames(.)) %>%  pivot_longer(cols = c("var_1_Main", "var_0_Main", "var_1_Inter", "var_0_Inter"), values_to = "var") %>% mutate(N = "med")
var_large_L = var_large %>% data.frame %>% mutate(method = rownames(.)) %>%   pivot_longer(cols = c("var_1_Main", "var_0_Main", "var_1_Inter", "var_0_Inter"), values_to = "var") %>% mutate(N = "large")

data_bias = rbind(bias_low_L, bias_med_L, bias_large_L)
data_var = rbind(var_low_L, var_med_L, var_large_L)
data_bias$var = data_var$var
colnames(data_bias)[2] = "which_bias"
data = data_bias  %>% pivot_longer(cols = c("bias", "var"))

data$N = forcats::lvls_reorder(data$N, c(2, 3, 1))
data$name = forcats::lvls_reorder(data$name, c(2, 1))
data$which_bias = forcats::lvls_reorder(data$which_bias, c(4, 3, 2, 1))

data$method = forcats::lvls_reorder(data$method, c(5,8, 1, 6,7, 3, 4, 2))
data$label = c(rep("NA", 8), rep("", nrow(data)-8))
```

```{r}
#| label: Fig_S4WOCOLL
#| fig-width: 10
#| fig-height: 6.7
#| warning: false

levels(data$method)[8] = "Elastic-net"

par(mfrow = c(3, 5), mar = c(1, 1, 1, 1)*0.5, oma = c(8, 4, 4, 4))
methods = c("LM", "RF", "BRT", "NN", "Elastic-net")
sizes = c("low", "med", "large")
y_labels = c("N = 100", "N = 600", "N = 2000")
for(j in 1:3) {
  for(i in 1:5) {
    if(i == 1) axes = TRUE
    else axes = FALSE
    if(j ==1) create_gapped_stacked(tmp = data[data$method == methods[i] & data$N== sizes[j], ], 
                                    to2 = c(100, 2000),
                                    labels2 = c("100", "1050", "2000"),
                                    axes = axes, to = c(0, 1), labels1 = c("0.0", "0.2", "0.4", "0.6", "0.8", "1.0"), d_between = 0.08)
    else create_gapped_stacked(tmp = data[data$method == methods[i] & data$N== sizes[j], ], 
                               axes = axes, to2 = c(2.0, 5), 
                               labels2 = c("2.0","3.0", "4.0", "5.0"), to = c(0, 1.0),
                                labels1 = c("0.0", "0.2", "0.4", "0.6", "0.8", "1.0"), d_between = 0.08)
    if(j == 3){
      text(x = seq(0, 1, length.out = 6)[-c(1, 6)]-0.30,y = -0.24, 
           labels = c("Bias+Variance for beta = 1", "Bias+Variance for beta = 0", "Bias+Variance for Inter = 1", "Bias+Variance for Inter = 0"), 
           srt = 45,
           xpd = NA, pos = 1)
    }
    
    if(j == 1) {
      rect(0, 1.0, 1.0, 1.1, xpd = NA, border = "black")
      text(0.5, y = 0.98, pos = 3, xpd = NA, label = methods[i], cex = 1.3, font = 2)
    }
    if(i == 5) {
      rect(1, 0, 1.15, 1.0, xpd = NA, border = "black")
      text(y = 0.72, x = 1.01, pos = 4, xpd = NA, label = y_labels[j], cex = 1.3, font = 2, srt = -90)
    }
    if(i == 5 & j == 1) {
      legend("topright", bty = "n", col = c("#96c6ed","#e0acd5" ), pch = 15, legend = c("Bias", "Variance"))
    }
  }
}


```




```{r}
#| label: Fig_SRMSEPDATAPOOR22
#| fig-width: 10
#| fig-height: 5



inter_low = readRDS("results/data_poor_small_inter_without_coll.RDS")
inter_med = readRDS("results/data_poor_mid_inter_without_coll.RDS")
inter_large = readRDS("results/data_poor_big_inter_without_coll.RDS")
extract_rmse = function(RI, exponent = 1) {
  return(t(apply(abind::abind(lapply(1:60, function(j) t(sapply(1:8, function(i) RI[[j]][[i]][[2]]))), along = 0L), 2:3, mean)**exponent))
}

extract_rmse_sd = function(RI, exponent = 1) {
  return(t(apply(abind::abind(lapply(1:60, function(j) t(sapply(1:8, function(i) RI[[j]][[i]][[2]]))), along = 0L), 2:3, sd)**exponent))
}

rmse_low = extract_rmse(inter_low, exponent = 1)
rmse_med = extract_rmse(inter_med, exponent = 1)
rmse_large = extract_rmse(inter_large, exponent = 1)

sd_low = extract_rmse_sd(inter_low)
sd_med = extract_rmse_sd(inter_med)
sd_large =extract_rmse_sd(inter_large)

rownames(rmse_low) = rownames(rmse_med) = rownames(rmse_large) = rownames(sd_low) = rownames(sd_med) = rownames(sd_large)= c( "LM","RF", "BRT", "NN","NN_Drop", "L1", "L2", "glmnet")

res_rmse = do.call(rbind, lapply(list(rmse_low, rmse_med, rmse_large), function(d) data.frame(values = d, method = rownames(d))))
res_rmse$scenario = rep(c("low", "med", "large"), each = 8)
res_rmse$type = "rmse"

res_rmse_sd = do.call(rbind, lapply(list(sd_low, sd_med, sd_large), function(d) data.frame(values = d, method = rownames(d))))
res_rmse$var = res_rmse_sd$values


res_rmse$method = forcats::lvls_reorder(res_rmse$method, c(6, 8, 1, 7, 4, 3, 5, 2))
res_rmse$scenario = forcats::lvls_reorder(res_rmse$scenario, c(2, 3, 1))

ggplot(res_rmse, aes(y=values, x=method)) + 
  geom_bar(stat = 'identity', fill = "lightgrey") +
  geom_errorbar(aes(ymin=values-var, ymax=values+var), width=.2) +
  facet_grid(~ scenario) +
  theme_bw()  + 
  labs(x = "", y = "") +
  theme(panel.grid.major.x = element_blank()) +
  theme(strip.background = element_rect(fill = "white")) +
  theme(strip.text = element_text(colour = 'black')) + 
  theme(strip.placement = "outside") +
  theme(strip.text = element_text(hjust = 0.5)) +
  theme(legend.position="bottom")+
  theme(axis.text.x = element_text(angle = 45, hjust=1))

```




## Weighted MCE

```{r}
#| label: Fig_Weighted
#| message: false
#| fig-width: 7
#| fig-height: 6
source("code/AME.R")

set.seed(42)
X1 = scale(rlnorm(1000, sdlog = 0.6))
X2 = rnorm(1000)
Y = rep(0, 1000)
Y[X1<2] = 2*X1[X1<2]
Y[X1>2] = 4
Y = Y + rnorm(1000, sd = 0.2)

library(cito)
dn = cito::dnn(Y~., data = data.frame(Y = Y, X1 = X1, X2 = X2), 
              activation = rep("relu", 3),
              hidden = rep(30L, 3),
              verbose = FALSE, 
              batchsize = 100, 
              epochs = 100L,
              shuffle = TRUE,
              loss = "mse",
              plot=FALSE, 
              lambda = 0.001, alpha = 1., 
              lr_scheduler = config_lr_scheduler("reduce_on_plateau", factor = 0.90, patience = 5))
M = (marginalEffects(dn))

effs = M$result[,1,1]
D = density(X1)
f = approxfun(density(X1))


m2 = (lm(Y~X1))
plot(X1, Y, las = 1, col = "darkgrey")
abline(m2, col = "red")
abline(0, mean(effs), col = "blue")
abline(0, sum((1/(f(X1))*effs))/sum(1/f(X1)), col = "darkgreen")
legend("bottomright", legend = c(paste0(round(coef(m2)[[2]], 2), "LM OLS "), 
                                 paste0(round(mean(effs), 2), " DNN aMCE"), 
                                 paste0(round(sum((1/(f(X1))*effs))/sum(1/f(X1)), 2), " DNN waMCE")
                                 ), col = c("red", "blue", "darkgreen"), lty = 1, bty = "n")

```

