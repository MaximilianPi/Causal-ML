---
title: "Results"
format:
  html: 
    code-fold: true
    self-contained: false
    smooth-scroll: true
  docx: default
editor: visual
---

```{r}
#| echo: false
#| message: false
library(ggplot2)
library(ggbreak)
library(tidyverse)
library(igraph)
library(Cairo)
source("utils.R")

```

## Results

### Proof of concept

```{r}
#| echo: false

files =        c("collinearity_0.5.RDS", 
                 "collinearity_0.90.RDS", 
                 "collinearity_0.99.RDS", 
                 "effects.RDS", 
                 "no_effects.RDS", 
                 "confounder_unequal.RDS", 
                 "confounder.RDS")

Results = 
  lapply(files, function(f) {
    confounder = readRDS(paste0("results/",f))
    Result = do.call(rbind, lapply(1:8, function(j) (apply(abind::abind(lapply(1:50, function(i) confounder[[i]][[j]][[1]] ), along = 0L), 2, mean))))
    colnames(Result) = LETTERS[1:5]
    rownames(Result) = c("LM", "RF", "BRT", "NN", "Dropout", "l1", "l2", "l1l2")
    return(Result)
  })
names(Results) = unlist(strsplit(files, ".RDS", TRUE))


Results_rmse = 
  lapply(files, function(f) {
    confounder = readRDS(paste0("results/",f))
    Result = do.call(rbind, lapply(1:8, function(j) (apply(abind::abind(lapply(1:50, function(i) confounder[[i]][[j]][[2]] ), along = 0L), 2, mean))))
    colnames(Result) = "RMSE"
    rownames(Result) = c("LM", "RF", "BRT", "NN", "Dropout","l1", "l2", "l1l2")
    return(Result)
  })
names(Results_rmse) = unlist(strsplit(files, ".RDS", TRUE))

RMSEs = round(do.call(cbind, Results_rmse), 3)
colnames(RMSEs) = unlist(strsplit(files, ".RDS", TRUE))

Results_sd = 
  lapply(files, function(f) {
    confounder = readRDS(paste0("results/",f))
    Result = do.call(rbind, lapply(1:8, function(j) (apply(abind::abind(lapply(1:50, function(i) confounder[[i]][[j]][[1]] ), along = 0L), 2, sd))))
    colnames(Result) = LETTERS[1:5]
    rownames(Result) = c("LM", "RF", "BRT", "NN","Dropout", "l1", "l2", "l1l2")
    return(Result)
  })
names(Results_sd) = unlist(strsplit(files, ".RDS", TRUE))



```

```{r}
#| label: Fig_2
#| fig-format: pdf
#| fig-width: 10
#| fig-height: 9



sc = c("no_effects", "effects", "no_effects", "collinearity_0.90")

#cairo_pdf("plots/Fig_2.pdf", width = 10, height = 9)

par(mfcol = c(2,6), mar = c(5,0.5, 2, 1.4), oma = c(1, 2, 2, 1))
labs =  c("LM","RF",  "BRT", "NN","Dropout", "l1", "l2", "Elastic-net")

#plot_scenarios(1.0)
#dev.off()
cex_fac = 1.3

plot_scenarios(1.0, layout = matrix(c(1,1,
                             0,1,
                             0,0,
                             0,2), nrow = 4L, 2L, byrow = TRUE))

    points(x = 0, y = -0.55, col = "grey", xpd = NA, pch = 15, cex = 1.8)
    text(x = 0.1, y = -0.55, label = "True effect", xpd = NA, pos = 4, cex = 1.4)
    
    points(x = 0, y = -0.75, col = "#ffab02", xpd = NA, pch = 15, cex = 1.8)
    text(x = 0.1, y = -0.75, label = "Correlation", xpd = NA, pos = 4, cex = 1.4)


true_effs = matrix(c(
  NA, NA, NA,
  1, 0.5, 1,
  -1, 0.5, 1,
  1, 0, 1
), 4, 3, byrow = TRUE)

for(i in c(1, 2, 3, 4, 8)) {
  counter = 1
  for(j in c(2, 4)) {

    tmp = Results[[sc[j]]]
    sd = Results_sd[[sc[j]]][i,]
    edges = round(tmp[i,], 5)
    bias = edges[c(1, 2, 5)] - true_effs[j,]
    g1 = graph(c("x\U2081", "y", "x\U2082", "y", "x\U2083", "y"),  
                directed=TRUE ) 
    layout_as_tree(g1, root = "y", circular = TRUE, flip.y = TRUE)
    eqarrowPlot(g1, matrix(c(1,1,
                             0,1,
                             0,0,
                             0,2), nrow = 4L, 2L, byrow = TRUE) ,
                #cols = c( "skyblue","#B0A8B9", "#B0A8B9", "#B0A8B9"),
                cols = c(addA(rep("#87CEEB", 1), 1.0), "#B0A8B9", addA(rep("#87CEEB", 1), 1.0), addA(rep("#87CEEB", 1), 1.0)),
                edge.arrow.size=abs(bias)*2.3,#abs(edges[c(1, 2, 5)]), 
                edge.width=abs(bias)*cex_fac*2,#abs(edges[c(1, 2, 5)])*cex_fac,
                edge.label = c(paste0(format(round(bias, 2)[1], nsmall = 1), "\n\n"),
                               paste0("          ",format(round(bias, 2)[2], nsmall = 1), "\n"), 
                               paste0("          ", format(round(bias, 2)[3], nsmall=1))),
                edge.label.cex = 1.4,
                edge.colors = ifelse(abs(edges[c(1, 2, 5)]) < 0.001, "white", "#e60000"))
    text(labs[i], x = 0, y = 2.3, xpd = NA, cex = 1.4, pos = 3)
    if(i == 1) {
      text(letters[counter], cex = 1.9, x = -2.2, y = 2.5, xpd = NA, font = 2)
      counter = counter + 1
    }

  }
  if(i == 3) {
    points(x = 0-1, y = -1.1*0.5, col = "#e60000", xpd = NA, pch = 15, cex = 1.8)
    text(x = 0.1-1, y = -1.1*0.5, label = "Bias = estiamted effect - true effect", xpd = NA, pos = 4, cex = 1.4)
  }
}


#dev.off()

```

### Data-poor simulation

```{r}
#| echo: false

effs_true = c(1.0, 0.0, 0.0, 0.0, 0)


inter_low = readRDS("results/data_poor_small_RMSE.RDS")
inter_med = readRDS("results/data_poor_mid_RMSE.RDS")
inter_large = readRDS("results/data_poor_big_RMSE.RDS")
extract_B = function(RI, exponent = 1) {
  Bias = apply(abind::abind(lapply(1:length(RI), function(j) t(sapply(1:8, function(i) RI[[j]][[i]][[1]][1:5]  - effs_true))), along = 0L), 2:3, mean)**exponent
  Bias_1 = apply(Bias[,1, drop=FALSE], 1, mean)
  Bias_0 = apply(Bias[,2, drop=FALSE], 1, mean)
  return(cbind(Bias_1, Bias_0)) #, Bias_Inter_1, Bias_Inter_0))
}

extract_V= function(RI) {
  Var = apply(abind::abind(lapply(1:length(RI), function(j) t(sapply(1:8, function(i) RI[[j]][[i]][[1]][1:5] ))), along = 0L), 2:3, var)
  Var_1 = apply(Var[,1, drop=FALSE], 1, mean)
  Var_0 = apply(Var[,2, drop=FALSE], 1, mean)
  return(cbind(Var_1, Var_0))  #, Var_Inter_1, Var_Inter_0))
}

bias_low = extract_B(inter_low, exponent = 1)
bias_med = extract_B(inter_med, exponent = 1)
bias_large = extract_B(inter_large, exponent = 1)

var_low = extract_V(inter_low)
var_med = extract_V(inter_med)
var_large =extract_V(inter_large)

colnames(bias_low) = colnames(bias_med) = colnames(bias_large) = c("bias_1_Main", "bias_0_Main") #, "bias_1_Inter", "bias_0_Inter")
colnames(var_low) = colnames(var_med) = colnames(var_large) = c("var_1_Main", "var_0_Main") #, "var_1_Inter", "var_0_Inter")
rownames(bias_low) = rownames(bias_med) = rownames(bias_large) = rownames(var_low) = rownames(var_med) = rownames(var_large)= c( "LM","RF", "BRT", "NN","NN_Drop", "L1", "L2", "glmnet")


bias_low_L = bias_low %>% data.frame %>% mutate(method = rownames(.)) %>%  pivot_longer(cols = c("bias_1_Main", "bias_0_Main"), values_to = "bias") %>% mutate(N = "low")
bias_med_L = bias_med %>% data.frame %>% mutate(method = rownames(.)) %>%  pivot_longer(cols = c("bias_1_Main", "bias_0_Main"), values_to = "bias") %>% mutate(N = "med")
bias_large_L = bias_large %>% data.frame %>% mutate(method = rownames(.)) %>%   pivot_longer(cols = c("bias_1_Main", "bias_0_Main"), values_to = "bias") %>% mutate(N = "large")
var_low_L = var_low %>% data.frame%>% mutate(method = rownames(.)) %>%   pivot_longer(cols = c("var_1_Main", "var_0_Main"), values_to = "var") %>% mutate(N = "low")
var_med_L = var_med %>% data.frame %>% mutate(method = rownames(.)) %>%  pivot_longer(cols = c("var_1_Main", "var_0_Main"), values_to = "var") %>% mutate(N = "med")
var_large_L = var_large %>% data.frame %>% mutate(method = rownames(.)) %>%   pivot_longer(cols = c("var_1_Main", "var_0_Main"), values_to = "var") %>% mutate(N = "large")

data_bias = rbind(bias_low_L, bias_med_L, bias_large_L)
data_var = rbind(var_low_L, var_med_L, var_large_L)
data_bias$var = data_var$var
colnames(data_bias)[2] = "which_bias"
data = data_bias  %>% pivot_longer(cols = c("bias", "var"))

data$N = forcats::lvls_reorder(data$N, c(2, 3, 1))
data$name = forcats::lvls_reorder(data$name, c(2, 1))
data$which_bias = forcats::lvls_reorder(data$which_bias, c(2, 1))

data$method = forcats::lvls_reorder(data$method, c(5,8, 1, 6,7, 3, 4, 2))
data$label = ""#c(rep("NA", 8), rep("", nrow(data)-8))
```

```{r}
#| label: Fig_3
#| fig-format: pdf
#| fig-width: 10
#| fig-height: 6.7
#| warning: false

#cairo_pdf("plots/Fig_3.pdf", width = 10, height = 7)

levels(data$method)[8] = "Elastic-net"

par(mfrow = c(3, 5), mar = c(1, 1, 1, 1)*0.5, oma = c(8, 4, 4, 4))
methods = c("LM", "RF", "BRT", "NN_Drop", "Elastic-net")
sizes = c("low", "med", "large")
y_labels = c("N = 100", "N = 600", "N = 2000")
for(j in 1:3) {
  for(i in 1:5) {
    if(i == 1) axes = TRUE
    else axes = FALSE
    if(j ==1) create_gapped_stacked(tmp = data[data$method == methods[i] & data$N== sizes[j], ], 
                                    to2 = c(100, 2000),labels2 = c("100","1050", "2000"),
                                    axes = axes, to = c(0, 4.0), labels1 = c("0.0", "1.0", "2.0", "3.0", "4.0"))
    else create_gapped_stacked(tmp = data[data$method == methods[i] & data$N== sizes[j], ], 
                               axes = axes, to2 = c(1.0, 3), 
                               labels2 = c("1.0","2.0", "3.0"), to = c(0, 0.8),
                                labels1 = c("0.0", "0.2", "0.4", "0.6", "0.8"))
    if(j == 3){
      text(x = c(0.33, 0.66)-0.25,y = -0.24, 
           labels = c("Bias+Variance for beta = 1", "Bias+Variance for beta = 0"), 
           srt = 45,
           xpd = NA, pos = 1)
    }
    
    if(j == 1) {
      rect(0, 1.0, 1.0, 1.1, xpd = NA, border = "black")
      text(0.5, y = 0.98, pos = 3, xpd = NA, label = methods[i], cex = 1.3, font = 2)
    }
    if(i == 5) {
      rect(1, 0, 1.15, 1.0, xpd = NA, border = "black")
      text(y = 0.72, x = 1.01, pos = 4, xpd = NA, label = y_labels[j], cex = 1.3, font = 2, srt = -90)
    }
    if(i == 5 & j == 1) {
      legend("topright", bty = "n", col = c("#96c6ed","#e0acd5" ), pch = 15, legend = c("Bias", "Variance"))
    }
  }
}

#dev.off()


```

#### Hyper-parameter sensitivity analysis

```{r}
#| label: Fig_3b
#| fig-format: pdf
#| fig-width: 10
#| fig-height: 6.7
#| warning: false

library(xgboost)
library(ranger)
library(qgam)
library(mgcv)
library(mgcViz)
library(ggplot2)

get_coefficients = function(i, gam = TRUE) {
  
  out = list()
  
  ind = c(6, 5, 4, 2)[i]
  method = methods[i]
  tmp = paths[i]
  raw = readRDS(tmp)
  
  if(method == "NN") {
    raw = lapply(raw, function(r) {
      r = r %>% select(-dropout)
      return(r)
      })
  }
  
  parameter = raw[[1]][,1:ind]
  
  raw = lapply(raw, function(r) {
    r$mse_pred = r$pred_mse
    r$pred_mse = NULL
    return(r)
    } )
    
  raw = lapply(raw, function(r) {
    if(nrow(r[complete.cases(r),][abs(r[complete.cases(r),]$mse_pred) > 2000, ]) > 0) {
      r[complete.cases(r),][abs(r[complete.cases(r),]$mse_pred) > 2000, ]$mse_pred = NA
    }
    return(r)
    })
  
  parameter$bias_effect = apply(sapply(raw, function(r) 1-r$eff_1), 1, mean)**2
  parameter$var_effect = apply(sapply(raw, function(r) r$eff_1), 1, var)
  parameter$bias_zero = apply(sapply(raw, function(r) r$eff_2 ), 1, mean)**2
  parameter$var_zero = apply(sapply(raw, function(r) r$eff_2 ), 1, var)
  parameter$bias_pred = apply(sapply(raw, function(r) r$pred_bias ), 1, mean)**2
  parameter$var_pred = apply(sapply(raw, function(r) r$pred_var ), 1, var)
  parameter$mse_pred = apply(sapply(raw, function(r) r$mse_pred ), 1, mean)
  parameter$mse_eff = parameter$bias_effect + parameter$var_effect
  parameter$mse_zero = parameter$bias_zero + parameter$var_zero
  parameter = parameter[complete.cases(parameter),]
  tmp = parameter
  
  if(method != "NN" ) {tmp[,(1:ind)] = scale( tmp[,(1:ind)] )
  } else { tmp[, (2:ind)] = scale( tmp[, (2:ind)] ) }
  
  tmp[,-(1:ind)] = sapply(  tmp[,-(1:ind)], function(df) df - mean(df))
  
  out$lm_eff = lm(  mse_eff ~ 0 + .,data = cbind( tmp[,1:ind] ,tmp %>% select(mse_eff )))
  out$lm_pred = lm( mse_pred ~0+ ., data = cbind( tmp[,1:ind] ,tmp %>% select(mse_pred )))
  out$lm_zero = lm( mse_zero ~0+ ., data = cbind( tmp[,1:ind] ,tmp %>% select(mse_zero )))
  out$lm_bias_eff = lm(  bias_effect ~ 0 + .,data = cbind( tmp[,1:ind] ,tmp %>% select(bias_effect )))
  out$lm_var_eff = lm( var_effect ~0+ ., data = cbind( tmp[,1:ind] ,tmp %>% select(var_effect )))
  out$lm_bias_zero = lm(  bias_zero ~ 0 + .,data = cbind( tmp[,1:ind] ,tmp %>% select(bias_zero )))
  out$lm_var_zero = lm( var_zero ~0+ ., data = cbind( tmp[,1:ind] ,tmp %>% select(var_zero )))
  out$lm_bias_pred = lm(  bias_pred ~ 0 + .,data = cbind( tmp[,1:ind] ,tmp %>% select(bias_pred )))
  out$lm_var_pred = lm( var_pred ~0+ ., data = cbind( tmp[,1:ind] ,tmp %>% select(var_pred )))

  coefs_eff = summary( out$lm_eff )$coefficients
  coefs_pred = summary( out$lm_pred )$coefficients
  coefs_zero = summary( out$lm_zero )$coefficients
  
  coefs_bias_effect = summary( out$lm_bias_eff )$coefficients
  coefs_var_effect = summary( out$lm_var_eff )$coefficients
  coefs_bias_zero = summary( out$lm_bias_zero )$coefficients
  coefs_var_zero = summary( out$lm_var_zero )$coefficients
  coefs_bias_pred = summary( out$lm_bias_pred )$coefficients
  coefs_var_pred = summary( out$lm_var_pred )$coefficients
    
  if(method == "NN") {
    
    tmp$depth = tmp$depth + rnorm(nrow(tmp), 0, 0.001)
    cols = cbind( tmp[,1:ind] ,tmp %>% select(mse_eff )) %>% colnames()
    form1 = paste0("mse_eff ~ 0 +activations +" , paste0("s(", cols[-length(cols)][-1], ")", collapse="+"))
    cols = cbind( tmp[,1:ind] ,tmp %>% select(mse_zero )) %>% colnames()
    form2 = paste0("mse_zero ~ 0 +activations +" , paste0("s(", cols[-length(cols)][-1], ")", collapse="+"))
    cols = cbind( tmp[,1:ind] ,tmp %>% select(mse_pred )) %>% colnames()
    form3 = paste0("mse_pred ~ 0 +activations +" , paste0("s(", cols[-length(cols)][-1], ")", collapse="+"))
    
    cols = cbind( tmp[,1:ind] ,tmp %>% select(bias_effect )) %>% colnames()
    form4 = paste0("bias_effect ~ 0 +activations +" , paste0("s(", cols[-length(cols)][-1], ")", collapse="+"))
    cols = cbind( tmp[,1:ind] ,tmp %>% select(var_effect )) %>% colnames()
    form5 = paste0("var_effect ~ 0 +activations +" , paste0("s(", cols[-length(cols)][-1], ")", collapse="+"))
    
    cols = cbind( tmp[,1:ind] ,tmp %>% select(bias_zero )) %>% colnames()
    form6 = paste0("bias_zero ~ 0 +activations +" , paste0("s(", cols[-length(cols)][-1], ")", collapse="+"))
    cols = cbind( tmp[,1:ind] ,tmp %>% select(var_zero )) %>% colnames()
    form7 = paste0("var_zero ~ 0 +activations +" , paste0("s(", cols[-length(cols)][-1], ")", collapse="+"))
    
    cols = cbind( tmp[,1:ind] ,tmp %>% select(bias_pred )) %>% colnames()
    form8 = paste0("bias_pred ~ 0 +activations +" , paste0("s(", cols[-length(cols)][-1], ")", collapse="+"))
    cols = cbind( tmp[,1:ind] ,tmp %>% select(var_pred )) %>% colnames()
    form9 = paste0("var_pred ~ 0 +activations +" , paste0("s(", cols[-length(cols)][-1], ")", collapse="+"))

  } else {
    cols = cbind( tmp[,1:ind] ,tmp %>% select(mse_eff )) %>% colnames()
    form1 = paste0("mse_eff ~ 0  +" , paste0("s(", cols[-length(cols)], ")", collapse="+"))
    cols = cbind( tmp[,1:ind] ,tmp %>% select(mse_zero )) %>% colnames()
    form2 = paste0("mse_zero ~ 0  +" , paste0("s(", cols[-length(cols)], ")", collapse="+"))
    cols = cbind( tmp[,1:ind] ,tmp %>% select(mse_pred )) %>% colnames()
    form3 = paste0("mse_pred ~ 0  +" , paste0("s(", cols[-length(cols)], ")", collapse="+"))
    
    cols = cbind( tmp[,1:ind] ,tmp %>% select(bias_effect )) %>% colnames()
    form4 = paste0("bias_effect ~ 0  +" , paste0("s(", cols[-length(cols)], ")", collapse="+"))
    cols = cbind( tmp[,1:ind] ,tmp %>% select(var_effect )) %>% colnames()
    form5 = paste0("var_effect ~ 0  +" , paste0("s(", cols[-length(cols)], ")", collapse="+"))
    
    cols = cbind( tmp[,1:ind] ,tmp %>% select(bias_zero )) %>% colnames()
    form6 = paste0("bias_zero ~ 0  +" , paste0("s(", cols[-length(cols)], ")", collapse="+"))
    cols = cbind( tmp[,1:ind] ,tmp %>% select(var_zero )) %>% colnames()
    form7 = paste0("var_zero ~ 0 +" , paste0("s(", cols[-length(cols)], ")", collapse="+"))
    
    cols = cbind( tmp[,1:ind] ,tmp %>% select(bias_pred )) %>% colnames()
    form8 = paste0("bias_pred ~ 0  +" , paste0("s(", cols[-length(cols)], ")", collapse="+"))
    cols = cbind( tmp[,1:ind] ,tmp %>% select(var_pred )) %>% colnames()
    form9 = paste0("var_pred ~ 0 +" , paste0("s(", cols[-length(cols)], ")", collapse="+"))
  }
  
  if(gam) {
    out$gam_eff =         qgam(as.formula(form1), data = tmp, qu = 0.5)
    out$gam_zero =        qgam(as.formula(form2), data = tmp, qu = 0.5)
    out$gam_pred =        qgam(as.formula(form3), data = tmp, qu = 0.5)
    out$gam_bias_effect = qgam(as.formula(form4), data = tmp, qu = 0.5)
    out$gam_var_effect =  qgam(as.formula(form5), data = tmp, qu = 0.5)
    out$gam_bias_zero =   qgam(as.formula(form6), data = tmp, qu = 0.5)
    out$gam_var_zero =    qgam(as.formula(form7), data = tmp, qu = 0.5)
    out$gam_bias_pred =   qgam(as.formula(form8), data = tmp, qu = 0.5)
    out$gam_var_pred =    qgam(as.formula(form9), data = tmp, qu = 0.5)
    
    out$range_eff = c(
        min(sapply(plot(getViz(out$gam_eff))[[1]], function(obj) min(obj$data$fit$y)  )),
        max(sapply(plot(getViz(out$gam_eff))[[1]], function(obj) max(obj$data$fit$y)  ))
      )
    out$range_pred = c(
        min(sapply(plot(getViz(out$gam_pred))[[1]], function(obj) min(obj$data$fit$y)  )),
        max(sapply(plot(getViz(out$gam_pred))[[1]], function(obj) max(obj$data$fit$y)  ))
      )
    out$range_zero = c(
        min(sapply(plot(getViz(out$gam_zero))[[1]], function(obj) min(obj$data$fit$y)  )),
        max(sapply(plot(getViz(out$gam_zero))[[1]], function(obj) max(obj$data$fit$y)  ))
      )
    out$range_bias_effect = c(
        min(sapply(plot(getViz(out$gam_bias_effect))[[1]], function(obj) min(obj$data$fit$y)  )),
        max(sapply(plot(getViz(out$gam_bias_effect))[[1]], function(obj) max(obj$data$fit$y)  ))
      )
    out$range_var_effect = c(
        min(sapply(plot(getViz(out$gam_var_effect))[[1]], function(obj) min(obj$data$fit$y)  )),
        max(sapply(plot(getViz(out$gam_var_effect))[[1]], function(obj) max(obj$data$fit$y)  ))
      )
    out$range_bias_zero = c(
        min(sapply(plot(getViz(out$gam_bias_zero))[[1]], function(obj) min(obj$data$fit$y)  )),
        max(sapply(plot(getViz(out$gam_bias_zero))[[1]], function(obj) max(obj$data$fit$y)  ))
      )
    out$range_var_zero = c(
        min(sapply(plot(getViz(out$gam_var_zero))[[1]], function(obj) min(obj$data$fit$y)  )),
        max(sapply(plot(getViz(out$gam_var_zero))[[1]], function(obj) max(obj$data$fit$y)  ))
      )
    
    out$range_bias_pred = c(
        min(sapply(plot(getViz(out$gam_bias_pred))[[1]], function(obj) min(obj$data$fit$y)  )),
        max(sapply(plot(getViz(out$gam_bias_pred))[[1]], function(obj) max(obj$data$fit$y)  ))
      )
    out$range_var_pred = c(
        min(sapply(plot(getViz(out$gam_var_pred))[[1]], function(obj) min(obj$data$fit$y)  )),
        max(sapply(plot(getViz(out$gam_var_pred))[[1]], function(obj) max(obj$data$fit$y)  ))
      )
  }
  #### RF ######
  
  tmp = data.frame(model.matrix(~0+., tmp))
  
  
  if(method == "NN") {
    ind2 = ind+6
  } else {
    ind2 = ind
  }

  rf_eff = ranger::ranger(  mse_eff ~ 0 + .,data = cbind( tmp[,1:ind2] ,tmp %>% select(mse_eff )), num.trees= 4000, importance = "permutation" ) 
  rf_pred = ranger::ranger( mse_pred ~0+ ., data = cbind( tmp[,1:ind2] ,tmp %>% select(mse_pred )), num.trees= 4000, importance = "permutation" ) 
  rf_zero = ranger::ranger( mse_zero ~0+ ., data = cbind( tmp[,1:ind2] ,tmp %>% select(mse_zero )), num.trees= 4000, importance = "permutation" ) 
  rf_bias_effect = ranger::ranger(  bias_effect ~ 0 + .,data = cbind( tmp[,1:ind2] ,tmp %>% select(bias_effect )), num.trees= 4000, importance = "permutation" ) 
  rf_var_effect = ranger::ranger( var_effect ~0+ ., data = cbind( tmp[,1:ind2] ,tmp %>% select(var_effect )), num.trees= 4000, importance = "permutation" ) 
  rf_bias_zero = ranger::ranger(  bias_zero ~ 0 + .,data = cbind( tmp[,1:ind2] ,tmp %>% select(bias_zero )), num.trees= 4000, importance = "permutation" ) 
  rf_var_zero = ranger::ranger( var_zero ~0+ ., data = cbind( tmp[,1:ind2] ,tmp %>% select(var_zero )), num.trees= 4000, importance = "permutation" ) 
  rf_bias_pred = ranger::ranger(  bias_pred ~ 0 + .,data = cbind( tmp[,1:ind2] ,tmp %>% select(bias_pred )), num.trees= 4000, importance = "permutation" ) 
  rf_var_pred = ranger::ranger( var_pred ~0+ ., data = cbind( tmp[,1:ind2] ,tmp %>% select(var_pred )), num.trees= 4000, importance = "permutation" )   

  pred_eff = which.min(predict(rf_eff, data = tmp)$predictions)
  pred_pred = which.min(predict(rf_pred, data = tmp)$predictions)
  pred_bias_effect = which.min(predict(rf_bias_effect, data = tmp)$predictions)
  pred_var_effect = which.min(predict(rf_var_effect, data = tmp)$predictions)
  pred_bias_zero = which.min(predict(rf_bias_zero, data = tmp)$predictions)
  pred_var_zero = which.min(predict(rf_var_zero, data = tmp)$predictions)
  pred_bias_pred = which.min(predict(rf_bias_pred, data = tmp)$predictions)
  pred_var_pred = which.min(predict(rf_var_pred, data = tmp)$predictions)

  out$tmp = tmp
  
  transf_imp = function(df) {
    df = as.data.frame(df)
    df$Feature = rownames(df)
    colnames(df)[1] = "Gain"
    df$Gain = log10(df$Gain+1)
    return(df[, c(2, 1)])
  }
  
  out$preds = list(eff = pred_eff, pred = pred_pred, bias_effect = pred_bias_effect, var_effect = pred_var_effect, bias_zero = pred_bias_zero, var_zero = pred_var_zero,
                   bias_pred = pred_bias_pred, var_pred = pred_var_pred)
  
  out$importances = list(eff =   transf_imp(ranger::importance(rf_eff)),
                         pred =   transf_imp(ranger::importance(rf_pred)),
                         zero = transf_imp(ranger::importance(rf_zero)),
                         bias_effect = transf_imp(ranger::importance(rf_bias_effect)),
                         var_effect = transf_imp(ranger::importance(rf_var_effect)),
                         bias_zero = transf_imp(ranger::importance(rf_bias_zero)),
                         var_zero = transf_imp(ranger::importance(rf_bias_zero)),
                         bias_pred = transf_imp(ranger::importance(rf_bias_pred)),
                         var_pred = transf_imp(ranger::importance(rf_bias_pred))                           
                         )
  
  out$hyper = list(eff = parameter[pred_eff,], pred = parameter[pred_pred,], 
                   bias_effect = parameter[pred_bias_effect,], var_effect = parameter[pred_var_effect,],
                   bias_zero = parameter[pred_bias_zero,], var_zero = parameter[pred_var_zero,],
                   bias_pred = parameter[pred_bias_pred,], var_pred = parameter[pred_var_pred,])
  
  out$data =   rbind(
    as.data.frame(coefs_eff[,c(1, 2, 4)]) %>% mutate(group = "eff") %>% mutate(hyper = rownames(coefs_eff), algorithm = method),
    as.data.frame(coefs_pred[,c(1, 2, 4)]) %>% mutate(group = "pred") %>% mutate(hyper = rownames(coefs_pred), algorithm = method),
    as.data.frame(coefs_zero[,c(1, 2, 4)]) %>% mutate(group = "zero") %>% mutate(hyper = rownames(coefs_pred), algorithm = method),
    as.data.frame(coefs_bias_effect[,c(1, 2, 4)]) %>% mutate(group = "bias_effect") %>% mutate(hyper = rownames(coefs_pred), algorithm = method),
    as.data.frame(coefs_var_effect[,c(1, 2, 4)]) %>% mutate(group = "var_effect") %>% mutate(hyper = rownames(coefs_pred), algorithm = method),
    as.data.frame(coefs_bias_zero[,c(1, 2, 4)]) %>% mutate(group = "bias_zero") %>% mutate(hyper = rownames(coefs_pred), algorithm = method),
    as.data.frame(coefs_var_zero[,c(1, 2, 4)]) %>% mutate(group = "var_zero") %>% mutate(hyper = rownames(coefs_pred), algorithm = method),
    as.data.frame(coefs_bias_pred[,c(1, 2, 4)]) %>% mutate(group = "bias_pred") %>% mutate(hyper = rownames(coefs_pred), algorithm = method),
    as.data.frame(coefs_var_pred[,c(1, 2, 4)]) %>% mutate(group = "var_pred") %>% mutate(hyper = rownames(coefs_pred), algorithm = method)    
  )
  
  return( out )
}
```


```{r}
paths = c(
  "results/NN_pars_100_100_replicate.RDS",
  "results/BRT_pars_100_100_replicate.RDS",
  "results/RF_pars_100_100_replicate.RDS",
  "results/Elastic_net_pars_100_100_replicate.RDS"
)
methods = c("NN", "BRT", "RF", "Elastic_net")
results = lapply(1:4, get_coefficients)
data = do.call(rbind, lapply(1:4, function(i) results[[i]]$data ))
saveRDS(results, "results/hyper_parameter_aggregation.RDS")
```


```{r}
#| label: Fig_3c
#| fig-format: pdf
#| fig-width: 10
#| fig-height: 6.7
#| warning: false

labels = c("CELU",
           "ELU",
           "GELU",
           "Leaky ReLU",
           "ReLU",
           "SELU",
           "tanh",
           "batch size",
           "depth",
           "width",
           "alpha",
           "lambda",
           "eta",
           "max depth",
           "subsample",
           "max tree",
           "mtry",
           "min node size",
           "max depth",
           "regularization factor")
names(labels) = c("activationscelu",
                  "activationselu",
                  "activationsgelu",
                  "activationsleaky_relu",
                  "activationsrelu",
                  "activationsselu",
                  "activationstanh",
                  "sgd",
                  "depth", 
                  "width",
                  "alpha", 
                  "lambda",
                  "eta",
                  "max_depth",
                  "subsample",
                  "max_tree",
                  "mtry",
                  "min.node.size",
                  "max.depth",
                  "regularization.factor")


draw_eff = function(y, x, eff, se, col = "black") {
  segments(x+eff+1.96*se, y, x+eff-1.96*se, y)
  #segments(x+eff+1.96*se, y+0.01, x+eff+1.96*se, y-0.01)
  #segments(x+eff-1.96*se, y+0.01, x+eff-1.96*se, y-0.01)
  points(x+eff, y, cex = 0.7, pch = 19, col = col)
}

draw_bar = function(y, x, eff, w = 0.01) {
  rect(x, ybottom = y-w, ytop = y+w, xright = x+eff, 
       col = "#32312F", 
       border = "#000000")
}

draw_line = function(y, x,se, xr , yr, to_y, p = NULL) {
  y = y - mean(y)
  yy = scales::rescale(y, to = yr, from = to_y)
  conf =  scales::rescale(c(y+1.96*se, rev(y-1.96*se)), to = yr, from = to_y)
  xx = scales::rescale(x, to = xr, from = c(min(x), max(x)))
  if(!is.null(p)) pp = scales::rescale(p, to = xr, from = c(min(x), max(x)))
  polygon(c(xx, rev(xx)), conf, col = "#1124524E", border = NA)
  points(xx, yy, type = "l", col = "#24526E", lwd = 3)
  if(!is.null(p)) points(pp, predict(gam(yy~s(xx)), newdata = data.frame(xx = pp)), col = "#FF6F57", cex = 1, pch = 8)
}


cairo_pdf("plots/Fig_44.pdf", width = 9, height = 10)

par(mar = c(2, 9, 4, 2))
plot(NULL, NULL, xlim = c(0, 1), ylim = c(0, 1), 
     xaxt = "n", yaxt="n", xlab = "", ylab = "",  xaxs = "i", yaxs = "i")
tck = 0.015
mgp = 0.07
abline(v = 0.495)
abline(v = 0.505)
segments(y0 = yys[7]-0.015, y1 = yys[7]-0.015, x0 = 0.0, x1 = 0.3, lty = 2)
segments(y0 = yys[7+1]+0.015, y1 = yys[7+1]+0.015, x0 = 0.0, x1 = 0.3, lty = 2)
segments(y0 = yys[7]-0.015, y1 = yys[7]-0.015, x0 = 0.0+0.5, x1 = 0.3+0.5, lty = 2)
segments(y0 = yys[7+1]+0.015, y1 = yys[7+1]+0.015, x0 = 0.0+0.5, x1 = 0.3+0.5, lty = 2)
rect(0.4950-0.001, 0, 0.505+0.001, 1.00, col = "black", xpd = NA, border = "black")
rect(0.4951, -0.05, 0.5049, 1.05, col = "white", xpd = NA, border = "white")
abline(v = 0.30)
text(x = 0.22, y = yys[1]*0.990, pos = 3, label = "Coefs", xpd = NA)
text(x = 0.22+0.5, y = yys[1]*0.990, pos = 3, label = "Coefs", xpd = NA)
text(x = 0.425, y = yys[1]*0.990, pos = 3, label = "VI", xpd = NA)
text(x = 0.425+0.5, y = yys[1]*0.990, pos = 3, label = "VI", xpd = NA)
ytop = 1.03
text(x = 0.25, y = ytop, pos = 3, label = "Effect", xpd = NA, font = 2)
text(x = 0.25+0.5, y = ytop, pos = 3, label = "Prediction", xpd = NA, font = 2)
abline(v = 0.30+0.5)
yys = c(seq(0.97, 0.815, length.out = 7), seq(0.785-0.04, 0.03, length.out = 16))
counter1 = counter2 = 1
methods = c("NN", "BRT", "RF", "Elastic_net")
eff_range = list(
  eff_range2 = c(-0.5, 0.5),
  eff_range1 = c(-0.04, 0.04)
)
vi_range = list(
  c(0, 0.04),
  c(0, 2.5)
)
to_y2 = c(-0.3, 0.3)*2
to_y = list(to_y2, to_y2*3)
xr = c(0.05, 0.25)
xr1 = c(0.01, 0.145)
xr2 = c(0.165, 0.29)
xr_ranges = list(xr1, xr2)
segments(0.15, 1.0, 0.15, y1 =  0.5*(yys[7+1]+yys[7]), lty = 2,  col = "#AAAAAA")
segments(0.15+0.5, 1.0, 0.15+0.5, y1 =  0.5*(yys[7+1]+yys[7]), lty = 2, col = "#AAAAAA")
segments(0.15, yys[7]-0.015, 0.15, y1 =  0, lty = 1,  col = "#AAAAAA")
segments(0.15+0.5,  yys[7]-0.015, 0.15+0.5, y1 = 0, lty =1, col = "#AAAAAA")
groups = c("bias_effect", "bias_pred", "zero")
groups2 = c("eff", "pred", "zero")
for(column in 1:2) {
  counter1 = counter2 = 1
  for(m in 1:4) {
    method_tmp = methods[m]
    NN_tmp_eff = data %>% filter(algorithm == method_tmp) %>% filter(group == groups[column])
    if(m == 1) {
      NN_tmp_eff = NN_tmp_eff[c(1:7, 8, 9, 10, 11, 12),]
    }
    NN_imp_eff = results[[m]]$importances[groups2[column]][[1]]
    for(i in 1:nrow(NN_tmp_eff)) {
      ## Eff
      if( (i < 8) & (m == 1) ) {
        eff = NN_tmp_eff[i, 1]
        eff = scales::rescale(eff, to = c(-0.18, 0.18), from = eff_range[[column]])
        ses = scales::rescale(NN_tmp_eff[i, 2], to = c(-0.18, 0.18), from = eff_range[[column]])
        col = "black"
        if(i == which.min(NN_tmp_eff[1:7,1])) col = "#FF6F57"
        draw_eff(eff = eff, se = ses, x = 0.15+(column-1)*0.5, y = yys[counter1], col = col)
      } else {
          n = i
          if(m == 1) n = n - 7
          for(j in 1:2) {
            v = c("_effect", "_pred")[column]
            gam_eff = results[[m]][paste0("gam_", c("bias", "var")[j], v)][[1]]
            obj = plot(sm(getViz( gam_eff ), n))
            x = obj$data$fit$x
            y = obj$data$fit$y
            se = obj$data$fit$se
            #best_point = results[[m]]$tmp[ results[[m]]$preds[[paste0(c("bias", "var")[j], v)]],i]
            best_point = results[[m]]$tmp[ results[[m]]$preds[[groups2[[column]]]],i]
            #if(j == 2) best_point = NULL
            draw_line(y, x, se, xr = xr_ranges[[j]]+(column-1)*0.5,
                      to_y = results[[m]][paste0("range_", c("bias", "var")[j], v)][[1]],
                      yr = c(yys[counter1]+abs(diff(yys)[10])*0.5-0.004, yys[counter1]-abs(diff(yys)[10])*0.5+0.004)[c(2, 1)],
                    p = best_point)
          }
      }
      ## VI
      imp = (NN_imp_eff %>% filter(Feature == NN_tmp_eff$hyper[i]) %>% select(Gain))$Gain
      if(length(imp) == 0) imp =0
      imp = scales::rescale(imp, to = c(0, 0.2), from = vi_range[[column]])
      draw_bar(x = 0.3+(column-1)*0.5,eff= imp, y = yys[counter1])
      text(xpd = NA, pos = 2, y = yys[counter1]*0.99, x = 0.0, label = labels[NN_tmp_eff$hyper[i]])
      counter1 = counter1 + 1
      print(NN_tmp_eff$hyper[i])
    }
    if(m < 4) abline(h= 0.5*(yys[counter1]+yys[counter1-1]), lty = 1)
  }
}
rect(0.4951, -0.05, 0.5049, 1.05, col = "white", xpd = NA, border = "white")
axis(3, at = scales::rescale(c(-0.25, 0.0, 0.25), to = c(0.02, 0.28), from = eff_range[[1]]), labels = c(-0.25, 0.0, 0.25), tck = tck, mgp = c(3, mgp, 0))
axis(3, at = scales::rescale(c(-0.02, 0.0, 0.02), to = c(0.02, 0.28), from = eff_range[[2]])+0.5, labels = c(-0.02, 0.0, 0.02), tck = tck, mgp = c(3, mgp, 0))

axis(3, at = scales::rescale(c(0, log10(0.03+1), log10(0.08+1)), to = c(0.3, 0.5), from = vi_range[[1]]),  
     labels = c(0, 0.03, 0.08), tck = tck, mgp = c(3, mgp, 0))
axis(3, at = scales::rescale(c(0, log10(10+1), log10(130+1)), to = c(0.3, 0.5), from = vi_range[[2]])+0.5, labels = c(0, 10, 130), tck = tck, mgp = c(3, mgp, 0))
text(pos = 4, x = 1.0, y = yys[5], label = "Neural Network", xpd = NA, srt = -90)
text(pos = 4, x = 1.0, y = yys[14], label = "BRT", xpd = NA, srt = -90)
text(pos = 4, x = 1.0, y = yys[18], label = "RF", xpd = NA, srt = -90)
text(pos = 4, x = 1.0, y = yys[22], label = "EN", xpd = NA, srt = -90)
#text(x = 0.02, y = 1.05, pos = 2, label = "A", font = 2, cex = 1.3 , xpd = NA)
#text(x = 0.02+0.5, y = 1.05, pos = 2, label = "B", font = 2, cex = 1.3 , xpd = NA)
text(x = 0.15, y = 0, pos = 1, label = "hyper-parameter range", xpd = NA)
text(x = 0.15+0.5, y = 0, pos = 1, label = "hyper-parameter range", xpd = NA)
text(x = 0.15/2, y = yys[7]-0.02, pos = 1, label = "Bias", xpd = NA)
text(x = 0.15/2+0.15, y = yys[7]-0.02, pos = 1, label = "Variance", xpd = NA)
text(x = 0.15/2+0.5, y = yys[7]-0.02, pos = 1, label = "Bias", xpd = NA)
text(x = 0.15/2+0.15+0.5, y = yys[7]-0.02, pos = 1, label = "Variance", xpd = NA)



dev.off()

```

```{r}


hyper_to_text = function(x, pre="", NN = FALSE) {x
  x = unlist(x)
  if(NN) x[[1]] = paste0("'", x[[1]], "'")
  return(paste0(paste0(paste0(pre, names(x)), "=", x, collapse = "\n"), "\n") )
}

settings = matrix(c(100, 100, 600, 100, 2000, 100), ncol = 2, byrow = TRUE)

sapply(1:3, function(k) {
  tmp = as.integer(settings[k,])
  paths <<- c(
    paste0("results/NN_pars_",tmp[1],"_",tmp[2],"_replicate.RDS"),
    paste0("results/BRT_pars_",tmp[1],"_",tmp[2],"_replicate.RDS"),
    paste0("results/RF_pars_",tmp[1],"_",tmp[2],"_replicate.RDS"),
    paste0("results/Elastic_net_pars_",tmp[1],"_",tmp[2],"_replicate.RDS")
  )
  methods = c("NN", "BRT", "RF", "Elastic_net")
  results = lapply(1:4, function(i) {
    tmp = get_coefficients(i, gam = FALSE)$hyper$eff %>% select(-var_effect, -bias_zero, -var_zero, -bias_pred, -var_pred, -mse_eff, -mse_zero, -bias_effect, -mse_pred)
    names(tmp) = paste0(c("NN", "BRT", "RF", "EN")[i], "_", names(tmp))
    return(tmp)
    })
  conn = file(paste0("code/hyper-parameter/BIAS_hyper_param_config_",tmp[1],"_",tmp[2],".R"))
  writeLines(
    paste0(
      paste0("## Hyper-parameters for data-poor scenarios created by 'results.qmd' file\n"),
      hyper_to_text(results[[1]], NN = TRUE),
      hyper_to_text(results[[2]], NN = FALSE),
      hyper_to_text(results[[3]], NN = FALSE),
      hyper_to_text(results[[4]], NN = FALSE)), 
    conn )
  close(conn)
})


sapply(1:3, function(k) {
  tmp = as.integer(settings[k,])
  paths <<- c(
    paste0("results/NN_pars_",tmp[1],"_",tmp[2],"_replicate.RDS"),
    paste0("results/BRT_pars_",tmp[1],"_",tmp[2],"_replicate.RDS"),
    paste0("results/RF_pars_",tmp[1],"_",tmp[2],"_replicate.RDS"),
    paste0("results/Elastic_net_pars_",tmp[1],"_",tmp[2],"_replicate.RDS")
  )
  methods = c("NN", "BRT", "RF", "Elastic_net")
  results = lapply(1:4, function(i) {
    tmp = get_coefficients(i)$hyper$pred %>% select(-var_effect, -bias_zero, -var_zero, -bias_pred, -var_pred, -mse_eff, -mse_zero, -bias_effect, -mse_pred)
    names(tmp) = paste0(c("NN", "BRT", "RF", "EN")[i], "_", names(tmp))
    return(tmp)
    })
  conn = file(paste0("code/hyper-parameter/MSE_hyper_param_config_",tmp[1],"_",tmp[2],".R"))
  writeLines(
    paste0(
      paste0("## Hyper-parameters for data-poor scenarios created by 'create_hyper_config_.R' file\n"),
      hyper_to_text(results[[1]], NN = TRUE),
      hyper_to_text(results[[2]], NN = FALSE),
      hyper_to_text(results[[3]], NN = FALSE),
      hyper_to_text(results[[4]], NN = FALSE)), 
    conn )
  close(conn)
})

```


### Case Study

#### No Change

```{r}
#| label: Fig_4a_no_change
#| fig-format: pdf
#| fig-width: 3
#| fig-height: 3

coll_no = readRDS("results/res_changed_no.RDS")
coll_no_results = apply(coll_no [1:10, ,], 2:3, mean)
coll_no_results = as.data.frame(coll_no_results)[1:4,]
rownames(coll_no_results) = c("BRT", "RF", "NN", "LM")
colnames(coll_no_results) = c("H", "HT", "HO", "HOT")
data = coll_no_results
data$model = rownames(data)
data = data %>% pivot_longer(cols = c("H", "HT", "HO", "HOT")) 
data = data %>% filter(name %in% c("HO", "H"))
color = RColorBrewer::brewer.pal(4, "Set2")
labels = c("Conventional ML 1", "Causal ML")
data$name = forcats::lvls_reorder(data$name, c(2, 1))

ggplot(data, aes(fill=model, y=value, x=name)) + 
  geom_bar(position="dodge", stat="identity") +
  scale_fill_manual("",  values = c("BRT" = color[1], "RF" = color[2], "LM" = color[3], "NN" = color[4]) )+
  labs(x = "", y = "R2") +
  theme_bw() +
  scale_x_discrete(labels = labels, guide = guide_axis(angle = 45)) +
  theme(panel.grid.major.x = element_blank()) +
  theme(axis.text=element_text(size=13))

levels(data$name) = c("Conventional ML 1", "Causal ML")
insample = data

```

```{r}
#| label: Fig_4b_collider
#| fig-format: pdf
#| fig-width: 3
#| fig-height: 3

coll_no = readRDS("results/res_changed_intervention.RDS")
coll_no_results = apply(coll_no [1:10, ,], 2:3, mean)
coll_no_results = as.data.frame(coll_no_results)[1:4,]
rownames(coll_no_results) = c("BRT", "RF", "NN", "LM")
colnames(coll_no_results) = c("H", "HT", "HO", "HOT")
data = coll_no_results
data$model = rownames(data)
data = data %>% pivot_longer(cols = c("H", "HT", "HO", "HOT")) %>% filter(name %in% c("HO", "H"))
color = RColorBrewer::brewer.pal(4, "Set2")
labels = c("Conventional ML 1", "Causal ML")
data$name = forcats::lvls_reorder(data$name, c(2, 1))

ggplot(data, aes(fill=model, y=value, x=name)) + 
  geom_bar(position="dodge", stat="identity") +
  scale_fill_manual("",  values = c("BRT" = color[1], "RF" = color[2], "LM" = color[3], "NN" = color[4]) )+
  labs(x = "", y = "R2") +
  theme_bw() +
  scale_x_discrete(labels = labels, guide = guide_axis(angle = 45)) +
  theme(panel.grid.major.x = element_blank()) +
  theme(axis.text=element_text(size=12))

levels(data$name) = c("Conventional ML 1", "Causal ML")
outofsample = data

```

```{r}
#| label: Fig_4c_confounder
#| fig-format: pdf
#| fig-width: 3.3
#| fig-height: 3

coll_no = readRDS("results/res_changed_coll.RDS")
coll_no_results = apply(coll_no [1:10, ,], 2:3, mean)
coll_no_results = as.data.frame(coll_no_results)[1:4,]
rownames(coll_no_results) = c("BRT", "RF", "NN", "LM")
colnames(coll_no_results) = c("H", "HT", "HO", "HOT")
data = coll_no_results
data$model = rownames(data)
data = data %>% pivot_longer(cols = c("H", "HT", "HO", "HOT")) %>% filter(name %in% c("HOT", "HT", "H"))
color = RColorBrewer::brewer.pal(4, "Set2")

data$name = forcats::lvls_reorder(data$name, idx = c(1,2 , 3))
labels = c("Conventional ML 1","Conventional ML 2", "Causal ML")

ggplot(data, aes(fill=model, y=value, x=name)) + 
  geom_bar(position="dodge", stat="identity") +
  scale_fill_manual("",  values = c("BRT" = color[1], "RF" = color[2], "LM" = color[3], "NN" = color[4]) )+
  labs(x = "", y = "R2") +
  theme_bw() +
  scale_x_discrete(labels = labels, guide = guide_axis(angle = 45)) +
  theme(panel.grid.major.x = element_blank()) +
  theme(axis.text=element_text(size=12))


levels(data$name) = c("Conventional ML 1", "Conventional ML 2", "Causal ML")
outofsample_conf = data

```




