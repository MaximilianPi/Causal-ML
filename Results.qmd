---
title: "Results"
format:
  html: 
    code-fold: true
    self-contained: false
    smooth-scroll: true
  docx: default
editor: visual
---

```{r}
#| echo: false
#| message: false
library(ggplot2)
library(ggbreak)
library(tidyverse)
library(igraph)
library(Cairo)
source("utils.R")

```

## Results

### Proof of concept

```{r}
#| echo: false

files =        c("collinearity_0.5.RDS", 
                 "collinearity_0.90.RDS", 
                 "collinearity_0.99.RDS", 
                 "effects.RDS", 
                 "no_effects.RDS", 
                 "confounder_unequal.RDS", 
                 "confounder.RDS")

Results = 
  lapply(files, function(f) {
    confounder = readRDS(paste0("results/",f))
    Result = do.call(rbind, lapply(1:8, function(j) (apply(abind::abind(lapply(1:100, function(i) confounder[[i]][[j]][[1]] ), along = 0L), 2, mean))))
    colnames(Result) = LETTERS[1:5]
    rownames(Result) = c("LM", "RF", "BRT", "NN", "Dropout", "l1", "l2", "l1l2")
    return(Result)
  })
names(Results) = unlist(strsplit(files, ".RDS", TRUE))


Results_rmse = 
  lapply(files, function(f) {
    confounder = readRDS(paste0("results/",f))
    Result = do.call(rbind, lapply(1:8, function(j) (apply(abind::abind(lapply(1:100, function(i) confounder[[i]][[j]][[2]] ), along = 0L), 2, mean))))
    colnames(Result) = "RMSE"
    rownames(Result) = c("LM", "RF", "BRT", "NN", "Dropout","l1", "l2", "l1l2")
    return(Result)
  })
names(Results_rmse) = unlist(strsplit(files, ".RDS", TRUE))

RMSEs = round(do.call(cbind, Results_rmse), 3)
colnames(RMSEs) = unlist(strsplit(files, ".RDS", TRUE))

Results_sd = 
  lapply(files, function(f) {
    confounder = readRDS(paste0("results/",f))
    Result = do.call(rbind, lapply(1:8, function(j) (apply(abind::abind(lapply(1:100, function(i) confounder[[i]][[j]][[1]] ), along = 0L), 2, sd))))
    colnames(Result) = LETTERS[1:5]
    rownames(Result) = c("LM", "RF", "BRT", "NN","Dropout", "l1", "l2", "l1l2")
    return(Result)
  })
names(Results_sd) = unlist(strsplit(files, ".RDS", TRUE))



```

```{r}
#| label: Fig_2
#| fig-format: pdf
#| fig-width: 10
#| fig-height: 9



sc = c("no_effects", "effects", "confounder_unequal", "collinearity_0.90")

cairo_pdf("plots/Fig_2.pdf", width = 10, height = 9)

par(mfcol = c(3,6), mar = c(5,0.5, 2, 1.4), oma = c(1, 2, 2, 1))
labs =  c("LM","RF",  "BRT", "NN","Dropout", "l1", "l2", "Elastic-net")

#plot_scenarios(1.0)
#dev.off()
cex_fac = 1.3

plot_scenarios(1.0, layout = matrix(c(1,1,
                             0,1,
                             0,0,
                             0,2), nrow = 4L, 2L, byrow = TRUE))

    points(x = 0, y = -0.55, col = "grey", xpd = NA, pch = 15, cex = 1.8)
    text(x = 0.1, y = -0.55, label = "True effect", xpd = NA, pos = 4, cex = 1.4)
    
    points(x = 0, y = -0.75, col = "#ffab02", xpd = NA, pch = 15, cex = 1.8)
    text(x = 0.1, y = -0.75, label = "Correlation", xpd = NA, pos = 4, cex = 1.4)


true_effs = matrix(c(
  NA, NA, NA,
  1, 0.5, 1,
  -1, 0.5, 1,
  1, 0, 1
), 4, 3, byrow = TRUE)

for(i in c(1, 2, 3, 4, 8)) {
  counter = 1
  for(j in c(2, 4, 3)) {

    tmp = Results[[sc[j]]]
    sd = Results_sd[[sc[j]]][i,]
    edges = round(tmp[i,], 5)
    bias = edges[c(1, 2, 5)] - true_effs[j,]
    g1 = graph(c("x\U2081", "y", "x\U2082", "y", "x\U2083", "y"),  
                directed=TRUE ) 
    layout_as_tree(g1, root = "y", circular = TRUE, flip.y = TRUE)
    eqarrowPlot(g1, matrix(c(1,1,
                             0,1,
                             0,0,
                             0,2), nrow = 4L, 2L, byrow = TRUE) ,
                #cols = c( "skyblue","#B0A8B9", "#B0A8B9", "#B0A8B9"),
                cols = c(addA(rep("#87CEEB", 1), 1.0), "#B0A8B9", addA(rep("#87CEEB", 1), 1.0), addA(rep("#87CEEB", 1), 1.0)),
                edge.arrow.size=abs(bias)*2.3,#abs(edges[c(1, 2, 5)]), 
                edge.width=abs(bias)*cex_fac*2,#abs(edges[c(1, 2, 5)])*cex_fac,
                edge.label = c(paste0(format(round(bias, 2)[1], nsmall = 1), "\n\n"),
                               paste0("          ",format(round(bias, 2)[2], nsmall = 1), "\n"), 
                               paste0("          ", format(round(bias, 2)[3], nsmall=1))),
                edge.label.cex = 1.4,
                edge.colors = ifelse(abs(edges[c(1, 2, 5)]) < 0.001, "white", "#e60000"))
    text(labs[i], x = 0, y = 2.3, xpd = NA, cex = 1.4, pos = 3)
    if(i == 1) {
      text(letters[counter], cex = 1.9, x = -2.2, y = 2.5, xpd = NA, font = 2)
      counter = counter + 1
    }

  }
  if(i == 3) {
    points(x = 0-1, y = -1.1*0.5, col = "#e60000", xpd = NA, pch = 15, cex = 1.8)
    text(x = 0.1-1, y = -1.1*0.5, label = "Bias = estiamted effect - true effect", xpd = NA, pos = 4, cex = 1.4)
  }
}


dev.off()

```

### Data-poor simulation

```{r}
#| echo: false

effs_true = c(1.0, 0.0, 0.0, 0.0, 1, rep(0, 95))


inter_low = readRDS("results/data_poor_small.RDS")
inter_med = readRDS("results/data_poor_mid.RDS")
inter_large = readRDS("results/data_poor_big.RDS")
extract_B = function(RI, exponent = 1) {
  Bias = apply(abind::abind(lapply(1:50, function(j) t(sapply(1:8, function(i) RI[[j]][[i]][[1]] - effs_true))), along = 0L), 2:3, mean)**exponent
  Bias_1 = apply(Bias[,c(effs_true > 0.5)], 1, mean)
  Bias_0 = apply(Bias[,c(effs_true < 0.5)], 1, mean)
  return(cbind(Bias_1, Bias_0)) #, Bias_Inter_1, Bias_Inter_0))
}

extract_V= function(RI) {
  Var = apply(abind::abind(lapply(1:50, function(j) t(sapply(1:8, function(i) RI[[j]][[i]][[1]]))), along = 0L), 2:3, var)
  Var_1 = apply(Var[,c(effs_true > 0.5)], 1, mean)
  Var_0 = apply(Var[,c(effs_true < 0.5)], 1, mean)
  return(cbind(Var_1, Var_0))  #, Var_Inter_1, Var_Inter_0))
}

bias_low = extract_B(inter_low, exponent = 1)
bias_med = extract_B(inter_med, exponent = 1)
bias_large = extract_B(inter_large, exponent = 1)

var_low = extract_V(inter_low)
var_med = extract_V(inter_med)
var_large =extract_V(inter_large)

colnames(bias_low) = colnames(bias_med) = colnames(bias_large) = c("bias_1_Main", "bias_0_Main") #, "bias_1_Inter", "bias_0_Inter")
colnames(var_low) = colnames(var_med) = colnames(var_large) = c("var_1_Main", "var_0_Main") #, "var_1_Inter", "var_0_Inter")
rownames(bias_low) = rownames(bias_med) = rownames(bias_large) = rownames(var_low) = rownames(var_med) = rownames(var_large)= c( "LM","RF", "BRT", "NN","NN_Drop", "L1", "L2", "glmnet")


bias_low_L = bias_low %>% data.frame %>% mutate(method = rownames(.)) %>%  pivot_longer(cols = c("bias_1_Main", "bias_0_Main"), values_to = "bias") %>% mutate(N = "low")
bias_med_L = bias_med %>% data.frame %>% mutate(method = rownames(.)) %>%  pivot_longer(cols = c("bias_1_Main", "bias_0_Main"), values_to = "bias") %>% mutate(N = "med")
bias_large_L = bias_large %>% data.frame %>% mutate(method = rownames(.)) %>%   pivot_longer(cols = c("bias_1_Main", "bias_0_Main"), values_to = "bias") %>% mutate(N = "large")
var_low_L = var_low %>% data.frame%>% mutate(method = rownames(.)) %>%   pivot_longer(cols = c("var_1_Main", "var_0_Main"), values_to = "var") %>% mutate(N = "low")
var_med_L = var_med %>% data.frame %>% mutate(method = rownames(.)) %>%  pivot_longer(cols = c("var_1_Main", "var_0_Main"), values_to = "var") %>% mutate(N = "med")
var_large_L = var_large %>% data.frame %>% mutate(method = rownames(.)) %>%   pivot_longer(cols = c("var_1_Main", "var_0_Main"), values_to = "var") %>% mutate(N = "large")

data_bias = rbind(bias_low_L, bias_med_L, bias_large_L)
data_var = rbind(var_low_L, var_med_L, var_large_L)
data_bias$var = data_var$var
colnames(data_bias)[2] = "which_bias"
data = data_bias  %>% pivot_longer(cols = c("bias", "var"))

data$N = forcats::lvls_reorder(data$N, c(2, 3, 1))
data$name = forcats::lvls_reorder(data$name, c(2, 1))
data$which_bias = forcats::lvls_reorder(data$which_bias, c(2, 1))

data$method = forcats::lvls_reorder(data$method, c(5,8, 1, 6,7, 3, 4, 2))
data$label = ""#c(rep("NA", 8), rep("", nrow(data)-8))
```

```{r}
#| label: Fig_3
#| fig-format: pdf
#| fig-width: 10
#| fig-height: 6.7
#| warning: false

cairo_pdf("plots/Fig_3.pdf", width = 10, height = 7)

levels(data$method)[8] = "Elastic-net"

par(mfrow = c(3, 5), mar = c(1, 1, 1, 1)*0.5, oma = c(8, 4, 4, 4))
methods = c("LM", "RF", "BRT", "NN", "Elastic-net")
sizes = c("low", "med", "large")
y_labels = c("N = 100", "N = 600", "N = 2000")
for(j in 1:3) {
  for(i in 1:5) {
    if(i == 1) axes = TRUE
    else axes = FALSE
    if(j ==1) create_gapped_stacked(tmp = data[data$method == methods[i] & data$N== sizes[j], ], 
                                    axes = axes, to = c(0, 0.8), labels1 = c("0.0", "0.2", "0.4", "0.6", "0.8"))
    else create_gapped_stacked(tmp = data[data$method == methods[i] & data$N== sizes[j], ], 
                               axes = axes, to2 = c(1.0, 3), 
                               labels2 = c("1.0","2.0", "3.0"), to = c(0, 0.8),
                                labels1 = c("0.0", "0.2", "0.4", "0.6", "0.8"))
    if(j == 3){
      text(x = c(0.33, 0.66)-0.25,y = -0.24, 
           labels = c("Bias+Variance for beta = 1", "Bias+Variance for beta = 0"), 
           srt = 45,
           xpd = NA, pos = 1)
    }
    
    if(j == 1) {
      rect(0, 1.0, 1.0, 1.1, xpd = NA, border = "black")
      text(0.5, y = 0.98, pos = 3, xpd = NA, label = methods[i], cex = 1.3, font = 2)
    }
    if(i == 5) {
      rect(1, 0, 1.15, 1.0, xpd = NA, border = "black")
      text(y = 0.72, x = 1.01, pos = 4, xpd = NA, label = y_labels[j], cex = 1.3, font = 2, srt = -90)
    }
    if(i == 5 & j == 1) {
      legend("topright", bty = "n", col = c("#96c6ed","#e0acd5" ), pch = 15, legend = c("Bias", "Variance"))
    }
  }
}

dev.off()

```


### Case Study

#### No Change

```{r}
#| label: Fig_4a_no_change
#| fig-format: pdf
#| fig-width: 3
#| fig-height: 3

coll_no = readRDS("results/res_changed_no.RDS")
coll_no_results = apply(coll_no [1:10, ,], 2:3, mean)
coll_no_results = as.data.frame(coll_no_results)[1:4,]
rownames(coll_no_results) = c("BRT", "RF", "NN", "LM")
colnames(coll_no_results) = c("H", "HT", "HO", "HOT")
data = coll_no_results
data$model = rownames(data)
data = data %>% pivot_longer(cols = c("H", "HT", "HO", "HOT")) 
data = data %>% filter(name %in% c("HO", "H"))
color = RColorBrewer::brewer.pal(4, "Set2")
labels = c("Conventional ML 1", "Causal ML")
data$name = forcats::lvls_reorder(data$name, c(2, 1))

ggplot(data, aes(fill=model, y=value, x=name)) + 
  geom_bar(position="dodge", stat="identity") +
  scale_fill_manual("",  values = c("BRT" = color[1], "RF" = color[2], "LM" = color[3], "NN" = color[4]) )+
  labs(x = "", y = "R2") +
  theme_bw() +
  scale_x_discrete(labels = labels, guide = guide_axis(angle = 45)) +
  theme(panel.grid.major.x = element_blank()) +
  theme(axis.text=element_text(size=13))

levels(data$name) = c("Conventional ML 1", "Causal ML")
insample = data

```

```{r}
#| label: Fig_4b_collider
#| fig-format: pdf
#| fig-width: 3
#| fig-height: 3

coll_no = readRDS("results/res_changed_intervention.RDS")
coll_no_results = apply(coll_no [1:10, ,], 2:3, mean)
coll_no_results = as.data.frame(coll_no_results)[1:4,]
rownames(coll_no_results) = c("BRT", "RF", "NN", "LM")
colnames(coll_no_results) = c("H", "HT", "HO", "HOT")
data = coll_no_results
data$model = rownames(data)
data = data %>% pivot_longer(cols = c("H", "HT", "HO", "HOT")) %>% filter(name %in% c("HO", "H"))
color = RColorBrewer::brewer.pal(4, "Set2")
labels = c("Conventional ML 1", "Causal ML")
data$name = forcats::lvls_reorder(data$name, c(2, 1))

ggplot(data, aes(fill=model, y=value, x=name)) + 
  geom_bar(position="dodge", stat="identity") +
  scale_fill_manual("",  values = c("BRT" = color[1], "RF" = color[2], "LM" = color[3], "NN" = color[4]) )+
  labs(x = "", y = "R2") +
  theme_bw() +
  scale_x_discrete(labels = labels, guide = guide_axis(angle = 45)) +
  theme(panel.grid.major.x = element_blank()) +
  theme(axis.text=element_text(size=12))

levels(data$name) = c("Conventional ML 1", "Causal ML")
outofsample = data

```

```{r}
#| label: Fig_4c_confounder
#| fig-format: pdf
#| fig-width: 3.3
#| fig-height: 3

coll_no = readRDS("results/res_changed_coll.RDS")
coll_no_results = apply(coll_no [1:10, ,], 2:3, mean)
coll_no_results = as.data.frame(coll_no_results)[1:4,]
rownames(coll_no_results) = c("BRT", "RF", "NN", "LM")
colnames(coll_no_results) = c("H", "HT", "HO", "HOT")
data = coll_no_results
data$model = rownames(data)
data = data %>% pivot_longer(cols = c("H", "HT", "HO", "HOT")) %>% filter(name %in% c("HOT", "HT", "H"))
color = RColorBrewer::brewer.pal(4, "Set2")

data$name = forcats::lvls_reorder(data$name, idx = c(1,2 , 3))
labels = c("Conventional ML 1","Conventional ML 2", "Causal ML")

ggplot(data, aes(fill=model, y=value, x=name)) + 
  geom_bar(position="dodge", stat="identity") +
  scale_fill_manual("",  values = c("BRT" = color[1], "RF" = color[2], "LM" = color[3], "NN" = color[4]) )+
  labs(x = "", y = "R2") +
  theme_bw() +
  scale_x_discrete(labels = labels, guide = guide_axis(angle = 45)) +
  theme(panel.grid.major.x = element_blank()) +
  theme(axis.text=element_text(size=12))


levels(data$name) = c("Conventional ML 1", "Conventional ML 2", "Causal ML")
outofsample_conf = data

```

```{r}
(outofsample_conf %>% pivot_wider(names_from = model))[c(2, 1, 3),]
```
