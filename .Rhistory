train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[3, ]=  c(train_test_rf(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result[4, ]=  c(train_test_glmnet(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_glmnet(train[,], test1[,], test2[,]) %>% unlist)
# result[5, ]=  c(train_test_cito(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
#                 train_test_cito(train[,], test1[,], test2[,]) %>% unlist)
return(result)
})
result_list =
parallel::parLapply(cl, 1:samples, function(i) {
# who am I
myself = paste(Sys.info()[['nodename']], Sys.getpid(), sep='-')
dist = cbind(nodes,0:3)
dev = as.integer(as.numeric(dist[which(dist[,1] %in% myself, arr.ind = TRUE), 2]))
Sys.setenv(CUDA_VISIBLE_DEVICES=dev)
train = simulate_SDM(   c(3.0,  3.0, 2.5, -1.5, 0.0))
test1 = simulate_SDM(   c(0.0,  0.0, 2.5, -1.5, 0.0))
test2 = simulate_SDM(   c(3.0,  3.0, 2.5, -1.5, 0.0))
result = matrix(NA, 5, 4)
result[1, ]= c(train_test_lm(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_lm(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]= c(train_test_brt(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[3, ]=  c(train_test_rf(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result[4, ]=  c(train_test_glmnet(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_glmnet(train[,], test1[,], test2[,]) %>% unlist)
# result[5, ]=  c(train_test_cito(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
#                 train_test_cito(train[,], test1[,], test2[,]) %>% unlist)
return(result)
})
apply(abind::abind(result_list, along = 0L), 2:3, mean)
result_list =
parallel::parLapply(cl, 1:samples, function(i) {
# who am I
myself = paste(Sys.info()[['nodename']], Sys.getpid(), sep='-')
dist = cbind(nodes,0:3)
dev = as.integer(as.numeric(dist[which(dist[,1] %in% myself, arr.ind = TRUE), 2]))
Sys.setenv(CUDA_VISIBLE_DEVICES=dev)
train = simulate_SDM(   c(3.0,  3.0, 2.5, -1.5, 0.2))
test1 = simulate_SDM(   c(0.0,  0.0, 2.5, -1.5, 0.2))
test2 = simulate_SDM(   c(3.0,  3.0, 2.5, -1.5, 0.2))
result = matrix(NA, 5, 4)
result[1, ]= c(train_test_lm(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_lm(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]= c(train_test_brt(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[3, ]=  c(train_test_rf(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result[4, ]=  c(train_test_glmnet(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_glmnet(train[,], test1[,], test2[,]) %>% unlist)
# result[5, ]=  c(train_test_cito(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
#                 train_test_cito(train[,], test1[,], test2[,]) %>% unlist)
return(result)
})
apply(abind::abind(result_list, along = 0L), 2:3, mean)
result_list =
parallel::parLapply(cl, 1:samples, function(i) {
# who am I
myself = paste(Sys.info()[['nodename']], Sys.getpid(), sep='-')
dist = cbind(nodes,0:3)
dev = as.integer(as.numeric(dist[which(dist[,1] %in% myself, arr.ind = TRUE), 2]))
Sys.setenv(CUDA_VISIBLE_DEVICES=dev)
train = simulate_SDM(   c(3.0,  3.0, 2.5, -1.8, 0.0))
test1 = simulate_SDM(   c(0.0,  0.0, 2.5, -1.8, 0.0))
test2 = simulate_SDM(   c(3.0,  3.0, 2.5, -1.8, 0.0))
result = matrix(NA, 5, 4)
result[1, ]= c(train_test_lm(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_lm(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]= c(train_test_brt(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[3, ]=  c(train_test_rf(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result[4, ]=  c(train_test_glmnet(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_glmnet(train[,], test1[,], test2[,]) %>% unlist)
# result[5, ]=  c(train_test_cito(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
#                 train_test_cito(train[,], test1[,], test2[,]) %>% unlist)
return(result)
})
apply(abind::abind(result_list, along = 0L), 2:3, mean)
result_list =
parallel::parLapply(cl, 1:samples, function(i) {
# who am I
myself = paste(Sys.info()[['nodename']], Sys.getpid(), sep='-')
dist = cbind(nodes,0:3)
dev = as.integer(as.numeric(dist[which(dist[,1] %in% myself, arr.ind = TRUE), 2]))
Sys.setenv(CUDA_VISIBLE_DEVICES=dev)
train = simulate_SDM(   c(3.0,  3.0, 2.5, -0.8, 0.0))
test1 = simulate_SDM(   c(0.0,  0.0, 2.5, -0.8, 0.0))
test2 = simulate_SDM(   c(3.0,  3.0, 2.5, -0.8, 0.0))
result = matrix(NA, 5, 4)
result[1, ]= c(train_test_lm(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_lm(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]= c(train_test_brt(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[3, ]=  c(train_test_rf(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result[4, ]=  c(train_test_glmnet(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_glmnet(train[,], test1[,], test2[,]) %>% unlist)
# result[5, ]=  c(train_test_cito(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
#                 train_test_cito(train[,], test1[,], test2[,]) %>% unlist)
return(result)
})
apply(abind::abind(result_list, along = 0L), 2:3, mean)
result_list =
parallel::parLapply(cl, 1:samples, function(i) {
# who am I
myself = paste(Sys.info()[['nodename']], Sys.getpid(), sep='-')
dist = cbind(nodes,0:3)
dev = as.integer(as.numeric(dist[which(dist[,1] %in% myself, arr.ind = TRUE), 2]))
Sys.setenv(CUDA_VISIBLE_DEVICES=dev)
train = simulate_SDM(   c(3.0,  3.0, 2.5, -1.0, 0.0))
test1 = simulate_SDM(   c(0.0,  0.0, 2.5, -1.0, 0.0))
test2 = simulate_SDM(   c(3.0,  3.0, 2.5, -1.0, 0.0))
result = matrix(NA, 5, 4)
result[1, ]= c(train_test_lm(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_lm(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]= c(train_test_brt(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[3, ]=  c(train_test_rf(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result[4, ]=  c(train_test_glmnet(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_glmnet(train[,], test1[,], test2[,]) %>% unlist)
# result[5, ]=  c(train_test_cito(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
#                 train_test_cito(train[,], test1[,], test2[,]) %>% unlist)
return(result)
})
apply(abind::abind(result_list, along = 0L), 2:3, mean)
samples = 200L
result_list =
parallel::parLapply(cl, 1:samples, function(i) {
# who am I
myself = paste(Sys.info()[['nodename']], Sys.getpid(), sep='-')
dist = cbind(nodes,0:3)
dev = as.integer(as.numeric(dist[which(dist[,1] %in% myself, arr.ind = TRUE), 2]))
Sys.setenv(CUDA_VISIBLE_DEVICES=dev)
train = simulate_SDM(   c(3.0,  3.0, 2.5, -1.2, 0.0))
test1 = simulate_SDM(   c(0.0,  0.0, 2.5, -1.2, 0.0))
test2 = simulate_SDM(   c(3.0,  3.0, 2.5, -1.2, 0.0))
result = matrix(NA, 5, 4)
result[1, ]= c(train_test_lm(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_lm(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]= c(train_test_brt(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[3, ]=  c(train_test_rf(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result[4, ]=  c(train_test_glmnet(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_glmnet(train[,], test1[,], test2[,]) %>% unlist)
# result[5, ]=  c(train_test_cito(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
#                 train_test_cito(train[,], test1[,], test2[,]) %>% unlist)
return(result)
})
apply(abind::abind(result_list, along = 0L), 2:3, mean)
train = simulate_SDM(   c(3.0,  3.0, 2.5, -1.2, 0.0))
test1 = simulate_SDM(   c(-.2,  0.2, 2.5, -1.2, 0.0))
test2 = simulate_SDM(   c(3.0,  3.0, 2.5, -1.2, 0.0))
result = matrix(NA, 5, 4)
c(train_test_lm(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_lm(train[,], test1[,], test2[,]) %>% unlist)
result_list =
parallel::parLapply(cl, 1:samples, function(i) {
# who am I
myself = paste(Sys.info()[['nodename']], Sys.getpid(), sep='-')
dist = cbind(nodes,0:3)
dev = as.integer(as.numeric(dist[which(dist[,1] %in% myself, arr.ind = TRUE), 2]))
Sys.setenv(CUDA_VISIBLE_DEVICES=dev)
train = simulate_SDM(   c(3.0,  3.0, 2.5, -1.5, 0.0))
test1 = simulate_SDM(   c(-.2,  0.2, 2.5, -1.5, 0.0))
test2 = simulate_SDM(   c(3.0,  3.0, 2.5, -1.5, 0.0))
result = matrix(NA, 5, 4)
result[1, ]= c(train_test_lm(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_lm(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]= c(train_test_brt(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[3, ]=  c(train_test_rf(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result[4, ]=  c(train_test_glmnet(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_glmnet(train[,], test1[,], test2[,]) %>% unlist)
# result[5, ]=  c(train_test_cito(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
#                 train_test_cito(train[,], test1[,], test2[,]) %>% unlist)
return(result)
})
apply(abind::abind(result_list, along = 0L), 2:3, mean)
result_list =
parallel::parLapply(cl, 1:samples, function(i) {
# who am I
myself = paste(Sys.info()[['nodename']], Sys.getpid(), sep='-')
dist = cbind(nodes,0:3)
dev = as.integer(as.numeric(dist[which(dist[,1] %in% myself, arr.ind = TRUE), 2]))
Sys.setenv(CUDA_VISIBLE_DEVICES=dev)
train = simulate_SDM(   c(3.0,  3.0, 2.5, -1.5, 0.0))
test1 = simulate_SDM(   c(-1,  2, 2.5, -1.5, 0.0))
test2 = simulate_SDM(   c(3.0,  3.0, 2.5, -1.5, 0.0))
result = matrix(NA, 5, 4)
result[1, ]= c(train_test_lm(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_lm(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]= c(train_test_brt(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[3, ]=  c(train_test_rf(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result[4, ]=  c(train_test_glmnet(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_glmnet(train[,], test1[,], test2[,]) %>% unlist)
# result[5, ]=  c(train_test_cito(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
#                 train_test_cito(train[,], test1[,], test2[,]) %>% unlist)
return(result)
})
apply(abind::abind(result_list, along = 0L), 2:3, mean)
train = simulate_SDM(   c(3.0,  3.0, 2.5, -1., -0.2))
test1 = simulate_SDM(   c(3.0,  0,   2.5,  0  , 0.0))
test2 = simulate_SDM(   c(3.0,  3.0, 2.5, -1., -0.2))
result = matrix(NA, 5, 4)
result[1, ]= c(train_test_lm(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_lm(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]= c(train_test_brt(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[3, ]=  c(train_test_rf(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result[4, ]=  c(train_test_glmnet(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_glmnet(train[,], test1[,], test2[,]) %>% unlist)
result
train = simulate_SDM(   c(3.0,  3.0, 2.5, -1., -1))
test1 = simulate_SDM(   c(3.0,  0,   2.5,  0  , 0.0))
test2 = simulate_SDM(   c(3.0,  3.0, 2.5, -1., -1))
result = matrix(NA, 5, 4)
result[1, ]= c(train_test_lm(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_lm(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]= c(train_test_brt(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[3, ]=  c(train_test_rf(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result[4, ]=  c(train_test_glmnet(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_glmnet(train[,], test1[,], test2[,]) %>% unlist)
result
train = simulate_SDM(   c(0.0,  0.0, 2.5, -1., -1))
test1 = simulate_SDM(   c(0.0,  0,   2.5,  0  , 0.0))
test2 = simulate_SDM(   c(0.0,  0.0, 2.5, -1., -1))
result = matrix(NA, 5, 4)
result[1, ]= c(train_test_lm(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_lm(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]= c(train_test_brt(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[3, ]=  c(train_test_rf(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result[4, ]=  c(train_test_glmnet(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_glmnet(train[,], test1[,], test2[,]) %>% unlist)
result
train = simulate_SDM(   c(0.0,  0.0, 2.5, -1.5., -1))
test1 = simulate_SDM(   c(0.0,  0,   2.5,  0  , 0.0))
test2 = simulate_SDM(   c(0.0,  0.0, 2.5, -1.5., -1))
result = matrix(NA, 5, 4)
result[1, ]= c(train_test_lm(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_lm(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]= c(train_test_brt(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
train = simulate_SDM(   c(0.0,  0.0, 2.5, -1.5, -1))
test1 = simulate_SDM(   c(0.0,  0,   2.5,  0  , 0.0))
test2 = simulate_SDM(   c(0.0,  0.0, 2.5, -1.5, -1))
result = matrix(NA, 5, 4)
result[1, ]= c(train_test_lm(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_lm(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]= c(train_test_brt(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[3, ]=  c(train_test_rf(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result[4, ]=  c(train_test_glmnet(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_glmnet(train[,], test1[,], test2[,]) %>% unlist)
result
result_list =
parallel::parLapply(cl, 1:samples, function(i) {
# who am I
myself = paste(Sys.info()[['nodename']], Sys.getpid(), sep='-')
dist = cbind(nodes,0:3)
dev = as.integer(as.numeric(dist[which(dist[,1] %in% myself, arr.ind = TRUE), 2]))
Sys.setenv(CUDA_VISIBLE_DEVICES=dev)
train = simulate_SDM(   c(3.0,  3.0, 2.5, -1.2, 0.0))
test1 = simulate_SDM(   c(0.0,  0.0, 2.5, -1.2, 0.0))
test2 = simulate_SDM(   c(3.0,  3.0, 2.5, -1.2, 0.0))
result = matrix(NA, 5, 4)
result[1, ]= c(train_test_lm(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_lm(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]= c(train_test_brt(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[3, ]=  c(train_test_rf(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result[4, ]=  c(train_test_glmnet(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_glmnet(train[,], test1[,], test2[,]) %>% unlist)
# result[5, ]=  c(train_test_cito(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
#                 train_test_cito(train[,], test1[,], test2[,]) %>% unlist)
return(result)
})
apply(abind::abind(result_list, along = 0L), 2:3, mean)
simulate_SDM = function(effs = c(1.0, 1.0, -1.5, 1.0, 1.0), n = 5000) {
Stress = rnorm(n, sd = 0.3)
SleepD = effs[2]*Stress + rnorm(n, sd = 0.3)
Smoking = effs[1]*Stress + effs[5]*SleepD + rnorm(n, sd = 0.3)
LungC = effs[3]*Smoking + effs[4]*SleepD + rnorm(n, sd = 0.3)
return(data.frame(LungC = LungC, Smoking = Smoking, SleepD = SleepD, mvtnorm::rmvnorm(n, sigma = diag(0.3, 10))))
}
cl = parallel::makeCluster(50L)
nodes = unlist(parallel::clusterEvalQ(cl, paste(Sys.info()[['nodename']], Sys.getpid(), sep='-')))
parallel::clusterExport(cl, varlist = ls(envir = .GlobalEnv))
parallel::clusterEvalQ(cl, {library(ranger);library(xgboost);library(cito);library(glmnet);library(glmnetUtils);Sys.setenv(OMP_NUM_THREADS=3);library(tidyverse)})
result_list =
parallel::parLapply(cl, 1:samples, function(i) {
# who am I
myself = paste(Sys.info()[['nodename']], Sys.getpid(), sep='-')
dist = cbind(nodes,0:3)
dev = as.integer(as.numeric(dist[which(dist[,1] %in% myself, arr.ind = TRUE), 2]))
Sys.setenv(CUDA_VISIBLE_DEVICES=dev)
data = simulate_SDM(   c(3.0,  3.0, 2.5, -1.2, 0.0), n = 10000)
train = data[1:5000, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2.5, -1.2, 0.0), n = 5000)
test2 = data[-(1:5000), ]
result = matrix(NA, 5, 4)
result[1, ]= c(train_test_lm(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_lm(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]= c(train_test_brt(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[3, ]=  c(train_test_rf(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result[4, ]=  c(train_test_glmnet(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_glmnet(train[,], test1[,], test2[,]) %>% unlist)
# result[5, ]=  c(train_test_cito(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
#                 train_test_cito(train[,], test1[,], test2[,]) %>% unlist)
return(result)
})
apply(abind::abind(result_list, along = 0L), 2:3, mean)
result_list =
parallel::parLapply(cl, 1:samples, function(i) {
# who am I
myself = paste(Sys.info()[['nodename']], Sys.getpid(), sep='-')
dist = cbind(nodes,0:3)
dev = as.integer(as.numeric(dist[which(dist[,1] %in% myself, arr.ind = TRUE), 2]))
Sys.setenv(CUDA_VISIBLE_DEVICES=dev)
data = simulate_SDM(   c(3.0,  3.0, 2.5, -1.2, 0.0), n = 100)
train = data[1:50, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2.5, -1.2, 0.0), n = 50)
test2 = data[-(1:50), ]
result = matrix(NA, 5, 4)
result[1, ]= c(train_test_lm(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_lm(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]= c(train_test_brt(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[3, ]=  c(train_test_rf(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result[4, ]=  c(train_test_glmnet(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_glmnet(train[,], test1[,], test2[,]) %>% unlist)
# result[5, ]=  c(train_test_cito(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
#                 train_test_cito(train[,], test1[,], test2[,]) %>% unlist)
return(result)
})
apply(abind::abind(result_list, along = 0L), 2:3, mean)
result_list =
parallel::parLapply(cl, 1:samples, function(i) {
# who am I
myself = paste(Sys.info()[['nodename']], Sys.getpid(), sep='-')
dist = cbind(nodes,0:3)
dev = as.integer(as.numeric(dist[which(dist[,1] %in% myself, arr.ind = TRUE), 2]))
Sys.setenv(CUDA_VISIBLE_DEVICES=dev)
data = simulate_SDM(   c(3.0,  3.0, 2.5, -1.2, 0.0), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2.5, -1.2, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 5, 4)
result[1, ]= c(train_test_lm(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_lm(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]= c(train_test_brt(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[3, ]=  c(train_test_rf(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result[4, ]=  c(train_test_glmnet(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_glmnet(train[,], test1[,], test2[,]) %>% unlist)
# result[5, ]=  c(train_test_cito(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
#                 train_test_cito(train[,], test1[,], test2[,]) %>% unlist)
return(result)
})
apply(abind::abind(result_list, along = 0L), 2:3, mean)
samples = 200L
result_list = vector("list", samples)
cl = parallel::makeCluster(50L)
nodes = unlist(parallel::clusterEvalQ(cl, paste(Sys.info()[['nodename']], Sys.getpid(), sep='-')))
parallel::clusterExport(cl, varlist = ls(envir = .GlobalEnv))
parallel::clusterEvalQ(cl, {library(ranger);library(xgboost);library(cito);library(glmnet);library(glmnetUtils);Sys.setenv(OMP_NUM_THREADS=3);library(tidyverse)})
result_list =
parallel::parLapply(cl, 1:samples, function(i) {
# who am I
myself = paste(Sys.info()[['nodename']], Sys.getpid(), sep='-')
dist = cbind(nodes,0:3)
dev = as.integer(as.numeric(dist[which(dist[,1] %in% myself, arr.ind = TRUE), 2]))
Sys.setenv(CUDA_VISIBLE_DEVICES=dev)
data = simulate_SDM(   c(3.0,  3.0, 2.5, -1.2, 0.0), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2.5, -1.2, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 5, 4)
result[1, ]= c(train_test_lm(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_lm(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]= c(train_test_brt(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[3, ]=  c(train_test_rf(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result[4, ]=  c(train_test_glmnet(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_glmnet(train[,], test1[,], test2[,]) %>% unlist)
result[5, ]=  c(train_test_cito(train[,-3], test1[,-3], test2[,-3]) %>% unlist,
train_test_cito(train[,], test1[,], test2[,]) %>% unlist)
return(result)
})
apply(abind::abind(result_list, along = 0L), 2:3, mean)
saveRDS(abind::abind(result_list, along = 0L), "results/results_case_study.RDS")
#| warning: false
#| message: false
methods = c("LM", "BRT", "RF","EN", "NN" )
results = readRDS("results/results_case_study.RDS")
results = apply(results, 2:3, mean)
rownames(results) = methods
colnames(results) = c("Conv_out", "Conv_in", "Causal_out", "Causal_in" )
results = data.frame(results, method = methods)
results =
results %>%
pivot_longer(c(Conv_out, Conv_in, Causal_out, Causal_in), names_to = "scenario", values_to = "R2") %>%
mutate(model = ifelse(stringr::str_detect(scenario, "Causal"), "Causal model", "Conventional model"),
prediction = ifelse(stringr::str_detect(scenario, "out"), "out", "in")
) %>%
dplyr::select(-scenario)
#| echo: false
#| message: false
library(ggplot2)
library(ggbreak)
library(tidyverse)
library(igraph)
library(Cairo)
source("utils.R")
#| warning: false
#| message: false
methods = c("LM", "BRT", "RF","EN", "NN" )
results = readRDS("results/results_case_study.RDS")
results = apply(results, 2:3, mean)
rownames(results) = methods
colnames(results) = c("Conv_out", "Conv_in", "Causal_out", "Causal_in" )
results = data.frame(results, method = methods)
results =
results %>%
pivot_longer(c(Conv_out, Conv_in, Causal_out, Causal_in), names_to = "scenario", values_to = "R2") %>%
mutate(model = ifelse(stringr::str_detect(scenario, "Causal"), "Causal model", "Conventional model"),
prediction = ifelse(stringr::str_detect(scenario, "out"), "out", "in")
) %>%
dplyr::select(-scenario)
results$method = as.factor(results$method)
results$method = forcats::lvls_reorder(results$method, c(3,5,1, 4, 2) )
results$model = as.factor(results$model)
results$model = forcats::lvls_reorder(results$model, c(2, 1))
g1 =
ggplot(results %>% filter(prediction == "out"),
aes(y = R2, x = method, fill = model)) +
geom_bar(stat="identity", color="black",
position=position_dodge(), show.legend = FALSE) +
ggplot2::theme_bw() +
xlab("Models") +
ylab("R\U00B2") +
ylim(0.0, 1.0) +
labs(tag = "a") +
scale_fill_manual(values = rev(c("#00203FFF","#ADEFD1FF")))
g2 =
ggplot(results %>% filter(prediction == "in"),
aes(y = R2, x = method, fill = model)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) +
ylab("R\U00B2") +
xlab("Models") +
ggplot2::theme_bw() +
ylim(0.0, 1.0) +
labs(tag = "b") +
scale_fill_manual(values = rev(c("#00203FFF","#ADEFD1FF"))) +
theme(legend.position = c(0.8, 0.8))
gridExtra::grid.arrange(g1, g2, nrow = 1)
results %>% filter(method %in% c("RF", "BRT", "NN"))
res_ML = results %>% filter(method %in% c("RF", "BRT", "NN"))
g1 =
ggplot(res_ML %>% filter(prediction == "out"),
aes(y = R2, x = method, fill = model)) +
geom_bar(stat="identity", color="black",
position=position_dodge(), show.legend = FALSE) +
ggplot2::theme_bw() +
xlab("Models") +
ylab("R\U00B2") +
ylim(0.0, 1.0) +
labs(tag = "a") +
scale_fill_manual(values = rev(c("#00203FFF","#ADEFD1FF")))
g2 =
ggplot(res_ML %>% filter(prediction == "in"),
aes(y = R2, x = method, fill = model)) +
geom_bar(stat="identity", color="black",
position=position_dodge()) +
ylab("R\U00B2") +
xlab("Models") +
ggplot2::theme_bw() +
ylim(0.0, 1.0) +
labs(tag = "b") +
scale_fill_manual(values = rev(c("#00203FFF","#ADEFD1FF"))) +
theme(legend.position = c(0.8, 0.8))
gridExtra::grid.arrange(g1, g2, nrow = 1)
cairo_pdf(filename = "plots/Fig_5.pdf", width = 7, height = 3)
gridExtra::grid.arrange(g1, g2, nrow = 1)
dev.off()
cairo_pdf(filename = "plots/Fig_5.pdf", width = 5, height = 3)
gridExtra::grid.arrange(g1, g2, nrow = 1)
dev.off()
cairo_pdf(filename = "plots/Fig_5.pdf", width = 5, height = 2.3)
gridExtra::grid.arrange(g1, g2, nrow = 1)
dev.off()
parallel::stopCluster(cl)
