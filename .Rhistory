m = get_boosting_model(x = train[,-1], y = train[,1], 100, minsize = 10, bootstrap = 0.9, eta = 0.1)
eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean)
eff
m = get_boosting_model(x = train[,-1], y = train[,1], 100, minsize = 10, bootstrap = 0.9, eta = 0.1)
eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean)
eff
m = get_boosting_model(x = train[,-1], y = train[,1], 100, minsize = 10, bootstrap = 0.9, eta = 0.1)
eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean)
eff
m = get_boosting_model(x = train[,-1], y = train[,1], 100, minsize = 10, bootstrap = NULL, eta = 0.1)
eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean)
eff
predict.naiveBRT = function(model, newdata) {
eta = model$eta
return(rowSums(matrix(c(1, rep(eta, length(model$model)-1)), nrow(newdata), length(model$model), byrow = TRUE) * sapply(model$model, function(k) predict(k, newdata = data.frame(x = newdata)))))
}
sim = function() simulate(r = 0.9, effs = c(1, 0.8, 0, 0, 1, seq(-0.2, 0.2, length.out = 10)),n = 1000)
data = sim()
train = data[1:500,]
m = get_boosting_model(x = train[,-1], y = train[,1], 100, minsize = 10, bootstrap = NULL, eta = 0.1)
eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean)
eff
m = get_boosting_model(x = train[,-1], y = train[,1], 100, minsize = 10, bootstrap = NULL, eta = 0.1)
eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean)
eff
m = xgboost::xgboost(data=xgboost::xgb.DMatrix(as.matrix(train)[,-1],
label = (as.matrix(train)[,1, drop=FALSE])),
nrounds = 500,
lambda = 0,
subsample = 1,
objective="reg:squarederror", nthread = 1, verbose = 0)
(eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean))
eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean)
eff
m = get_boosting_model(x = train[,-1], y = train[,1], 100, minsize = 10, bootstrap = NULL, eta = 0.1)
eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean)
eff
sim = function() simulate(r = 0.9, effs = c(1, 0.5, 0, 0, 1, seq(-0.2, 0.2, length.out = 10)),n = 1000)
data = sim()
train = data[1:500,]
m = get_boosting_model(x = train[,-1], y = train[,1], 100, minsize = 10, bootstrap = NULL, eta = 0.1)
eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean)
eff
m = xgboost::xgboost(data=xgboost::xgb.DMatrix(as.matrix(train)[,-1],
label = (as.matrix(train)[,1, drop=FALSE])),
nrounds = 500,
lambda = 0,
subsample = 1,
objective="reg:squarederror", nthread = 1, verbose = 0)
(eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean))
m = xgboost::xgboost(data=xgboost::xgb.DMatrix(as.matrix(train)[,-1],
label = (as.matrix(train)[,1, drop=FALSE])),
nrounds = 500,
subsample = 1,
objective="reg:squarederror", nthread = 1, verbose = 0)
(eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean))
m = xgboost::xgboost(data=xgboost::xgb.DMatrix(as.matrix(train)[,-1],
label = (as.matrix(train)[,1, drop=FALSE])),
nrounds = 500,
booster = "gblinear",
subsample = 1,
objective="reg:squarederror", nthread = 1, verbose = 0)
(eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean))
sim = function() simulate(-r = 0.9, effs = c(1, 0.5, 0, 0, 1, seq(-0.2, 0.2, length.out = 10)),n = 1000)
data = sim()
train = data[1:500,]
m = get_boosting_model(x = train[,-1], y = train[,1], 100, minsize = 10, bootstrap = NULL, eta = 0.1)
eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean)
eff
m = xgboost::xgboost(data=xgboost::xgb.DMatrix(as.matrix(train)[,-1],
label = (as.matrix(train)[,1, drop=FALSE])),
nrounds = 500,
booster = "gblinear",
subsample = 1,
objective="reg:squarederror", nthread = 1, verbose = 0)
(eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean))
xgboost::xgb.gblinear.history(m)
xgboost::xgb.gblinear.history(model Â´m)
xgboost::xgb.model.dt.tree(model = m)
xgboost::xgb.plot.tree(model = m)
m$evaluation_log
m$params$booster
m$handle
m$handle
xgb.gblinear.history(m)
m = xgboost::xgboost(data=xgboost::xgb.DMatrix(as.matrix(train)[,-1],
label = (as.matrix(train)[,1, drop=FALSE])),
nrounds = 500,
booster = "gblinear",
subsample = 1,
callbacks = list(cb.gblinear.history()),
objective="reg:squarederror", nthread = 1, verbose = 0)
xgb.gblinear.history(m)
dim(xgb.gblinear.history(m))
m = xgboost::xgboost(data=xgboost::xgb.DMatrix(as.matrix(train)[,-1],
label = (as.matrix(train)[,1, drop=FALSE])),
nrounds = 500,
booster = "gblinear",
subsample = 1,
lambda = 1.0,
callbacks = list(cb.gblinear.history()),
objective="reg:squarederror", nthread = 1, verbose = 0)
xgb.gblinear.history(m)
m = xgboost::xgboost(data=xgboost::xgb.DMatrix(as.matrix(train)[,-1],
label = (as.matrix(train)[,1, drop=FALSE])),
nrounds = 500,
booster = "gblinear",
subsample = 1,
lambda = 100.0,
callbacks = list(cb.gblinear.history()),
objective="reg:squarederror", nthread = 1, verbose = 0)
xgb.gblinear.history(m)
ncol(train)
m = xgboost::xgboost(data=xgboost::xgb.DMatrix(as.matrix(train)[,-1],
label = (as.matrix(train)[,1, drop=FALSE])),
nrounds = 500,
booster = "gblinear",
subsample = 1,
lambda = 0.0,
callbacks = list(cb.gblinear.history()),
objective="reg:squarederror", nthread = 1, verbose = 0)
ncol(train)
xgb.gblinear.history(m)
summaray(train)
summary(train)
scale(train)
summary(scale(train))
m = xgboost::xgboost(data=xgboost::xgb.DMatrix(summary(as.matrix(train)[,-1]),
label = (as.matrix(train)[,1, drop=FALSE])),
nrounds = 500,
subsample = 1,
lambda = 0.0,
objective="reg:squarederror", nthread = 1, verbose = 0)
summary(as.matrix(train)[,-1])
m = xgboost::xgboost(data=xgboost::xgb.DMatrix(scale(as.matrix(train)[,-1]),
label = (as.matrix(train)[,1, drop=FALSE])),
nrounds = 500,
subsample = 1,
lambda = 0.0,
objective="reg:squarederror", nthread = 1, verbose = 0)
(eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean))
m = xgboost::xgboost(data=xgboost::xgb.DMatrix(scale(as.matrix(train)[,-1]),
label = (as.matrix(train)[,1, drop=FALSE])),
nrounds = 500,
subsample = 1,
lambda = 0.0,
objective="reg:squarederror", nthread = 1, verbose = 0)
(eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean))
m = xgboost::xgboost(data=xgboost::xgb.DMatrix((as.matrix(train)[,-1]),
label = (as.matrix(train)[,1, drop=FALSE])),
nrounds = 500,
subsample = 1,
lambda = 0.0,
objective="reg:squarederror", nthread = 1, verbose = 0)
(eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean))
m = xgboost::xgboost(data=xgboost::xgb.DMatrix((as.matrix(train)[,-1]),
label = (as.matrix(train)[,1, drop=FALSE])),
nrounds = 500,
subsample = 1,
lambda = 0.0,
objective="reg:squarederror", nthread = 1, verbose = 0)
(eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean))
m = xgboost::xgboost(data=xgboost::xgb.DMatrix(scale(as.matrix(train)[,-1]),
label = (as.matrix(train)[,1, drop=FALSE])),
nrounds = 500,
subsample = 1,
lambda = 0.0,
objective="reg:squarederror", nthread = 1, verbose = 0)
(eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean))
sim = function() simulate(r = 0.9, effs = c(1, 0.5, 0, 0, 1, seq(-0.2, 0.2, length.out = 10)),n = 1000)
data = sim()
train = data[1:500,]
m = get_boosting_model(x = train[,-1], y = train[,1], 100, minsize = 10, bootstrap = NULL, eta = 0.1)
eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean)
eff
m = xgboost::xgboost(data=xgboost::xgb.DMatrix(scale(as.matrix(train)[,-1]),
label = (as.matrix(train)[,1, drop=FALSE])),
nrounds = 500,
subsample = 1,
lambda = 0.0,
objective="reg:squarederror", nthread = 1, verbose = 0)
(eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean))
cov(train)
sim = function() simulate(r = 0.9, effs = c(1, 0.5, 0, 0, 1, seq(-0.2, 0.2, length.out = 10)),n = 1000)
data = sim()
train = data[1:500,]
train[, -1] = scale(train[,-1])
m = get_boosting_model(x = train[,-1], y = train[,1], 100, minsize = 10, bootstrap = NULL, eta = 0.1)
eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean)
eff
m = xgboost::xgboost(data=xgboost::xgb.DMatrix((as.matrix(train)[,-1]),
label = (as.matrix(train)[,1, drop=FALSE])),
nrounds = 500,
subsample = 1,
lambda = 0.0,
objective="reg:squarederror", nthread = 1, verbose = 0)
(eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean))
sim = function() simulate(r = 0.9, effs = c(1, 0.5, 0, 0, 1, seq(-0.2, 0.2, length.out = 10)),n = 1000)
data = sim()
train = data[1:500,]
train[, -1] = scale(train[,-1])
m = get_boosting_model(x = train[,-1], y = train[,1], 100, minsize = 10, bootstrap = NULL, eta = 0.1)
eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean)
eff
m = xgboost::xgboost(data=xgboost::xgb.DMatrix((as.matrix(train)[,-1]),
label = (as.matrix(train)[,1, drop=FALSE])),
nrounds = 500,
subsample = 1,
lambda = 0.0,
objective="reg:squarederror", nthread = 1, verbose = 0)
(eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean))
sim = function() simulate(r = 0.9, effs = c(1, 0.5, 0, 0, 1, seq(-0.2, 0.2, length.out = 10)),n = 1000)
data = sim()
train = data[1:500,]
train[, -1] = scale(train[,-1])
m = xgboost::xgboost(data=xgboost::xgb.DMatrix((as.matrix(train)[,-1]),
label = (as.matrix(train)[,1, drop=FALSE])),
nrounds = 500,
subsample = 1,
lambda = 0.0,
objective="reg:squarederror", nthread = 1, verbose = 0)
(eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean))
sim = function() simulate(r = 0.9, effs = c(1, 0.5, 0, 0, 1, seq(-0.2, 0.2, length.out = 10)),n = 5000)
data = sim()
train = data
train[, -1] = scale(train[,-1])
m = get_boosting_model(x = train[,-1], y = train[,1], 100, minsize = 10, bootstrap = NULL, eta = 0.1)
eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean)
eff
m = xgboost::xgboost(data=xgboost::xgb.DMatrix((as.matrix(train)[,-1]),
label = (as.matrix(train)[,1, drop=FALSE])),
nrounds = 500,
subsample = 1,
lambda = 0.0,
objective="reg:squarederror", nthread = 1, verbose = 0)
(eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean))
m = get_boosting_model(x = train[,-1], y = train[,1], 10, minsize = 10, bootstrap = NULL, eta = 0.1)
eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean)
eff
m = xgboost::xgboost(data=xgboost::xgb.DMatrix((as.matrix(train)[,-1]),
label = (as.matrix(train)[,1, drop=FALSE])),
nrounds = 500,
subsample = 1,
lambda = 0.0,
objective="reg:squarederror", nthread = 1, verbose = 0)
(eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean))
m = get_boosting_model(x = train[,-1], y = train[,1], 10, minsize = 10, bootstrap = NULL, eta = 1.0)
m = xgboost::xgboost(data=xgboost::xgb.DMatrix((as.matrix(train)[,-1]),
label = (as.matrix(train)[,1, drop=FALSE])),
nrounds = 500,
subsample = 1,
lambda = 0.0,
objective="reg:squarederror", nthread = 1, verbose = 0)
(eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean))
m = get_boosting_model(x = train[,-1], y = train[,1], 10, minsize = 10, bootstrap = NULL, eta = 1.0)
eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean)
eff
m = get_boosting_model(x = train[,-1], y = train[,1], 100, minsize = 10, bootstrap = NULL, eta = 1.0)
eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean)
eff
m = get_boosting_model(x = train[,-1], y = train[,1], 1, minsize = 10, bootstrap = NULL, eta = 1.0)
eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean)
eff
m
m$model[[1]]
plot(m$model[[1]])
tet(m$model[[1]])
text(m$model[[1]])
m = get_boosting_model(x = train[,-1], y = train[,1], 50, minsize = 10, bootstrap = NULL, eta = 1.0)
eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean)
eff
m = get_boosting_model(x = train[,-1], y = train[,1], 50, minsize = 10, bootstrap = 0.9, eta = 1.0)
eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean)
eff
#### Helper function for single tree fit.
get_model = function(x, y, ...){
control = tree.control(nobs = length(x), ...)
model = tree(y~., data.frame(x = x, y = y), control = control)
pred = predict(model, newdata = data.frame(x = x, y = y))
return(list(model = model, pred = pred))
}
#### Boost function.
get_boosting_model = function(x, y, n_trees, bootstrap = NULL, eta = 1., ...){
pred = NULL
m_list = list()
for(i in 1:n_trees){
if(i == 1){
m = get_model(x, y, ...)
pred = m$pred
}else{
if(!is.null(bootstrap)) indices = sample.int(length(y), bootstrap*length(y), replace = TRUE)
else indices = 1:length(y)
y_res = y[indices] - pred[indices]
m = get_model(x[indices,], y_res, ...)
pred = pred + eta*predict(m$model, newdata = data.frame(x = x))
}
m_list[[i]] = m$model
}
model_list = list()
model_list$model = m_list
model_list$eta = eta
class(model_list) = "naiveBRT"
return(model_list)
}
predict.naiveBRT = function(model, newdata) {
eta = model$eta
return(rowSums(matrix(c(1, rep(eta, length(model$model)-1)), nrow(newdata), length(model$model), byrow = TRUE) * sapply(model$model, function(k) predict(k, newdata = data.frame(x = newdata)))))
}
task =   # r , X1, X2
matrix(c(0.0, 1.0, 1.0,
0.0, 1.0, 0.5,
0.9, 1.0, 1.0,
0.9, 1.0, 0.5,
0.9, 1.0, 0.0,
0.9, 1.0, -1.0,
0.9, 1.0, -0.5,
-0.9, 1.0, 1.0,
-0.9, 1.0, 0.5,
-0.9, 1.0, 0.0,
-0.9, 1.0, -1.0,
-0.9, 1.0, -0.5     # 11
), ncol = 3, byrow = TRUE)
i = 1
pars = task[i,]
sim = function() simulate(r = pars[1], effs = c(1, pars[3], 0, 0, 1, seq(-0.2, 0.2, length.out = 10)),n = 5000)
data = sim()
train = data
train[,-1] = scale(train[,-1])
m = xgboost::xgboost(data=xgboost::xgb.DMatrix(as.matrix(train)[,-1],
label = (as.matrix(train)[,1, drop=FALSE])),
nrounds = 500,
lambda = 0,
subsample = 1,
objective="reg:squarederror", nthread = 1, verbose = 0)
m = xgboost::xgboost(data=xgboost::xgb.DMatrix(as.matrix(train)[,-1],
label = (as.matrix(train)[,1, drop=FALSE])),
nrounds = 100,
# lambda = 0,
# subsample = 1,
objective="reg:squarederror", nthread = 1, verbose = 0)
(eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 2)$mean))
eff
(eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean))
eff
m = get_boosting_model(x = train[,-1], y = train[,1], 150, minsize = 10, bootstrap = NULL, eta = 1.0)
eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean)
eff
m = get_boosting_model(x = train[,-1], y = train[,1], 350, minsize = 10, bootstrap = NULL, eta = 1.0)
eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean)
eff
m = get_boosting_model(x = train[,-1], y = train[,1], 150, minsize = 4, bootstrap = NULL, eta = 1.0)
eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean)
eff
pars
m = get_boosting_model(x = train[,-1], y = train[,1], 150, minsize = 4, bootstrap = 0.8, eta = 1.0)
eff3 = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean)
eff3
m = get_boosting_model(x = train[,-1], y = train[,1], 150, minsize = 4, bootstrap = 0.5, eta = 0.1)
eff5 = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean)
eff5
#### Boost function.
get_boosting_model = function(x, y, n_trees, bootstrap = NULL, colsample = NULL, eta = 1., ...){
pred = NULL
m_list = list()
for(i in 1:n_trees){
if(i == 1){
m = get_model(x, y, ...)
pred = m$pred
}else{
if(!is.null(bootstrap)) indices = sample.int(length(y), bootstrap*length(y), replace = TRUE)
else indices = 1:length(y)
if(!is.null(colsample)) indices_cols = sample.int(ncol(x), bootstrap*ncol(x), replace = TRUE)
else indices_cols = 1:ncol(x)
y_res = y[indices] - pred[indices]
m = get_model(x[indices,indices_cols,drop=FALSE], y_res, ...)
pred = pred + eta*predict(m$model, newdata = data.frame(x = x))
}
m_list[[i]] = m$model
}
model_list = list()
model_list$model = m_list
model_list$eta = eta
class(model_list) = "naiveBRT"
return(model_list)
}
predict.naiveBRT = function(model, newdata) {
eta = model$eta
return(rowSums(matrix(c(1, rep(eta, length(model$model)-1)), nrow(newdata), length(model$model), byrow = TRUE) * sapply(model$model, function(k) predict(k, newdata = data.frame(x = newdata)))))
}
sim = function() simulate(r = 0.9, effs = c(1, 0.5, 0, 0, 1, seq(-0.2, 0.2, length.out = 10)),n = 500)
data = sim()
train = data
train[, -1] = scale(train[,-1])
m = get_boosting_model(x = train[,-1], y = train[,1], 50, minsize = 10, bootstrap = 0.9, eta = 1.0)
eff = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean)
eff
m = get_boosting_model(x = train[,-1], y = train[,1], 50, minsize = 10, bootstrap = 0.9, eta = 1.0, colsample = 0.5)
m
predict(m$model, newdata = data.frame(x = x)
)
data.frame(x = x)
data.frame(x = train)
data.frame(x = train[,-1])
data.frame(x = train[,5:10])
m = get_boosting_model(x = train[,-1], y = train[,1], 50, minsize = 10, bootstrap = 0.9, eta = 1.0, colsample = 0.5)
#### Boost function.
get_boosting_model = function(x, y, n_trees, bootstrap = NULL, colsample = NULL, eta = 1., ...){
pred = NULL
m_list = list()
data = data.frame(y = y, x = x)
for(i in 1:n_trees){
if(i == 1){
m = get_model(data = data, ...)
pred = m$pred
}else{
if(!is.null(bootstrap)) indices = sample.int(length(y), bootstrap*length(y), replace = TRUE)
else indices = 1:length(y)
if(!is.null(colsample)) indices_cols = sample.int(ncol(x), bootstrap*ncol(x), replace = TRUE)
else indices_cols = 1:ncol(x)
y_res = y[indices] - pred[indices]
m = get_model(data = data[indices,c(1, indices_cols+1),drop=FALSE], ...)
pred = pred + eta*predict(m$model, newdata = data)
}
m_list[[i]] = m$model
}
model_list = list()
model_list$model = m_list
model_list$eta = eta
class(model_list) = "naiveBRT"
return(model_list)
}
m = get_boosting_model(x = train[,-1], y = train[,1], 50, minsize = 10, bootstrap = 0.9, eta = 1.0, colsample = 0.5)
m = ranger(Y ~., data = data.frame(train),
num.threads = 3L, num.trees = 500)
eff6 = diag(marginalEffects(m, data = data.frame(train), interactions = FALSE, max_indices = 5)$mean)
eff6
rbind(eff1, eff2, eff3, eff4, eff5, eff6)
m = xgboost::xgboost(data=xgboost::xgb.DMatrix(as.matrix(train)[,-1],
label = (as.matrix(train)[,1, drop=FALSE])),
nrounds = 100,
# lambda = 0,
# subsample = 1,
objective="reg:squarederror", nthread = 1, verbose = 0)
(eff1 = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean))
rbind(eff1, eff2, eff3, eff4, eff5, eff6)
m = xgboost::xgboost(data=xgboost::xgb.DMatrix(as.matrix(train)[,-1],
label = (as.matrix(train)[,1, drop=FALSE])),
nrounds = 100,
# lambda = 0,
# subsample = 1,
objective="reg:squarederror", nthread = 1, verbose = 0)
(eff1 = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean))
m = get_boosting_model(x = train[,-1], y = train[,1], 150, minsize = 10, bootstrap = NULL, eta = 1.0)
#### Helper function for single tree fit.
get_model = function(x, y, ...){
control = tree.control(nobs = length(x), ...)
model = tree(y~., data.frame(x = x, y = y), control = control)
pred = predict(model, newdata = data.frame(x = x, y = y))
return(list(model = model, pred = pred))
}
#### Boost function.
get_boosting_model = function(x, y, n_trees, bootstrap = NULL, colsample = NULL, eta = 1., ...){
pred = NULL
m_list = list()
for(i in 1:n_trees){
if(i == 1){
m = get_model(x, y, ...)
pred = m$pred
}else{
if(!is.null(bootstrap)) indices = sample.int(length(y), bootstrap*length(y), replace = TRUE)
else indices = 1:length(y)
if(!is.null(colsample)) indices_cols = sample.int(ncol(x), bootstrap*ncol(x), replace = TRUE)
else indices_cols = 1:ncol(x)
y_res = y[indices] - pred[indices]
m = get_model(x[indices,indices_cols,drop=FALSE], y_res, ...)
pred = pred + eta*predict(m$model, newdata = data.frame(x = x))
}
m_list[[i]] = m$model
}
model_list = list()
model_list$model = m_list
model_list$eta = eta
class(model_list) = "naiveBRT"
return(model_list)
}
predict.naiveBRT = function(model, newdata) {
eta = model$eta
return(rowSums(matrix(c(1, rep(eta, length(model$model)-1)), nrow(newdata), length(model$model), byrow = TRUE) * sapply(model$model, function(k) predict(k, newdata = data.frame(x = newdata)))))
}
Sys.setenv(OMP_NUM_THREADS=5)
m = xgboost::xgboost(data=xgboost::xgb.DMatrix(as.matrix(train)[,-1],
label = (as.matrix(train)[,1, drop=FALSE])),
nrounds = 100,
# lambda = 0,
# subsample = 1,
objective="reg:squarederror", nthread = 1, verbose = 0)
(eff1 = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean))
m = get_boosting_model(x = train[,-1], y = train[,1], 150, minsize = 10, bootstrap = NULL, eta = 1.0)
eff2 = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean)
m = get_boosting_model(x = train[,-1], y = train[,1], 150, minsize = 10, bootstrap = 0.8, eta = 1.0)
eff3 = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean)
m = get_boosting_model(x = train[,-1], y = train[,1], 150, minsize = 10, bootstrap = 0.8, eta = 0.1)
eff4 = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean)
m = get_boosting_model(x = train[,-1], y = train[,1], 150, minsize = 10, bootstrap = 0.5, eta = 0.1)
eff5 = diag(marginalEffects(m, data = data.frame(train)[,-1], interactions = FALSE, max_indices = 5)$mean)
m = ranger(Y ~., data = data.frame(train),
num.threads = 3L, num.trees = 500)
eff6 = diag(marginalEffects(m, data = data.frame(train), interactions = FALSE, max_indices = 5)$mean)
rbind(eff1, eff2, eff3, eff4, eff5, eff6)
i
pars
library(tree)
