train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
data = simulate_SDM(   c(3.0,  -1.0, 1, -1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 1, -1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
data = simulate_SDM(   c(3.0,  -1.0, 1, -1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 1, -1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
data = simulate_SDM(   c(3.0,  -1.0, 1, -1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 1, -1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
data = simulate_SDM(   c(3.0,  -1.0, 1, -1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 1, -1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
data = simulate_SDM(   c(3.0,  -1.0, 1, -1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 1, -1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
data = simulate_SDM(   c(3.0,  -1.0, 1, -1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 1, -1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
result_list =
parallel::parLapply(cl, 1:samples, function(i) {
# who am I
myself = paste(Sys.info()[['nodename']], Sys.getpid(), sep='-')
dist = cbind(nodes,0:3)
dev = as.integer(as.numeric(dist[which(dist[,1] %in% myself, arr.ind = TRUE), 2]))
Sys.setenv(CUDA_VISIBLE_DEVICES=dev)
# data = simulate_SDM(   c(3.0,  3.0, 2.5, -1.2, 0.0, 1.0, 1.0), n = 1000)
# train = data[1:500, ]
# test1 = simulate_SDM(   c(0.0,  0.0, 2.5, -1.2, 0.0, 0.0, 0.0), n = 500)
# test2 = data[-(1:500), ]
data = simulate_SDM(   c(2.0,  -2.0, 2, -1.5, 0.0, -1, -1.5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, -1.5, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
data = simulate_SDM(   c(3.0,  -1.0, 1, -1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 1, -1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
result[3, ]=  c(train_test_cito(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_cito(train[,], test1[,], test2[,]) %>% unlist)
colnames(result) = c("R2out","R2in", "R2out", "R2in" )
return(result)
})
abind::abind(result_list, along = 0L)
apply(abind::abind(result_list, along = 0L), 2:3, mean)
summary(lm(LungC~., data = train[,1:6]))
summary(lm(LungC~., data = train[,1:4]))
summary(lm(LungC~., data = train[,1:3]))
data = simulate_SDM(   c(3.0,  -1.0, 2, -1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, -1, 0.0, 0.0, 0.0), n = 500)
summary(lm(LungC~., data = train[,1:3]))
summary(lm(LungC~., data = train[,1:4]))
data = simulate_SDM(   c(3.0,  -1.0, 2, -1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, -1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
data = simulate_SDM(   c(3.0,  -1.0, 2, -1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, -1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
data = simulate_SDM(   c(3.0,  -1.0, 2, -1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, -1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
data = simulate_SDM(   c(3.0,  -1.0, 2, -1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, -1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
data = simulate_SDM(   c(3.0,  -1.0, 2, -1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, -1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
data = simulate_SDM(   c(3.0,  -1.0, 2, -1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, -1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
cor(train)
data = simulate_SDM(   c(3.0,  -2.0, 2, -1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, -1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
data = simulate_SDM(   c(3.0,  -2.0, 2, -1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, -1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
data = simulate_SDM(   c(3.0,  -2.0, 2, -1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, -1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
data = simulate_SDM(   c(3.0,  -2.0, 2, -1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, -1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
data = simulate_SDM(   c(3.0,  -2.0, 2, -1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, -1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
data = simulate_SDM(   c(3.0,  -2.0, 2, -1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, -1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
data = simulate_SDM(   c(3.0,  -2.0, 2, -1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, -1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
data = simulate_SDM(   c(3.0,  -2.0, 2, -1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, -1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
data = simulate_SDM(   c(3.0,  -2.0, 2, -1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, -1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
data = simulate_SDM(   c(-3.0,  -2.0, 2, 1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, 1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
data = simulate_SDM(   c(-3.0,  -2.0, 2, 1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, 1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
data = simulate_SDM(   c(-3.0,  -2.0, 2, 1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, 1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
data = simulate_SDM(   c(-3.0,  -2.0, 2, 1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, 1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
data = simulate_SDM(   c(-3.0,  -2.0, 2, -1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, -1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
data = simulate_SDM(   c(-3.0,  -2.0, 2, -1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, -1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
data = simulate_SDM(   c(-3.0,  -2.0, 2, -1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, -1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
data = simulate_SDM(   c(-3.0,  -2.0, 2, -1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, -1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
data = simulate_SDM(   c(-3.0,  -2.0, 2, -1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, -1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
data = simulate_SDM(   c(-3.0,  -2.0, 2, -1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, -1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
data = simulate_SDM(   c(-3.0,  -2.0, 2, -1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, -1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
data = simulate_SDM(   c(-3.0,  -2.0, 2, -1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, -1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
data = simulate_SDM(   c(-3.0,  -2.0, 2, -1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, -1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
result_list =
parallel::parLapply(cl, 1:samples, function(i) {
# who am I
myself = paste(Sys.info()[['nodename']], Sys.getpid(), sep='-')
dist = cbind(nodes,0:3)
dev = as.integer(as.numeric(dist[which(dist[,1] %in% myself, arr.ind = TRUE), 2]))
Sys.setenv(CUDA_VISIBLE_DEVICES=dev)
# data = simulate_SDM(   c(3.0,  3.0, 2.5, -1.2, 0.0, 1.0, 1.0), n = 1000)
# train = data[1:500, ]
# test1 = simulate_SDM(   c(0.0,  0.0, 2.5, -1.2, 0.0, 0.0, 0.0), n = 500)
# test2 = data[-(1:500), ]
data = simulate_SDM(   c(2.0,  -2.0, 2, -1.5, 0.0, -1, -1.5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, -1.5, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
data = simulate_SDM(   c(-3.0,  -2.0, 2, -1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, -1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
result[3, ]=  c(train_test_cito(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_cito(train[,], test1[,], test2[,]) %>% unlist)
colnames(result) = c("R2out","R2in", "R2out", "R2in" )
return(result)
})
abind::abind(result_list, along = 0L)
apply(abind::abind(result_list, along = 0L), 2:3, mean)
result_list =
parallel::parLapply(cl, 1:samples, function(i) {
# who am I
myself = paste(Sys.info()[['nodename']], Sys.getpid(), sep='-')
dist = cbind(nodes,0:3)
dev = as.integer(as.numeric(dist[which(dist[,1] %in% myself, arr.ind = TRUE), 2]))
Sys.setenv(CUDA_VISIBLE_DEVICES=dev)
# data = simulate_SDM(   c(3.0,  3.0, 2.5, -1.2, 0.0, 1.0, 1.0), n = 1000)
# train = data[1:500, ]
# test1 = simulate_SDM(   c(0.0,  0.0, 2.5, -1.2, 0.0, 0.0, 0.0), n = 500)
# test2 = data[-(1:500), ]
data = simulate_SDM(   c(2.0,  -2.0, 2, -1.5, 0.0, -1, -1.5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, -1.5, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
data = simulate_SDM(   c(-3.0,  -2.0, 2, -1, 0.0, -1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, -1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
data = simulate_SDM(   c(3.0,  2.0, 2, 1, 0.0, 1.5, .5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, 1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
result[3, ]=  c(train_test_cito(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_cito(train[,], test1[,], test2[,]) %>% unlist)
colnames(result) = c("R2out","R2in", "R2out", "R2in" )
return(result)
})
abind::abind(result_list, along = 0L)
apply(abind::abind(result_list, along = 0L), 2:3, mean)
result_list =
parallel::parLapply(cl, 1:samples, function(i) {
# who am I
myself = paste(Sys.info()[['nodename']], Sys.getpid(), sep='-')
dist = cbind(nodes,0:3)
dev = as.integer(as.numeric(dist[which(dist[,1] %in% myself, arr.ind = TRUE), 2]))
Sys.setenv(CUDA_VISIBLE_DEVICES=dev)
# data = simulate_SDM(   c(3.0,  3.0, 2.5, -1.2, 0.0, 1.0, 1.0), n = 1000)
# train = data[1:500, ]
# test1 = simulate_SDM(   c(0.0,  0.0, 2.5, -1.2, 0.0, 0.0, 0.0), n = 500)
# test2 = data[-(1:500), ]
data = simulate_SDM(   c(2.0,  -2.0, 2, -1.5, 0.0, -1, -1.5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, -1.5, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
data = simulate_SDM(   c(-3.0,  -2.0, 2, -1, 0.0, -1.5, -.5), n = 1000)
train = data[1:500, ]
test1 = simulate_SDM(   c(0.0,  0.0, 2, -1, 0.0, 0.0, 0.0), n = 500)
test2 = data[-(1:500), ]
result = matrix(NA, 3, 4)
result[1, ]= c(train_test_brt(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_brt(train[,], test1[,], test2[,]) %>% unlist)
result[2, ]=  c(train_test_rf(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_rf(train[,], test1[,], test2[,]) %>% unlist)
result
result[3, ]=  c(train_test_cito(train[,-4], test1[,-4], test2[,-4]) %>% unlist,
train_test_cito(train[,], test1[,], test2[,]) %>% unlist)
colnames(result) = c("R2out","R2in", "R2out", "R2in" )
return(result)
})
abind::abind(result_list, along = 0L)
apply(abind::abind(result_list, along = 0L), 2:3, mean)
#| label: fig-Fig_5
#| fig-format: svg
#| fig-width: 5
#| fig-height: 2.3
#| echo: false
#| warning: false
#| message: false
#| fig-cap: "Difference between causal and conventional ML models for in-distribution and out-of-distribution predictions. In a simulated setting, the task is to predict Crop yield based on Plant growth (data-generating model is shown in the figure). Climate is an unobservable confounder and has effects on Plant growth and Pest (growth). In the first scenario, i.e. in-distribution predictions, Climate did not change, i.e. patients were exposed to the same climatic conditions; here the difference in predictive performance for the model with and without Pest growth is marginal (predictive performance was measured by R^2^). In the second theoretical setting, the climatic conditions changed (the effects of Climate on Plant growth and Pest are now zero). Using the previously trained models, the model without Pest deficit performed significantly worse than the model with Pest (plot with out-of-distribution predictions)."
methods = c( "BRT", "RF", "NN" )
results = readRDS("results/results_case_study.RDS")
results = apply(results, 2:3, mean)
results
rownames(results) = methods
colnames(results) = c("Conv_out", "Conv_in", "Causal_out", "Causal_in" )
results = readRDS("results/results_case_study.RDS")
results = apply(results, 2:3, mean)
#| label: fig-Fig_5
#| fig-format: svg
#| fig-width: 5
#| fig-height: 2.3
#| echo: false
#| warning: false
#| message: false
#| fig-cap: "Difference between causal and conventional ML models for in-distribution and out-of-distribution predictions. In a simulated setting, the task is to predict Crop yield based on Plant growth (data-generating model is shown in the figure). Climate is an unobservable confounder and has effects on Plant growth and Pest (growth). In the first scenario, i.e. in-distribution predictions, Climate did not change, i.e. patients were exposed to the same climatic conditions; here the difference in predictive performance for the model with and without Pest growth is marginal (predictive performance was measured by R^2^). In the second theoretical setting, the climatic conditions changed (the effects of Climate on Plant growth and Pest are now zero). Using the previously trained models, the model without Pest deficit performed significantly worse than the model with Pest (plot with out-of-distribution predictions)."
methods = c( "BRT", "RF", "NN" )
results = readRDS("results/results_case_study.RDS")
results = apply(results, 2:3, mean)
rownames(results) = methods
results
