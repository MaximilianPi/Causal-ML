#batchsize = 2L,
batchsize = nrow(train),
optimizer = "sgd",
device = "cuda",
lr_scheduler = config_lr_scheduler("reduce_on_plateau", factor = 0.80, patience = 7), early_stopping = 20)
m$use_model_epoch = length(m$weights)
Metrics::auc(train$Y,predict(m)[,1])
m = cito::dnn(Y~., data = as.data.frame(train),
hidden = rep(100, 100),
bias = FALSE,
verbose = TRUE,
plot=FALSE, lambda = 0.00, alpha = 1.,
epochs = 500,
lr = 0.01,
loss = "binomial",
activation = "selu",
#batchsize = 2L,
batchsize = nrow(train),
optimizer = "sgd",
device = "cuda",
lr_scheduler = config_lr_scheduler("reduce_on_plateau", factor = 0.80, patience = 7), early_stopping = 20)
m = cito::dnn(Y~., data = as.data.frame(train),
hidden = rep(100, 100),
bias = FALSE,
verbose = TRUE,
plot=FALSE, lambda = 0.00, alpha = 1.,
epochs = 500,
lr = 0.001,
loss = "binomial",
activation = "selu",
#batchsize = 2L,
batchsize = nrow(train),
optimizer = "sgd",
device = "cuda",
lr_scheduler = config_lr_scheduler("reduce_on_plateau", factor = 0.80, patience = 7), early_stopping = 20)
m = cito::dnn(factor(Y)~., data = as.data.frame(train),
hidden = rep(100, 100),
bias = FALSE,
verbose = TRUE,
plot=FALSE, lambda = 0.00, alpha = 1.,
epochs = 500,
lr = 0.001,
loss = "binomial",
activation = "selu",
#batchsize = 2L,
batchsize = nrow(train),
optimizer = "sgd",
device = "cuda",
lr_scheduler = config_lr_scheduler("reduce_on_plateau", factor = 0.80, patience = 7), early_stopping = 20)
m$use_model_epoch = length(m$weights)
Metrics::auc(train$Y,predict(m)[,1])
m = cito::dnn(Y~., data = as.data.frame(train),
hidden = rep(100, 100),
bias = FALSE,
verbose = TRUE,
plot=FALSE, lambda = 0.00, alpha = 1.,
epochs = 500,
lr = 0.001,
loss = "cross-entropy",
activation = "selu",
#batchsize = 2L,
batchsize = nrow(train),
optimizer = "sgd",
device = "cuda",
lr_scheduler = config_lr_scheduler("reduce_on_plateau", factor = 0.80, patience = 7), early_stopping = 20)
m = cito::dnn(Y+1~., data = as.data.frame(train),
hidden = rep(100, 100),
bias = FALSE,
verbose = TRUE,
plot=FALSE, lambda = 0.00, alpha = 1.,
epochs = 500,
lr = 0.001,
loss = "cross-entropy",
activation = "selu",
#batchsize = 2L,
batchsize = nrow(train),
optimizer = "sgd",
device = "cuda",
lr_scheduler = config_lr_scheduler("reduce_on_plateau", factor = 0.80, patience = 7), early_stopping = 20)
m = cito::dnn(Y+1L~., data = as.data.frame(train),
hidden = rep(100, 100),
bias = FALSE,
verbose = TRUE,
plot=FALSE, lambda = 0.00, alpha = 1.,
epochs = 500,
lr = 0.001,
loss = "cross-entropy",
activation = "selu",
#batchsize = 2L,
batchsize = nrow(train),
optimizer = "sgd",
device = "cuda",
lr_scheduler = config_lr_scheduler("reduce_on_plateau", factor = 0.80, patience = 7), early_stopping = 20)
m = cito::dnn(Y~., data = as.data.frame(train),
hidden = rep(100, 100),
bias = FALSE,
verbose = TRUE,
plot=FALSE, lambda = 0.00, alpha = 1.,
epochs = 500,
lr = 0.001,
loss = "softmax",
activation = "selu",
#batchsize = 2L,
batchsize = nrow(train),
optimizer = "sgd",
device = "cuda",
lr_scheduler = config_lr_scheduler("reduce_on_plateau", factor = 0.80, patience = 7), early_stopping = 20)
train = data.frame(Y = as.integer(Y+1), X)
m = cito::dnn(Y~., data = as.data.frame(train),
hidden = rep(100, 100),
bias = FALSE,
verbose = TRUE,
plot=FALSE, lambda = 0.00, alpha = 1.,
epochs = 500,
lr = 0.001,
loss = "softmax",
activation = "selu",
#batchsize = 2L,
batchsize = nrow(train),
optimizer = "sgd",
device = "cuda",
lr_scheduler = config_lr_scheduler("reduce_on_plateau", factor = 0.80, patience = 7), early_stopping = 20)
m = cito::dnn(Y~., data = as.data.frame(train),
hidden = rep(100, 100),
bias = FALSE,
verbose = TRUE,
plot=FALSE, lambda = 0.00, alpha = 1.,
epochs = 500,
lr = 0.001,
loss = "cross-entropy",
activation = "selu",
#batchsize = 2L,
batchsize = nrow(train),
optimizer = "sgd",
device = "cuda",
lr_scheduler = config_lr_scheduler("reduce_on_plateau", factor = 0.80, patience = 7), early_stopping = 20)
m = cito::dnn(Y~., data = as.data.frame(train),
hidden = rep(100, 100),
bias = FALSE,
verbose = TRUE,
plot=FALSE, lambda = 0.00, alpha = 1.,
epochs = 500,
lr = 0.001,
loss = "binomial",
activation = "selu",
#batchsize = 2L,
batchsize = nrow(train),
optimizer = "sgd",
device = "cuda",
lr_scheduler = config_lr_scheduler("reduce_on_plateau", factor = 0.80, patience = 7), early_stopping = 20)
train = data.frame(Y = as.integer(Y), X)
m = cito::dnn(Y~., data = as.data.frame(train),
hidden = rep(100, 100),
bias = FALSE,
verbose = TRUE,
plot=FALSE, lambda = 0.00, alpha = 1.,
epochs = 500,
lr = 0.001,
loss = "binomial",
activation = "selu",
#batchsize = 2L,
batchsize = nrow(train),
optimizer = "sgd",
device = "cuda",
lr_scheduler = config_lr_scheduler("reduce_on_plateau", factor = 0.80, patience = 7), early_stopping = 20)
X = mvtnorm::rmvnorm(1000, sigma = diag(1.0, 10))
Y = rbinom(1000, 1, 0.5)
train = data.frame(Y = as.integer(Y), X)
m = cito::dnn(Y~., data = as.data.frame(train),
hidden = rep(100, 100),
bias = FALSE,
verbose = TRUE,
plot=FALSE, lambda = 0.00, alpha = 1.,
epochs = 500,
lr = 0.001,
loss = "binomial",
activation = "selu",
#batchsize = 2L,
batchsize = nrow(train),
optimizer = "sgd",
device = "cuda",
lr_scheduler = config_lr_scheduler("reduce_on_plateau", factor = 0.80, patience = 7), early_stopping = 20)
m = cito::dnn(factor(Y)~., data = as.data.frame(train),
hidden = rep(100, 100),
bias = FALSE,
verbose = TRUE,
plot=FALSE, lambda = 0.00, alpha = 1.,
epochs = 500,
lr = 0.001,
loss = "binomial",
activation = "selu",
#batchsize = 2L,
batchsize = nrow(train),
optimizer = "sgd",
device = "cuda",
lr_scheduler = config_lr_scheduler("reduce_on_plateau", factor = 0.80, patience = 7), early_stopping = 20)
X = mvtnorm::rmvnorm(200, sigma = diag(1.0, 10))
Y = rnorm(200)
train = data.frame(Y = Y, X)
m = cito::dnn(Y~., data = as.data.frame(train),
hidden = rep(5L, 1L),
bias = FALSE,
verbose = TRUE,
plot=FALSE, lambda = 0.00, alpha = 1.,
epochs = 500,
lr = 0.001,
loss = "binomial",
activation = "selu",
#batchsize = 2L,
batchsize = nrow(train),
optimizer = "sgd",
device = "cuda",
lr_scheduler = config_lr_scheduler("reduce_on_plateau", factor = 0.80, patience = 7), early_stopping = 20)
library(ranger)
library(xgboost)
library(torch)
library(iml)
library(cito)
library(glmnet)
library(glmnetUtils)
set.seed(42)
Sys.setenv(OMP_NUM_THREADS=3)
source("code/AME.R")
source("code/Scenarios.R")
X = mvtnorm::rmvnorm(200, sigma = diag(1.0, 10))
Y = rnorm(200)
train = data.frame(Y = Y, X)
m = cito::dnn(Y~., data = as.data.frame(train),
hidden = rep(5L, 1L),
bias = FALSE,
verbose = TRUE,
plot=FALSE, lambda = 0.00, alpha = 1.,
epochs = 500,
lr = 0.001,
loss = "binomial",
activation = "selu",
#batchsize = 2L,
batchsize = nrow(train),
optimizer = "sgd",
device = "cuda",
lr_scheduler = config_lr_scheduler("reduce_on_plateau", factor = 0.80, patience = 7), early_stopping = 20)
m = cito::dnn(Y~., data = as.data.frame(train),
hidden = rep(5L, 1L),
bias = FALSE,
verbose = TRUE,
plot=FALSE, lambda = 0.00, alpha = 1.,
epochs = 500,
lr = 0.01,
loss = "binomial",
activation = "selu",
#batchsize = 2L,
batchsize = nrow(train),
optimizer = "sgd",
device = "cuda",
lr_scheduler = config_lr_scheduler("reduce_on_plateau", factor = 0.80, patience = 7), early_stopping = 20)
m = cito::dnn(Y~., data = as.data.frame(train),
hidden = rep(5L, 1L),
bias = FALSE,
verbose = TRUE,
plot=FALSE, lambda = 0.00, alpha = 1.,
epochs = 500,
lr = 0.01,
loss = "mse",
activation = "selu",
#batchsize = 2L,
batchsize = nrow(train),
optimizer = "sgd",
device = "cuda",
lr_scheduler = config_lr_scheduler("reduce_on_plateau", factor = 0.80, patience = 7), early_stopping = 20)
m$use_model_epoch = length(m$weights)
cor(train$Y,predict(m)[,1])
m = cito::dnn(Y~., data = as.data.frame(train),
hidden = rep(5L, 1L),
bias = FALSE,
verbose = TRUE,
plot=FALSE, lambda = 0.00, alpha = 1.,
epochs = 500,
lr = 0.1,
loss = "mse",
activation = "selu",
#batchsize = 2L,
batchsize = nrow(train),
optimizer = "sgd",
device = "cuda",
lr_scheduler = config_lr_scheduler("reduce_on_plateau", factor = 0.80, patience = 7), early_stopping = 20)
m = cito::dnn(Y~., data = as.data.frame(train),
hidden = rep(5L, 1L),
bias = FALSE,
verbose = TRUE,
plot=FALSE, lambda = 0.00, alpha = 1.,
epochs = 500,
lr = 0.5,
loss = "mse",
activation = "selu",
#batchsize = 2L,
batchsize = nrow(train),
optimizer = "sgd",
device = "cuda",
lr_scheduler = config_lr_scheduler("reduce_on_plateau", factor = 0.80, patience = 7), early_stopping = 20)
m$use_model_epoch = length(m$weights)
cor(train$Y,predict(m)[,1])
m = cito::dnn(Y~., data = as.data.frame(train),
hidden = rep(5L, 1L),
bias = FALSE,
verbose = TRUE,
plot=FALSE, lambda = 0.00, alpha = 1.,
epochs = 500,
lr = 0.9,
loss = "mse",
activation = "selu",
#batchsize = 2L,
batchsize = nrow(train),
optimizer = "sgd",
device = "cuda",
lr_scheduler = config_lr_scheduler("reduce_on_plateau", factor = 0.80, patience = 7), early_stopping = 20)
m = cito::dnn(Y~., data = as.data.frame(train),
hidden = rep(5L, 1L),
bias = FALSE,
verbose = TRUE,
plot=FALSE, lambda = 0.00, alpha = 1.,
epochs = 500,
lr = 0.9,
loss = "mse",
activation = "selu",
#batchsize = 2L,
batchsize = nrow(train),
optimizer = "sgd",
device = "cuda",
lr_scheduler = config_lr_scheduler("reduce_on_plateau", factor = 0.80, patience = 7), early_stopping = 20)
m = cito::dnn(Y~., data = as.data.frame(train),
hidden = rep(5L, 1L),
bias = FALSE,
verbose = TRUE,
plot=FALSE, lambda = 0.00, alpha = 1.,
epochs = 500,
lr = 0.6,
loss = "mse",
activation = "selu",
#batchsize = 2L,
batchsize = nrow(train),
optimizer = "sgd",
device = "cuda",
lr_scheduler = config_lr_scheduler("reduce_on_plateau", factor = 0.80, patience = 7), early_stopping = 20)
m = cito::dnn(Y~., data = as.data.frame(train),
hidden = rep(5L, 1L),
bias = FALSE,
verbose = TRUE,
plot=FALSE, lambda = 0.00, alpha = 1.,
epochs = 500,
lr = 0.5,
loss = "mse",
activation = "selu",
#batchsize = 2L,
batchsize = nrow(train),
optimizer = "sgd",
device = "cuda",
lr_scheduler = config_lr_scheduler("reduce_on_plateau", factor = 0.80, patience = 7), early_stopping = 20)
m = cito::dnn(Y~., data = as.data.frame(train),
hidden = rep(5L, 1L),
bias = FALSE,
verbose = TRUE,
plot=FALSE, lambda = 0.00, alpha = 1.,
epochs = 500,
lr = 0.5,
loss = "mse",
activation = "selu",
#batchsize = 2L,
batchsize = nrow(train),
optimizer = "sgd",
device = "cuda",
lr_scheduler = config_lr_scheduler("reduce_on_plateau", factor = 0.80, patience = 7), early_stopping = 20)
m = cito::dnn(Y~., data = as.data.frame(train),
hidden = rep(5L, 1L),
bias = FALSE,
verbose = TRUE,
plot=FALSE, lambda = 0.00, alpha = 1.,
epochs = 500,
lr = 0.5,
loss = "mse",
activation = "selu",
#batchsize = 2L,
batchsize = nrow(train),
optimizer = "sgd",
device = "cuda",
lr_scheduler = config_lr_scheduler("reduce_on_plateau", factor = 0.80, patience = 7), early_stopping = 50)
m$use_model_epoch = length(m$weights)
cor(train$Y,predict(m)[,1])
sqrt(200)
m = cito::dnn(Y~., data = as.data.frame(train),
hidden = rep(14L, 1L),
bias = FALSE,
verbose = TRUE,
plot=FALSE, lambda = 0.00, alpha = 1.,
epochs = 500,
lr = 0.5,
loss = "mse",
activation = "selu",
#batchsize = 2L,
batchsize = nrow(train),
optimizer = "sgd",
device = "cuda",
lr_scheduler = config_lr_scheduler("reduce_on_plateau", factor = 0.80, patience = 7), early_stopping = 50)
m$use_model_epoch = length(m$weights)
cor(train$Y,predict(m)[,1])
m = cito::dnn(Y~., data = as.data.frame(train),
hidden = rep(14L, 1L),
bias = FALSE,
verbose = TRUE,
plot=FALSE, lambda = 0.00, alpha = 1.,
epochs = 1500,
lr = 0.5,
loss = "mse",
activation = "selu",
#batchsize = 2L,
batchsize = nrow(train),
optimizer = "sgd",
device = "cuda",
lr_scheduler = config_lr_scheduler("reduce_on_plateau", factor = 0.80, patience = 7), early_stopping = 50)
m = cito::dnn(Y~., data = as.data.frame(train),
hidden = rep(14L, 1L),
bias = FALSE,
verbose = TRUE,
plot=FALSE, lambda = 0.00, alpha = 1.,
epochs = 15000,
lr = 0.5,
loss = "mse",
activation = "selu",
#batchsize = 2L,
batchsize = nrow(train),
optimizer = "sgd",
device = "cuda",
lr_scheduler = config_lr_scheduler("reduce_on_plateau", factor = 0.80, patience = 7), early_stopping = 50)
m$use_model_epoch = length(m$weights)
cor(train$Y,predict(m)[,1])
m = cito::dnn(Y~., data = as.data.frame(train),
hidden = rep(20L, 1L),
bias = FALSE,
verbose = TRUE,
plot=FALSE, lambda = 0.00, alpha = 1.,
epochs = 10000,
lr = 0.5,
loss = "mse",
activation = "selu",
#batchsize = 2L,
batchsize = nrow(train),
optimizer = "sgd",
device = "cuda",
lr_scheduler = config_lr_scheduler("reduce_on_plateau", factor = 0.80, patience = 7), early_stopping = 50)
m$use_model_epoch = length(m$weights)
cor(train$Y,predict(m)[,1])
eff = diag(marginalEffects(m, interactions = FALSE, max_indices = 5L)$mean)
eff
fields::image.plot(eff)
fields::image.plot(eff$me)
eff$abs
eff = marginalEffects(m, interactions = FALSE, max_indices = 5L)
eff$abs
eff[,1,1]
eff$result[,1,1]
plot(X[,1], X[,1]*eff$result[,1,1]
)
cor(train$Y,predict(m)[,1])
predict(m)
plot(Y, predict(m))
plot(Y, predict(lm(Y~X)))
eff = marginalEffects(m, interactions = FALSE, max_indices = 5L)
plot(X[,1], X[,1]*eff$result[,1,1])
eff
coef(lm(Y~X))
eff = marginalEffects(m, interactions = FALSE, max_indices = 10L)
cor(coef(lm(Y~X))[-1], diag(eff$mean) )
m = cito::dnn(Y~., data = as.data.frame(train),
hidden = rep(10L, 1L),
bias = FALSE,
verbose = TRUE,
plot=FALSE, lambda = 0.00, alpha = 1.,
epochs = 10000,
lr = 0.5,
loss = "mse",
activation = "selu",
#batchsize = 2L,
batchsize = nrow(train),
optimizer = "sgd",
device = "cuda",
lr_scheduler = config_lr_scheduler("reduce_on_plateau", factor = 0.80, patience = 7), early_stopping = 50)
m$use_model_epoch = length(m$weights)
cor(train$Y,predict(m)[,1])
cor(coef(lm(Y~X))[-1], diag(eff$mean) )
eff = marginalEffects(m, interactions = FALSE, max_indices = 10L)
cor(coef(lm(Y~X))[-1], diag(eff$mean) )
plot(X[,1], X[,1]*eff$result[,1,1])
cor(coef(lm(Y~X))[-1], diag(eff$mean) )
eff = marginalEffects(m, interactions = FALSE, max_indices = 10L)
eff
m = cito::dnn(Y~., data = as.data.frame(train),
hidden = rep(5L, 1L),
bias = FALSE,
verbose = TRUE,
plot=FALSE, lambda = 0.00, alpha = 1.,
epochs = 10000,
lr = 0.5,
loss = "mse",
activation = "selu",
#batchsize = 2L,
batchsize = nrow(train),
optimizer = "sgd",
device = "cuda",
lr_scheduler = config_lr_scheduler("reduce_on_plateau", factor = 0.80, patience = 7), early_stopping = 50)
m$use_model_epoch = length(m$weights)
cor(train$Y,predict(m)[,1])
eff = marginalEffects(m, interactions = FALSE, max_indices = 10L)
cor(coef(lm(Y~X))[-1], diag(eff$mean) )
