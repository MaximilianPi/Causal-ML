abline(v = 0.505)
rect(0.4950-0.001, 0, 0.505+0.001, 1.00, col = "black", xpd = NA, border = "black")
rect(0.4951, -0.05, 0.5049, 1.05, col = "white", xpd = NA, border = "white")
abline(v = 0.30)
text(x = 0.22, y = yys[1]*0.990, pos = 3, label = "Effects", xpd = NA)
text(x = 0.22+0.5, y = yys[1]*0.990, pos = 3, label = "Effects", xpd = NA)
text(x = 0.425, y = yys[1]*0.990, pos = 3, label = "VI", xpd = NA)
text(x = 0.425+0.5, y = yys[1]*0.990, pos = 3, label = "VI", xpd = NA)
ytop = 1.03
#segments(0.05, ytop, 0.45, ytop, xpd = NA)
#segments(0.05+0.5, ytop, 0.45+0.5, ytop, xpd = NA)
text(x = 0.25, y = ytop, pos = 3, label = "MSE X1", xpd = NA, font = 2)
text(x = 0.25+0.5, y = ytop, pos = 3, label = "MSE Prediction", xpd = NA, font = 2)
abline(v = 0.30+0.5)
#yys = rev(seq(0.03, 0.97, length.out = 23))
yys = c(seq(0.97, 0.8, length.out = 7), seq(0.8-0.04, 0.03, length.out = 16))
counter1 = counter2 = 1
methods = c("NN", "BRT", "RF", "Elastic_net")
eff_range = list(
eff_range2 = c(-0.3, 0.3),
eff_range1 = c(-9, 9)
)
to_y2 = c(-0.3, 0.3)*2
to_y = list(to_y2, to_y2*3)
xr = c(0.05, 0.25)
segments(0.15, 1.0, 0.15, y1 =  0.5*(yys[7+1]+yys[7]), lty = 2,  col = "#AAAAAA")
segments(0.15+0.5, 1.0, 0.15+0.5, y1 =  0.5*(yys[7+1]+yys[7]), lty = 2, col = "#AAAAAA")
groups = c("var_effect", "bias_effect", "zero")
for(column in 1:2) {
counter1 = counter2 = 1
for(m in 1:4) {
method_tmp = methods[m]
NN_tmp_eff = data %>% filter(algorithm == method_tmp) %>% filter(group == groups[column])
if(m == 1) {
NN_tmp_eff = NN_tmp_eff[c(1:7, 8, 9, 10, 11, 12),]
}
NN_imp_eff = results[[m]]$importances[groups[column]][[1]]
gam_eff = results[[m]][paste0("gam_", groups[column])][[1]]
for(i in 1:nrow(NN_tmp_eff)) {
## Eff
if( (i < 8) & (m == 1) ) {
eff = NN_tmp_eff[i, 1]
eff = scales::rescale(eff, to = c(-0.18, 0.18), from = eff_range[[column]])
ses = scales::rescale(NN_tmp_eff[i, 2], to = c(-0.18, 0.18), from = eff_range[[column]])
col = "black"
if(i == which.min(NN_tmp_eff[1:7,1])) col = "#FF6F57"
draw_eff(eff = eff, se = ses, x = 0.15+(column-1)*0.5, y = yys[counter1], col = col)
if(i == 7) {abline(h= 0.5*(yys[counter1+1]+yys[counter1]), lty = 2)}
} else {
n = i
if(m == 1) n = n - 7
obj = plot(sm(getViz( gam_eff ), n))
x = obj$data$fit$x
y = obj$data$fit$y
se = obj$data$fit$se
draw_line(y, x, se, xr = xr+(column-1)*0.5,
to_y = results[[m]][paste0("range_", groups[column])][[1]],
yr = c(yys[counter1]+abs(diff(yys)[10])*0.5-0.004, yys[counter1]-abs(diff(yys)[10])*0.5+0.004)[c(2, 1)],
p = results[[m]]$tmp[results[[m]]$preds[[groups[column]]],i])
}
## VI
imp = (NN_imp_eff %>% filter(Feature == NN_tmp_eff$hyper[i]) %>% select(Gain))$Gain
if(length(imp) == 0) imp =0
imp = scales::rescale(imp, to = c(0, 0.2), from = c(0, 0.6))
draw_bar(x = 0.3+(column-1)*0.5,eff= imp, y = yys[counter1])
text(xpd = NA, pos = 2, y = yys[counter1]*0.99, x = 0.0, label = labels[NN_tmp_eff$hyper[i]])
counter1 = counter1 + 1
print(NN_tmp_eff$hyper[i])
}
if(m < 4) abline(h= 0.5*(yys[counter1]+yys[counter1-1]), lty = 1)
}
}
rect(0.4951, -0.05, 0.5049, 1.05, col = "white", xpd = NA, border = "white")
axis(3, at = scales::rescale(c(-0.15, 0.0, 0.15), to = c(0.02, 0.28), from = eff_range[[1]]),
labels = c(-0.15, 0.0, 0.15), tck = tck, mgp = c(3, mgp, 0))
axis(3, at = scales::rescale(c(-4, 0.0, 4), to = c(0.02, 0.28), from = eff_range[[2]])+0.5,
labels = c(-4.0, 0.0, 4.0), tck = tck, mgp = c(3, mgp, 0))
axis(3, at = scales::rescale(c(0, 0.25, 0.5), to = c(0.3, 0.5), from = c(0.0, 0.6)),
labels = c(0, 0.25, 0.5), tck = tck, mgp = c(3, mgp, 0))
axis(3, at = scales::rescale(c(0, 0.25, 0.5), to = c(0.3, 0.5), from = c(0.0, 0.6))+0.5,
labels = c(0, 0.25, 0.5), tck = tck, mgp = c(3, mgp, 0))
text(pos = 4, x = 1.0, y = yys[5], label = "Neural Network", xpd = NA, srt = -90)
text(pos = 4, x = 1.0, y = yys[14], label = "BRT", xpd = NA, srt = -90)
text(pos = 4, x = 1.0, y = yys[18], label = "RF", xpd = NA, srt = -90)
text(pos = 4, x = 1.0, y = yys[22], label = "EN", xpd = NA, srt = -90)
#text(x = 0.02, y = 1.05, pos = 2, label = "A", font = 2, cex = 1.3 , xpd = NA)
#text(x = 0.02+0.5, y = 1.05, pos = 2, label = "B", font = 2, cex = 1.3 , xpd = NA)
text(x = 0.15, y = 0, pos = 1, label = "hyper-parameter range", xpd = NA)
text(x = 0.15+0.5, y = 0, pos = 1, label = "hyper-parameter range", xpd = NA)
#dev.off()
#| label: Fig_3c
#| fig-format: pdf
#| fig-width: 10
#| fig-height: 6.7
#| warning: false
labels = c("CELU",
"ELU",
"GELU",
"Leaky ReLU",
"ReLU",
"SELU",
"tanh",
"batch size",
"depth",
"width",
"alpha",
"lambda",
"eta",
"max depth",
"subsample",
"max tree",
"mtry",
"min node size",
"max depth",
"regularization factor")
names(labels) = c("activationscelu",
"activationselu",
"activationsgelu",
"activationsleaky_relu",
"activationsrelu",
"activationsselu",
"activationstanh",
"sgd",
"depth",
"width",
"alpha",
"lambda",
"eta",
"max_depth",
"subsample",
"max_tree",
"mtry",
"min.node.size",
"max.depth",
"regularization.factor")
draw_eff = function(y, x, eff, se, col = "black") {
segments(x+eff+1.96*se, y, x+eff-1.96*se, y)
#segments(x+eff+1.96*se, y+0.01, x+eff+1.96*se, y-0.01)
#segments(x+eff-1.96*se, y+0.01, x+eff-1.96*se, y-0.01)
points(x+eff, y, cex = 0.7, pch = 19, col = col)
}
draw_bar = function(y, x, eff, w = 0.01) {
rect(x, ybottom = y-w, ytop = y+w, xright = x+eff,
col = "#32312F",
border = "#000000")
}
draw_line = function(y, x,se, xr , yr, to_y, p) {
y = y - mean(y)
yy = scales::rescale(y, to = yr, from = to_y)
conf =  scales::rescale(c(y+1.96*se, rev(y-1.96*se)), to = yr, from = to_y)
xx = scales::rescale(x, to = xr, from = c(min(x), max(x)))
pp = scales::rescale(p, to = xr, from = c(min(x), max(x)))
polygon(c(xx, rev(xx)), conf, col = "#1124524E", border = NA)
points(xx, yy, type = "l", col = "#24526E", lwd = 3)
points(pp, predict(gam(yy~s(xx)), newdata = data.frame(xx = pp)), col = "#FF6F57", cex = 1, pch = 8)
}
#cairo_pdf("plots/Fig_44.pdf", width = 9, height = 10)
par(mar = c(2, 9, 4, 2))
plot(NULL, NULL, xlim = c(0, 1), ylim = c(0, 1),
xaxt = "n", yaxt="n", xlab = "", ylab = "",  xaxs = "i", yaxs = "i")
tck = 0.015
mgp = 0.07
yys = c(seq(0.97, 0.8, length.out = 7), seq(0.8-0.04, 0.03, length.out = 16))
abline(v = 0.495)
abline(v = 0.505)
rect(0.4950-0.001, 0, 0.505+0.001, 1.00, col = "black", xpd = NA, border = "black")
rect(0.4951, -0.05, 0.5049, 1.05, col = "white", xpd = NA, border = "white")
abline(v = 0.30)
text(x = 0.22, y = yys[1]*0.990, pos = 3, label = "Effects", xpd = NA)
text(x = 0.22+0.5, y = yys[1]*0.990, pos = 3, label = "Effects", xpd = NA)
text(x = 0.425, y = yys[1]*0.990, pos = 3, label = "VI", xpd = NA)
text(x = 0.425+0.5, y = yys[1]*0.990, pos = 3, label = "VI", xpd = NA)
ytop = 1.03
#segments(0.05, ytop, 0.45, ytop, xpd = NA)
#segments(0.05+0.5, ytop, 0.45+0.5, ytop, xpd = NA)
text(x = 0.25, y = ytop, pos = 3, label = "MSE X1", xpd = NA, font = 2)
text(x = 0.25+0.5, y = ytop, pos = 3, label = "MSE Prediction", xpd = NA, font = 2)
abline(v = 0.30+0.5)
#yys = rev(seq(0.03, 0.97, length.out = 23))
yys = c(seq(0.97, 0.8, length.out = 7), seq(0.8-0.04, 0.03, length.out = 16))
counter1 = counter2 = 1
methods = c("NN", "BRT", "RF", "Elastic_net")
eff_range = list(
eff_range2 = c(-0.3, 0.3),
eff_range1 = c(-9, 9)
)
to_y2 = c(-0.3, 0.3)*2
to_y = list(to_y2, to_y2*3)
xr = c(0.05, 0.25)
segments(0.15, 1.0, 0.15, y1 =  0.5*(yys[7+1]+yys[7]), lty = 2,  col = "#AAAAAA")
segments(0.15+0.5, 1.0, 0.15+0.5, y1 =  0.5*(yys[7+1]+yys[7]), lty = 2, col = "#AAAAAA")
groups = c("bias_effect", "eff", "zero")
for(column in 1:2) {
counter1 = counter2 = 1
for(m in 1:4) {
method_tmp = methods[m]
NN_tmp_eff = data %>% filter(algorithm == method_tmp) %>% filter(group == groups[column])
if(m == 1) {
NN_tmp_eff = NN_tmp_eff[c(1:7, 8, 9, 10, 11, 12),]
}
NN_imp_eff = results[[m]]$importances[groups[column]][[1]]
gam_eff = results[[m]][paste0("gam_", groups[column])][[1]]
for(i in 1:nrow(NN_tmp_eff)) {
## Eff
if( (i < 8) & (m == 1) ) {
eff = NN_tmp_eff[i, 1]
eff = scales::rescale(eff, to = c(-0.18, 0.18), from = eff_range[[column]])
ses = scales::rescale(NN_tmp_eff[i, 2], to = c(-0.18, 0.18), from = eff_range[[column]])
col = "black"
if(i == which.min(NN_tmp_eff[1:7,1])) col = "#FF6F57"
draw_eff(eff = eff, se = ses, x = 0.15+(column-1)*0.5, y = yys[counter1], col = col)
if(i == 7) {abline(h= 0.5*(yys[counter1+1]+yys[counter1]), lty = 2)}
} else {
n = i
if(m == 1) n = n - 7
obj = plot(sm(getViz( gam_eff ), n))
x = obj$data$fit$x
y = obj$data$fit$y
se = obj$data$fit$se
draw_line(y, x, se, xr = xr+(column-1)*0.5,
to_y = results[[m]][paste0("range_", groups[column])][[1]],
yr = c(yys[counter1]+abs(diff(yys)[10])*0.5-0.004, yys[counter1]-abs(diff(yys)[10])*0.5+0.004)[c(2, 1)],
p = results[[m]]$tmp[results[[m]]$preds[[groups[column]]],i])
}
## VI
imp = (NN_imp_eff %>% filter(Feature == NN_tmp_eff$hyper[i]) %>% select(Gain))$Gain
if(length(imp) == 0) imp =0
imp = scales::rescale(imp, to = c(0, 0.2), from = c(0, 0.6))
draw_bar(x = 0.3+(column-1)*0.5,eff= imp, y = yys[counter1])
text(xpd = NA, pos = 2, y = yys[counter1]*0.99, x = 0.0, label = labels[NN_tmp_eff$hyper[i]])
counter1 = counter1 + 1
print(NN_tmp_eff$hyper[i])
}
if(m < 4) abline(h= 0.5*(yys[counter1]+yys[counter1-1]), lty = 1)
}
}
rect(0.4951, -0.05, 0.5049, 1.05, col = "white", xpd = NA, border = "white")
axis(3, at = scales::rescale(c(-0.15, 0.0, 0.15), to = c(0.02, 0.28), from = eff_range[[1]]),
labels = c(-0.15, 0.0, 0.15), tck = tck, mgp = c(3, mgp, 0))
axis(3, at = scales::rescale(c(-4, 0.0, 4), to = c(0.02, 0.28), from = eff_range[[2]])+0.5,
labels = c(-4.0, 0.0, 4.0), tck = tck, mgp = c(3, mgp, 0))
axis(3, at = scales::rescale(c(0, 0.25, 0.5), to = c(0.3, 0.5), from = c(0.0, 0.6)),
labels = c(0, 0.25, 0.5), tck = tck, mgp = c(3, mgp, 0))
axis(3, at = scales::rescale(c(0, 0.25, 0.5), to = c(0.3, 0.5), from = c(0.0, 0.6))+0.5,
labels = c(0, 0.25, 0.5), tck = tck, mgp = c(3, mgp, 0))
text(pos = 4, x = 1.0, y = yys[5], label = "Neural Network", xpd = NA, srt = -90)
text(pos = 4, x = 1.0, y = yys[14], label = "BRT", xpd = NA, srt = -90)
text(pos = 4, x = 1.0, y = yys[18], label = "RF", xpd = NA, srt = -90)
text(pos = 4, x = 1.0, y = yys[22], label = "EN", xpd = NA, srt = -90)
#text(x = 0.02, y = 1.05, pos = 2, label = "A", font = 2, cex = 1.3 , xpd = NA)
#text(x = 0.02+0.5, y = 1.05, pos = 2, label = "B", font = 2, cex = 1.3 , xpd = NA)
text(x = 0.15, y = 0, pos = 1, label = "hyper-parameter range", xpd = NA)
text(x = 0.15+0.5, y = 0, pos = 1, label = "hyper-parameter range", xpd = NA)
#dev.off()
#| label: Fig_3c
#| fig-format: pdf
#| fig-width: 10
#| fig-height: 6.7
#| warning: false
labels = c("CELU",
"ELU",
"GELU",
"Leaky ReLU",
"ReLU",
"SELU",
"tanh",
"batch size",
"depth",
"width",
"alpha",
"lambda",
"eta",
"max depth",
"subsample",
"max tree",
"mtry",
"min node size",
"max depth",
"regularization factor")
names(labels) = c("activationscelu",
"activationselu",
"activationsgelu",
"activationsleaky_relu",
"activationsrelu",
"activationsselu",
"activationstanh",
"sgd",
"depth",
"width",
"alpha",
"lambda",
"eta",
"max_depth",
"subsample",
"max_tree",
"mtry",
"min.node.size",
"max.depth",
"regularization.factor")
draw_eff = function(y, x, eff, se, col = "black") {
segments(x+eff+1.96*se, y, x+eff-1.96*se, y)
#segments(x+eff+1.96*se, y+0.01, x+eff+1.96*se, y-0.01)
#segments(x+eff-1.96*se, y+0.01, x+eff-1.96*se, y-0.01)
points(x+eff, y, cex = 0.7, pch = 19, col = col)
}
draw_bar = function(y, x, eff, w = 0.01) {
rect(x, ybottom = y-w, ytop = y+w, xright = x+eff,
col = "#32312F",
border = "#000000")
}
draw_line = function(y, x,se, xr , yr, to_y, p) {
y = y - mean(y)
yy = scales::rescale(y, to = yr, from = to_y)
conf =  scales::rescale(c(y+1.96*se, rev(y-1.96*se)), to = yr, from = to_y)
xx = scales::rescale(x, to = xr, from = c(min(x), max(x)))
pp = scales::rescale(p, to = xr, from = c(min(x), max(x)))
polygon(c(xx, rev(xx)), conf, col = "#1124524E", border = NA)
points(xx, yy, type = "l", col = "#24526E", lwd = 3)
points(pp, predict(gam(yy~s(xx)), newdata = data.frame(xx = pp)), col = "#FF6F57", cex = 1, pch = 8)
}
#cairo_pdf("plots/Fig_44.pdf", width = 9, height = 10)
par(mar = c(2, 9, 4, 2))
plot(NULL, NULL, xlim = c(0, 1), ylim = c(0, 1),
xaxt = "n", yaxt="n", xlab = "", ylab = "",  xaxs = "i", yaxs = "i")
tck = 0.015
mgp = 0.07
yys = c(seq(0.97, 0.8, length.out = 7), seq(0.8-0.04, 0.03, length.out = 16))
abline(v = 0.495)
abline(v = 0.505)
rect(0.4950-0.001, 0, 0.505+0.001, 1.00, col = "black", xpd = NA, border = "black")
rect(0.4951, -0.05, 0.5049, 1.05, col = "white", xpd = NA, border = "white")
abline(v = 0.30)
text(x = 0.22, y = yys[1]*0.990, pos = 3, label = "Effects", xpd = NA)
text(x = 0.22+0.5, y = yys[1]*0.990, pos = 3, label = "Effects", xpd = NA)
text(x = 0.425, y = yys[1]*0.990, pos = 3, label = "VI", xpd = NA)
text(x = 0.425+0.5, y = yys[1]*0.990, pos = 3, label = "VI", xpd = NA)
ytop = 1.03
#segments(0.05, ytop, 0.45, ytop, xpd = NA)
#segments(0.05+0.5, ytop, 0.45+0.5, ytop, xpd = NA)
text(x = 0.25, y = ytop, pos = 3, label = "MSE X1", xpd = NA, font = 2)
text(x = 0.25+0.5, y = ytop, pos = 3, label = "MSE Prediction", xpd = NA, font = 2)
abline(v = 0.30+0.5)
#yys = rev(seq(0.03, 0.97, length.out = 23))
yys = c(seq(0.97, 0.8, length.out = 7), seq(0.8-0.04, 0.03, length.out = 16))
counter1 = counter2 = 1
methods = c("NN", "BRT", "RF", "Elastic_net")
eff_range = list(
eff_range2 = c(-0.3, 0.3),
eff_range1 = c(-9, 9)
)
to_y2 = c(-0.3, 0.3)*2
to_y = list(to_y2, to_y2*3)
xr = c(0.05, 0.25)
segments(0.15, 1.0, 0.15, y1 =  0.5*(yys[7+1]+yys[7]), lty = 2,  col = "#AAAAAA")
segments(0.15+0.5, 1.0, 0.15+0.5, y1 =  0.5*(yys[7+1]+yys[7]), lty = 2, col = "#AAAAAA")
groups = c("bias_effect", "pred", "zero")
for(column in 1:2) {
counter1 = counter2 = 1
for(m in 1:4) {
method_tmp = methods[m]
NN_tmp_eff = data %>% filter(algorithm == method_tmp) %>% filter(group == groups[column])
if(m == 1) {
NN_tmp_eff = NN_tmp_eff[c(1:7, 8, 9, 10, 11, 12),]
}
NN_imp_eff = results[[m]]$importances[groups[column]][[1]]
gam_eff = results[[m]][paste0("gam_", groups[column])][[1]]
for(i in 1:nrow(NN_tmp_eff)) {
## Eff
if( (i < 8) & (m == 1) ) {
eff = NN_tmp_eff[i, 1]
eff = scales::rescale(eff, to = c(-0.18, 0.18), from = eff_range[[column]])
ses = scales::rescale(NN_tmp_eff[i, 2], to = c(-0.18, 0.18), from = eff_range[[column]])
col = "black"
if(i == which.min(NN_tmp_eff[1:7,1])) col = "#FF6F57"
draw_eff(eff = eff, se = ses, x = 0.15+(column-1)*0.5, y = yys[counter1], col = col)
if(i == 7) {abline(h= 0.5*(yys[counter1+1]+yys[counter1]), lty = 2)}
} else {
n = i
if(m == 1) n = n - 7
obj = plot(sm(getViz( gam_eff ), n))
x = obj$data$fit$x
y = obj$data$fit$y
se = obj$data$fit$se
draw_line(y, x, se, xr = xr+(column-1)*0.5,
to_y = results[[m]][paste0("range_", groups[column])][[1]],
yr = c(yys[counter1]+abs(diff(yys)[10])*0.5-0.004, yys[counter1]-abs(diff(yys)[10])*0.5+0.004)[c(2, 1)],
p = results[[m]]$tmp[results[[m]]$preds[[groups[column]]],i])
}
## VI
imp = (NN_imp_eff %>% filter(Feature == NN_tmp_eff$hyper[i]) %>% select(Gain))$Gain
if(length(imp) == 0) imp =0
imp = scales::rescale(imp, to = c(0, 0.2), from = c(0, 0.6))
draw_bar(x = 0.3+(column-1)*0.5,eff= imp, y = yys[counter1])
text(xpd = NA, pos = 2, y = yys[counter1]*0.99, x = 0.0, label = labels[NN_tmp_eff$hyper[i]])
counter1 = counter1 + 1
print(NN_tmp_eff$hyper[i])
}
if(m < 4) abline(h= 0.5*(yys[counter1]+yys[counter1-1]), lty = 1)
}
}
rect(0.4951, -0.05, 0.5049, 1.05, col = "white", xpd = NA, border = "white")
axis(3, at = scales::rescale(c(-0.15, 0.0, 0.15), to = c(0.02, 0.28), from = eff_range[[1]]),
labels = c(-0.15, 0.0, 0.15), tck = tck, mgp = c(3, mgp, 0))
axis(3, at = scales::rescale(c(-4, 0.0, 4), to = c(0.02, 0.28), from = eff_range[[2]])+0.5,
labels = c(-4.0, 0.0, 4.0), tck = tck, mgp = c(3, mgp, 0))
axis(3, at = scales::rescale(c(0, 0.25, 0.5), to = c(0.3, 0.5), from = c(0.0, 0.6)),
labels = c(0, 0.25, 0.5), tck = tck, mgp = c(3, mgp, 0))
axis(3, at = scales::rescale(c(0, 0.25, 0.5), to = c(0.3, 0.5), from = c(0.0, 0.6))+0.5,
labels = c(0, 0.25, 0.5), tck = tck, mgp = c(3, mgp, 0))
text(pos = 4, x = 1.0, y = yys[5], label = "Neural Network", xpd = NA, srt = -90)
text(pos = 4, x = 1.0, y = yys[14], label = "BRT", xpd = NA, srt = -90)
text(pos = 4, x = 1.0, y = yys[18], label = "RF", xpd = NA, srt = -90)
text(pos = 4, x = 1.0, y = yys[22], label = "EN", xpd = NA, srt = -90)
#text(x = 0.02, y = 1.05, pos = 2, label = "A", font = 2, cex = 1.3 , xpd = NA)
#text(x = 0.02+0.5, y = 1.05, pos = 2, label = "B", font = 2, cex = 1.3 , xpd = NA)
text(x = 0.15, y = 0, pos = 1, label = "hyper-parameter range", xpd = NA)
text(x = 0.15+0.5, y = 0, pos = 1, label = "hyper-parameter range", xpd = NA)
#dev.off()
library(cito)
?cito
# Build and train  Network
nn.fit<- dnn(Sepal.Length~., data = datasets::iris[-validation_set,], epochs = 5000)
library(cito)
?cito
library(cito)
set.seed(222)
validation_set<- sample(c(1:nrow(datasets::iris)),25)
# Build and train  Network
nn.fit<- dnn(Sepal.Length~., data = datasets::iris[-validation_set,], epochs = 5000)
X = matrix(runif(100*100), 100, 100)
Y = runif(100)
# Build and train  Network
nn.fit<- dnn(Y~X, epochs = 5000)
# Build and train  Network
nn.fit<- dnn(Y~.,data = data.frame(Y=Y, X) epochs = 5000)
# Build and train  Network
nn.fit<- dnn(Y~.,data = data.frame(Y=Y, X), epochs = 5000)
X = matrix(runif(1000*500), 1000, 500)
Y = runif(1000)
# Build and train  Network
nn.fit<- dnn(Y~.,data = data.frame(Y=Y, X), epochs = 5000)
# Build and train  Network
nn.fit<- dnn(Y~.,data = data.frame(Y=Y, X), epochs = 5000, batchsize = 1000)
# Build and train  Network
torch::torch_set_num_threads(1L)
nn.fit<- dnn(Y~.,data = data.frame(Y=Y, X), epochs = 5000, batchsize = 1000)
torch::torch_set_num_interop_threads(1L)
nn.fit<- dnn(Y~.,data = data.frame(Y=Y, X), epochs = 5000, batchsize = 1000)
Sys.setenv(OMP_NUM_THREADS=1)
nn.fit<- dnn(Y~.,data = data.frame(Y=Y, X), epochs = 5000, batchsize = 1000)
Sys.setenv(MKL_NUM_THREADS=1)
nn.fit<- dnn(Y~.,data = data.frame(Y=Y, X), epochs = 5000, batchsize = 1000)
library(cito)
torch::torch_set_num_threads(1L)
torch::torch_set_num_interop_threads(1L)
Sys.setenv(OMP_NUM_THREADS=1)
Sys.setenv(MKL_NUM_THREADS=1)
set.seed(222)
validation_set<- sample(c(1:nrow(datasets::iris)),25)
X = matrix(runif(1000*500), 1000, 500)
Y = runif(1000)
# Build and train  Network
torch::torch_set_num_threads(1L)
torch::torch_set_num_interop_threads(1L)
Sys.setenv(OMP_NUM_THREADS=1)
Sys.setenv(MKL_NUM_THREADS=1)
nn.fit<- dnn(Y~.,data = data.frame(Y=Y, X), epochs = 5000, batchsize = 1000)
library(cito)
?cito
library(cito)
#torch::torch_set_num_threads(1L)
#torch::torch_set_num_interop_threads(1L)
Sys.setenv(OMP_NUM_THREADS=1L)
Sys.setenv(MKL_NUM_THREADS=1L)
set.seed(222)
validation_set<- sample(c(1:nrow(datasets::iris)),25)
X = matrix(runif(1000*500), 1000, 500)
Y = runif(1000)
nn.fit<- dnn(Y~.,data = data.frame(Y=Y, X), epochs = 5000, batchsize = 1000)
torch::torch_get_num_threads()
# Build and train  Network
#torch::torch_set_num_threads(1L)
#torch::torch_set_num_interop_threads(1L)
Sys.setenv(OMP_NUM_THREADS=1)
Sys.setenv(MKL_NUM_THREADS=1)
nn.fit<- dnn(Y~.,data = data.frame(Y=Y, X), epochs = 5000, batchsize = 1000)
torch::backends_mkl_is_available()
torch::backends_mkldnn_is_available()
#torch::torch_set_num_threads(1L)
#torch::torch_set_num_interop_threads(1L)
Sys.setenv(MKL_DYNAMIC=FALSE)
Sys.setenv(OMP_NUM_THREADS=1L)
Sys.setenv(MKL_NUM_THREADS=1L)
nn.fit<- dnn(Y~.,data = data.frame(Y=Y, X), epochs = 5000, batchsize = 1000)
library(cito)
?cito
library(cito)
#torch::torch_set_num_threads(1L)
#torch::torch_set_num_interop_threads(1L)
Sys.setenv(MKL_DYNAMIC=FALSE)
Sys.setenv(OMP_NUM_THREADS=1L)
Sys.setenv(MKL_NUM_THREADS=1L)
set.seed(222)
validation_set<- sample(c(1:nrow(datasets::iris)),25)
X = matrix(runif(1000*500), 1000, 500)
Y = runif(1000)
# Build and train  Network
#torch::torch_set_num_threads(1L)
#torch::torch_set_num_interop_threads(1L)
Sys.setenv(OMP_NUM_THREADS=1)
Sys.setenv(MKL_NUM_THREADS=1)
nn.fit<- dnn(Y~.,data = data.frame(Y=Y, X), epochs = 5000, batchsize = 1000)
