<<<<<<< HEAD
ggs2[2:5] = lapply(ggs2[2:5], function(g) g+ylab(""))
ggs1[2:5] = lapply(ggs1[2:5], function(g) g+ylab(""))
ggs1[[1]] = ggs1[[1]] + ylab("Bias of X1")
ggs2[[1]] = ggs2[[1]] + ylab("Bias of X1")
ggs = c(ggs1, ggs2)
ggs = lapply(ggs, function(g) g+ggtitle("") )
ggs[[3]] = ggs[[3]] + ggtitle("N = 100, P = 10")
ggs[[8]] = ggs[[8]] + ggtitle("N = 100, P = 100")
ggs = lapply(ggs, function(g) g+theme_bw() )
ggs[[1]] = ggs[[1]] + scale_x_discrete(guide = guide_axis(n.dodge = 2))#theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.2))
ggs[[6]] = ggs[[6]] + scale_x_discrete(guide = guide_axis(n.dodge = 2))#theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=0.2))
do.call(grid.arrange, c(ggs, ncol = 5))
ggs1 = plot(ggpredict(models_bias_1[[1]]))
ggs2 = plot(ggpredict(models_bias_1[[2]]))
ggs1 = lapply(ggs1, function(g) g+xlab("") )
ggs2[2:5] = lapply(ggs2[2:5], function(g) g+ylab(""))
ggs1[2:5] = lapply(ggs1[2:5], function(g) g+ylab(""))
ggs1[[1]] = ggs1[[1]] + ylab("Bias of X1")
ggs2[[1]] = ggs2[[1]] + ylab("Bias of X1")
ggs = c(ggs1, ggs2)
ggs = lapply(ggs, function(g) g+ggtitle("") )
ggs[[3]] = ggs[[3]] + ggtitle("N = 100, P = 10")
ggs[[8]] = ggs[[8]] + ggtitle("N = 100, P = 100")
ggs = lapply(ggs, function(g) g+theme_bw() )
ggs[[1]] = ggs[[1]] + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
ggs[[6]] = ggs[[6]] + theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))
do.call(grid.arrange, c(ggs, ncol = 5))
ggs = lapply(models_bias_1, function(g) ggpredict(g) )
length(ggs)
ggs = sapply(models_bias_1, function(g) ggpredict(g) )
length(ggs)
ggs = lapply(ggs, function(g) g+xlab("") )
ggs
ggs = lapply(models_bias_1, function(g) ggpredict(g) )
unlist(ggs)
ggs[[1]]
tidyr::unnest(ggs)
ggs = do.call(c, lapply(models_bias_1, function(g) ggpredict(g) ))
ggs
length(ggs)
ggs = lapply(ggs, function(g) g+xlab("") )
ggs[[1]]
ggs = do.call(c, lapply(models_bias_1, function(g) plot(ggpredict(g) )))
ggs = lapply(ggs, function(g) g+xlab("") )
ggs[[1]]
ggs[-c(1, 6)]
ggs[-c(1, 6, 11, 16)] = lapply(ggs[-c(1, 6, 11, 16)], function(g) g+ylab(""))
ggs[c(1, 6, 11, 16)] = lapply(ggs[c(1, 6, 11, 16)], function(g) g+ylab("Bias of X1"))
ggs = lapply(ggs, function(g) g+ggtitle("") )
ggs = do.call(c, lapply(models_bias_1, function(g) plot(ggpredict(g) )))
ggs = lapply(ggs, function(g) g+xlab("") )
ggs[-c(1, 6, 11, 16)] = lapply(ggs[-c(1, 6, 11, 16)], function(g) g+ylab(""))
ggs[c(1, 6, 11, 16)] = lapply(ggs[c(1, 6, 11, 16)], function(g) g+ylab("Bias of X1"))
ggs = lapply(ggs, function(g) g+ggtitle("") )
ggs[[3]] = ggs[[3]] + ggtitle("N = 100, P = 10")
ggs[[8]] = ggs[[8]] + ggtitle("N = 100, P = 100")
ggs[[13]] = ggs[[13]] + ggtitle("N = 1000, P = 10")
ggs[[18]] = ggs[[18]] + ggtitle("N = 1000, P = 100")
ggs = lapply(ggs, function(g) g+theme_bw() )
ggs[c(1, 6, 11, 16)] = lapply(ggs[c(1, 6, 11, 16)], function(g) g+ theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)))
do.call(grid.arrange, c(ggs, ncol = 5))
ggs = do.call(c, lapply(models_rmse, function(g) plot(ggpredict(g) )))
ggs = lapply(ggs, function(g) g+xlab("") )
ggs[-c(1, 6, 11, 16)] = lapply(ggs[-c(1, 6, 11, 16)], function(g) g+ylab(""))
ggs[c(1, 6, 11, 16)] = lapply(ggs[c(1, 6, 11, 16)], function(g) g+ylab("RMSE"))
ggs = lapply(ggs, function(g) g+ggtitle("") )
ggs[[3]] = ggs[[3]] + ggtitle("N = 100, P = 10")
ggs[[8]] = ggs[[8]] + ggtitle("N = 100, P = 100")
ggs[[13]] = ggs[[13]] + ggtitle("N = 1000, P = 10")
ggs[[18]] = ggs[[18]] + ggtitle("N = 1000, P = 100")
ggs = lapply(ggs, function(g) g+theme_bw() )
ggs[c(1, 6, 11, 16)] = lapply(ggs[c(1, 6, 11, 16)], function(g) g+ theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)))
do.call(grid.arrange, c(ggs, ncol = 5))
=======
for(i in c(1, 2, 3, 4, 7)) {
counter = 1
for(j in c(2, 4, 3)) {
tmp = Results[[sc[j]]]
sd = Results_sd[[sc[j]]][i,]
edges = round(tmp[i,], 5)
bias = edges[c(1, 2, 5)] - true_effs[j,]
g1 = graph(c("X1", "Y", "X2", "Y", "X3", "Y"),
directed=TRUE )
layout_as_tree(g1, root = "Y", circular = TRUE, flip.y = TRUE)
eqarrowPlot(g1, matrix(c(1,1,
0,1,
0,0,
0,2), nrow = 4L, 2L, byrow = TRUE) ,
#cols = c( "skyblue","#B0A8B9", "#B0A8B9", "#B0A8B9"),
cols = c(addA(rep("#87CEEB", 1), 1.0), "#B0A8B9", addA(rep("#87CEEB", 1), 1.0), addA(rep("#87CEEB", 1), 1.0)),
edge.arrow.size=abs(bias)*2.3,#abs(edges[c(1, 2, 5)]),
edge.width=abs(bias)*cex_fac*5,#abs(edges[c(1, 2, 5)])*cex_fac,
edge.label = c(paste0(format(round(bias, 2)[1], nsmall = 1), "\n\n"),
paste0("          ",format(round(bias, 2)[2], nsmall = 1), "\n"),
paste0("          ", format(round(bias, 2)[3], nsmall=1))),
edge.label.cex = 1.4,
edge.colors = ifelse(abs(edges[c(1, 2, 5)]) < 0.001, "white", "#e60000"))
text(labs[i], x = 0, y = 2.3, xpd = NA, cex = 1.4, pos = 3)
if(i == 1) {
text(letters[counter], cex = 1.9, x = -2.2, y = 2.5, xpd = NA, font = 2)
counter = counter + 1
}
}
if(i == 3) {
points(x = 0-1, y = -1.1*0.5, col = "#e60000", xpd = NA, pch = 15, cex = 1.8)
text(x = 0.1-1, y = -1.1*0.5, label = "Bias = Estimate - True effect", xpd = NA, pos = 4, cex = 1.4)
}
}
>>>>>>> 93a80d4eefaad6d6ca535c7c8f45269b2ebc0de9
#| echo: false
effs_true = c(1.0, 0.0, 0.0, 0.0, 1, rep(0, 24))
inter_true = diag(effs_true)
inter_true[1,2] = inter_true[2,1] = inter_true[3, 4] = inter_true[4,3] = 1
inter_low = readRDS("results/data_poor_small_inter.RDS")
inter_med = readRDS("results/data_poor_mid_inter.RDS")
inter_large = readRDS("results/data_poor_big_inter.RDS")
extract_B = function(RI, exponent = 1) {
Bias = apply(abind::abind(lapply(1:100, function(j) t(sapply(1:8, function(i) diag(RI[[j]][[i]][[1]]) - diag(inter_true)))), along = 0L), 2:3, mean)**exponent
Bias_1 = apply(Bias[,c(diag(inter_true) > 0.5)], 1, mean)
Bias_0 = apply(Bias[,c(diag(inter_true) < 0.5)], 1, mean)
Bias_Inter = apply(abind::abind(lapply(1:100, function(j) t(sapply(1:8, function(i) RI[[j]][[i]][[1]][lower.tri(diag(29))] - inter_true[lower.tri(diag(29))]  ))), along = 0L), 2:3, mean)**exponent
Bias_Inter_1 = apply(Bias_Inter[,c(inter_true[lower.tri(diag(29))]  > 0.5)], 1, mean)
Bias_Inter_0 = apply(Bias_Inter[,c(inter_true[lower.tri(diag(29))]  < 0.5)], 1, mean)
return(cbind(Bias_1, Bias_0, Bias_Inter_1, Bias_Inter_0))
}
extract_V= function(RI) {
Var = apply(abind::abind(lapply(1:100, function(j) t(sapply(1:8, function(i) diag(RI[[j]][[i]][[1]])))), along = 0L), 2:3, var)
Var_1 = apply(Var[,c(diag(inter_true) > 0.5)], 1, mean)
Var_0 = apply(Var[,c(diag(inter_true) < 0.5)], 1, mean)
Var_Inter = apply(abind::abind(lapply(1:100, function(j) t(sapply(1:8, function(i) RI[[j]][[i]][[1]][lower.tri(diag(29))] ))), along = 0L), 2:3, var)
Var_Inter_1 = apply(Var_Inter[,c(inter_true[lower.tri(diag(29))] > 0.5)], 1, mean)
Var_Inter_0 = apply(Var_Inter[,c(inter_true[lower.tri(diag(29))] < 0.5)], 1, mean)
return(cbind(Var_1, Var_0, Var_Inter_1, Var_Inter_0))
}
source("~/Causal-ML/utils.R")
#| echo: false
bias_low = extract_B(inter_low, exponent = 1)
bias_med = extract_B(inter_med, exponent = 1)
bias_large = extract_B(inter_large, exponent = 1)
var_low = extract_V(inter_low)
var_med = extract_V(inter_med)
var_large =extract_V(inter_large)
colnames(bias_low) = colnames(bias_med) = colnames(bias_large) = c("bias_1_Main", "bias_0_Main", "bias_1_Inter", "bias_0_Inter")
colnames(var_low) = colnames(var_med) = colnames(var_large) = c("var_1_Main", "var_0_Main", "var_1_Inter", "var_0_Inter")
rownames(bias_low) = rownames(bias_med) = rownames(bias_large) = rownames(var_low) = rownames(var_med) = rownames(var_large)= c( "LM","RF", "BRT", "NN","NN_Drop", "L1", "L2", "glmnet")
bias_low_L = bias_low %>% data.frame %>% mutate(method = rownames(.)) %>%  pivot_longer(cols = c("bias_1_Main", "bias_0_Main", "bias_1_Inter", "bias_0_Inter"), values_to = "bias") %>% mutate(N = "low")
bias_med_L = bias_med %>% data.frame %>% mutate(method = rownames(.)) %>%  pivot_longer(cols = c("bias_1_Main", "bias_0_Main", "bias_1_Inter", "bias_0_Inter"), values_to = "bias") %>% mutate(N = "med")
bias_large_L = bias_large %>% data.frame %>% mutate(method = rownames(.)) %>%   pivot_longer(cols = c("bias_1_Main", "bias_0_Main", "bias_1_Inter", "bias_0_Inter"), values_to = "bias") %>% mutate(N = "large")
var_low_L = var_low %>% data.frame%>% mutate(method = rownames(.)) %>%   pivot_longer(cols = c("var_1_Main", "var_0_Main", "var_1_Inter", "var_0_Inter"), values_to = "var") %>% mutate(N = "low")
var_med_L = var_med %>% data.frame %>% mutate(method = rownames(.)) %>%  pivot_longer(cols = c("var_1_Main", "var_0_Main", "var_1_Inter", "var_0_Inter"), values_to = "var") %>% mutate(N = "med")
var_large_L = var_large %>% data.frame %>% mutate(method = rownames(.)) %>%   pivot_longer(cols = c("var_1_Main", "var_0_Main", "var_1_Inter", "var_0_Inter"), values_to = "var") %>% mutate(N = "large")
data_bias = rbind(bias_low_L, bias_med_L, bias_large_L)
data_var = rbind(var_low_L, var_med_L, var_large_L)
data_bias$var = data_var$var
colnames(data_bias)[2] = "which_bias"
data = data_bias  %>% pivot_longer(cols = c("bias", "var"))
#data[data$method=="LM" & data$N=="low",]$value = NA
data$N = forcats::lvls_reorder(data$N, c(2, 3, 1))
data$name = forcats::lvls_reorder(data$name, c(2, 1))
data$which_bias = forcats::lvls_reorder(data$which_bias, c(4, 3, 2, 1))
data$method = forcats::lvls_reorder(data$method, c(5,8, 1, 6,7, 3, 4, 2))
data$label = c(rep("NA", 8), rep("", nrow(data)-8))
levels(data$method)[8] = "Elastic-net"
par(mfrow = c(3, 5), mar = c(1, 1, 1, 1)*0.5, oma = c(8, 4, 4, 4))
methods = c("LM", "RF", "BRT", "NN", "Elastic-net")
sizes = c("low", "med", "large")
y_labels = c("N = 100", "N = 600", "N = 2000")
for(j in 1:3) {
for(i in 1:5) {
if(i == 1) axes = TRUE
else axes = FALSE
if(j ==1) create_gapped_stacked(tmp = data[data$method == methods[i] & data$N== sizes[j], ],
to2 = c(100, 2000),
labels2 = c("100", "1050", "2000"),
axes = axes, to = c(0, 1), labels1 = c("0.0", "0.2", "0.4", "0.6", "0.8", "1.0"), d_between = 0.08)
else create_gapped_stacked(tmp = data[data$method == methods[i] & data$N== sizes[j], ],
axes = axes, to2 = c(2.0, 5),
labels2 = c("2.0","3.0", "4.0", "5.0"), to = c(0, 1.0),
labels1 = c("0.0", "0.2", "0.4", "0.6", "0.8", "1.0"), d_between = 0.08)
if(j == 3){
text(x = seq(0, 1, length.out = 6)[-c(1, 6)]-0.30,y = -0.24,
labels = c("Bias+Variance for beta = 1", "Bias+Variance for beta = 0", "Bias+Variance for Inter = 1", "Bias+Variance for Inter = 0"),
srt = 45,
xpd = NA, pos = 1)
}
if(j == 1) {
rect(0, 1.0, 1.0, 1.1, xpd = NA, border = "black")
text(0.5, y = 0.98, pos = 3, xpd = NA, label = methods[i], cex = 1.3, font = 2)
}
<<<<<<< HEAD
if(i == 5) {
rect(1, 0, 1.15, 1.0, xpd = NA, border = "black")
text(y = 0.72, x = 1.01, pos = 4, xpd = NA, label = y_labels[j], cex = 1.3, font = 2, srt = -90)
}
if(i == 5 & j == 1) {
legend("topright", bty = "n", col = c("#96c6ed","#e0acd5" ), pch = 15, legend = c("Bias", "Variance"))
=======
layout = matrix(c(0,10,
0,5,
0,0,
5,5), nrow = 4L, 2L, byrow = TRUE)
x00 = 1.4
plot_scenarios = function(cex_fac = 1.3, layout = layout) {
g1 <- graph(c("x\U2081", "y", "x\U2082", "y", "x\U2083", "y"),
#c(bquote(X[1]), bquote(y), bquote(X[2]), bquote(y), bquote(X[3]), bquote(y)),
directed=TRUE )
eqarrowPlot(g1, layout,
#cols = c( "skyblue","#B0A8B9", "#B0A8B9", "#B0A8B9"),
cols = c(addA(rep("#87CEEB", 1), 1.0), "#B0A8B9", addA(rep("#87CEEB", 1), 1.0), addA(rep("#87CEEB", 2), 1.0)),
edge.arrow.size=c(1, 0.5,1.0),
edge.width=c(1, 0.5,1.0)*cex_fac,
edge.label = c("1.0\n\n","0.5\n","1.0"),
edge.label.cex = 1.4,
edge.colors = c(rep("grey", 2), "grey"))
text(letters[1], cex = 1.9, x = -1.6, y = 1.5, xpd = NA, font = 2)
text("Simulation", x = 0.3, y = 2.3, xpd = NA, cex = 1.4, pos = 3)
segments(x0 = x00, x1 = x00, y0 = -0.5, y1 = 2.5, xpd = NA)
# Collinearity
g1 <- graph(c("X1", "Y", "X2","Y", "X3", "Y", "X1", "X2"),
directed=TRUE )
eqarrowPlot(g1, layout,
#cols = c( "skyblue","#B0A8B9", "#B0A8B9", "#B0A8B9"),
cols = c(addA(rep("#87CEEB", 1), 1.0), "#B0A8B9", addA(rep("#87CEEB", 1), 1.0), addA(rep("#87CEEB", 2), 1.0)),
edge.arrow.size=c(1.0, 0.0,1.0,0.95)*cex_fac,
edge.width=c(1.0, 0.5,1.0,0.95)*cex_fac,
edge.label = c("1.0\n\n","\n","1.0", "\n0.90"),
edge.label.cex = 1.4,
edge.arrow.mode = c(rep(">", 3), "-"),
edge.colors = c(rep("grey", 1),"white","grey", "#ffab02"))
text(letters[3], cex = 1.9, x = -1.6, y = 1.5, xpd = NA, font = 2)
text("Simulation", x = 0.3, y = 2.3, xpd = NA, cex = 1.4, pos = 3)
segments(x0 = x00, x1 = x00, y0 = -0.5, y1 = 3.5, xpd = NA)
# Confounder
g1 <- graph(c("X1", "Y", "X2","Y", "X3", "Y", "X1", "X2"),
directed=TRUE )
eqarrowPlot(g1, layout,
#cols = c( "skyblue","#B0A8B9", "#B0A8B9", "#B0A8B9"),
cols = c(addA(rep("#87CEEB", 1), 1.0), "#B0A8B9", addA(rep("#87CEEB", 1), 1.0), addA(rep("#87CEEB", 2), 1.0)),
edge.arrow.size=c(1.0, 0.5,1.0,0.95)*cex_fac,
edge.width=c(1.0, 0.5,1.0,0.95)*cex_fac,
edge.label = c("-1.0\n\n","0.5\n","1.0", "\n0.90"),
edge.label.cex = 1.4,
edge.arrow.mode = c(rep(">", 3), "-"),
edge.colors = c(rep("grey", 2),"grey", "#ffab02"))
text(letters[2], cex = 1.9, x = -1.6, y = 1.5, xpd = NA, font = 2)
text("Simulation", x = 0.3, y = 2.3, xpd = NA, cex = 1.4, pos = 3)
segments(x0 = x00, x1 = x00, y0 = -0.5, y1 = 3.5, xpd = NA)
}
#| label: Fig_2
#| fig-format: pdf
#| fig-width: 10
#| fig-height: 9
sc = c("no_effects", "effects", "confounder_unequal", "collinearity_0.90")
algorithms = c("LM","RF",  "BRT", "NN", "l1", "l2", "l1l2")
par(mfcol = c(3,6), mar = c(5,0.5, 2, 1.4), oma = c(1, 2, 2, 1))
labs =  c("LM","RF",  "BRT", "NN", "l1", "l2", "Elastic-net")
#plot_scenarios(1.0)
#dev.off()
cex_fac = 1.3
plot_scenarios(1.0, layout = matrix(c(1,1,
0,1,
0,0,
0,2), nrow = 4L, 2L, byrow = TRUE))
points(x = 0, y = -0.55, col = "grey", xpd = NA, pch = 15, cex = 1.8)
text(x = 0.1, y = -0.55, label = "True effect", xpd = NA, pos = 4, cex = 1.4)
points(x = 0, y = -0.75, col = "#ffab02", xpd = NA, pch = 15, cex = 1.8)
text(x = 0.1, y = -0.75, label = "Correlation", xpd = NA, pos = 4, cex = 1.4)
true_effs = matrix(c(
NA, NA, NA,
1, 0.5, 1,
-1, 0.5, 1,
1, 0, 1
), 4, 3, byrow = TRUE)
for(i in c(1, 2, 3, 4, 7)) {
counter = 1
for(j in c(2, 4, 3)) {
tmp = Results[[sc[j]]]
sd = Results_sd[[sc[j]]][i,]
edges = round(tmp[i,], 5)
bias = edges[c(1, 2, 5)] - true_effs[j,]
g1 = graph(c("X1", "Y", "X2", "Y", "X3", "Y"),
directed=TRUE )
layout_as_tree(g1, root = "Y", circular = TRUE, flip.y = TRUE)
eqarrowPlot(g1, matrix(c(1,1,
0,1,
0,0,
0,2), nrow = 4L, 2L, byrow = TRUE) ,
#cols = c( "skyblue","#B0A8B9", "#B0A8B9", "#B0A8B9"),
cols = c(addA(rep("#87CEEB", 1), 1.0), "#B0A8B9", addA(rep("#87CEEB", 1), 1.0), addA(rep("#87CEEB", 1), 1.0)),
edge.arrow.size=abs(bias)*2.3,#abs(edges[c(1, 2, 5)]),
edge.width=abs(bias)*cex_fac*5,#abs(edges[c(1, 2, 5)])*cex_fac,
edge.label = c(paste0(format(round(bias, 2)[1], nsmall = 1), "\n\n"),
paste0("          ",format(round(bias, 2)[2], nsmall = 1), "\n"),
paste0("          ", format(round(bias, 2)[3], nsmall=1))),
edge.label.cex = 1.4,
edge.colors = ifelse(abs(edges[c(1, 2, 5)]) < 0.001, "white", "#e60000"))
text(labs[i], x = 0, y = 2.3, xpd = NA, cex = 1.4, pos = 3)
if(i == 1) {
text(letters[counter], cex = 1.9, x = -2.2, y = 2.5, xpd = NA, font = 2)
counter = counter + 1
>>>>>>> 93a80d4eefaad6d6ca535c7c8f45269b2ebc0de9
}
}
if(i == 3) {
points(x = 0-1, y = -1.1*0.5, col = "#e60000", xpd = NA, pch = 15, cex = 1.8)
text(x = 0.1-1, y = -1.1*0.5, label = "Bias = Estimate - True effect", xpd = NA, pos = 4, cex = 1.4)
}
}
<<<<<<< HEAD
data
data$method
=======
>>>>>>> 93a80d4eefaad6d6ca535c7c8f45269b2ebc0de9
#| echo: false
files =        c("collinearity_0.5.RDS",
"collinearity_0.90.RDS",
"collinearity_0.99.RDS",
"effects.RDS",
"no_effects.RDS",
"confounder_unequal.RDS",
"confounder.RDS")
Results =
lapply(files, function(f) {
confounder = readRDS(paste0("results/",f))
Result = do.call(rbind, lapply(1:8, function(j) (apply(abind::abind(lapply(1:100, function(i) confounder[[i]][[j]][[1]] ), along = 0L), 2, mean))))
colnames(Result) = LETTERS[1:5]
rownames(Result) = c("LM", "RF", "BRT", "NN", "Dropout", "l1", "l2", "l1l2")
return(Result)
})
names(Results) = unlist(strsplit(files, ".RDS", TRUE))
Results_rmse =
lapply(files, function(f) {
confounder = readRDS(paste0("results/",f))
Result = do.call(rbind, lapply(1:8, function(j) (apply(abind::abind(lapply(1:100, function(i) confounder[[i]][[j]][[2]] ), along = 0L), 2, mean))))
colnames(Result) = LETTERS[1:5]
rownames(Result) = c("LM", "RF", "BRT", "NN", "Dropout", "l1", "l2", "l1l2")
return(Result)
})
<<<<<<< HEAD
Results =
lapply(files, function(f) {
confounder = readRDS(paste0("results/",f))
Result = do.call(rbind, lapply(1:8, function(j) (apply(abind::abind(lapply(1:100, function(i) confounder[[i]][[j]][[1]] ), along = 0L), 2, mean))))
colnames(Result) = LETTERS[1:5]
rownames(Result) = c("LM", "RF", "BRT", "NN", "Dropout", "l1", "l2", "l1l2")
return(Result)
})
names(Results) = unlist(strsplit(files, ".RDS", TRUE))
confounder[[1]][[1]]
readRDS(paste0("results/",files[1]))[[1]][[1]]
readRDS(paste0("results/",files[1]))[[1]][[1]][[2]]
Results_rmse =
lapply(files, function(f) {
confounder = readRDS(paste0("results/",f))
Result = do.call(rbind, lapply(1:8, function(j) (apply(abind::abind(lapply(1:100, function(i) confounder[[i]][[j]][[2]] ), along = 0L), 2, mean))))
#colnames(Result) = LETTERS[1:5]
rownames(Result) = c("LM", "RF", "BRT", "NN", "Dropout", "l1", "l2", "l1l2")
return(Result)
})
names(Results_rmse) = unlist(strsplit(files, ".RDS", TRUE))
Results_rmse$collinearity_0.5
Results_rmse$effects
Results_rmse$no_effects
Results_rmse$effects
Results_rmse$confounder_unequal
Results_rmse$confounder
Results_rmse$collinearity_0.90
Results_rmse_sd =
lapply(files, function(f) {
confounder = readRDS(paste0("results/",f))
Result = do.call(rbind, lapply(1:8, function(j) (apply(abind::abind(lapply(1:100, function(i) confounder[[i]][[j]][[2]] ), along = 0L), 2, sd))))
#colnames(Result) = LETTERS[1:5]
rownames(Result) = c("LM", "RF", "BRT", "NN", "Dropout", "l1", "l2", "l1l2")
return(Result)
})
Results_rmse_sd
library(ranger)
library(xgboost)
library(torch)
library(iml)
library(cito)
library(glmnet)
library(glmnetUtils)
library(MASS)
set.seed(42)
Sys.setenv(OMP_NUM_THREADS=5)
source("code/AME.R")
source("code/Scenarios.R")
library(ranger)
library(xgboost)
library(torch)
library(iml)
library(cito)
library(glmnet)
library(glmnetUtils)
Sys.setenv(OMP_NUM_THREADS=3)
source("code/AME.R")
source("code/Scenarios.R")
torch::torch_set_num_threads(3L)
sim = function() simulate(r = 0.9, effs = c(-1, 0.5, 0, 0, 1),n = 2000)
results = get_result(sim)
sim = function() simulate(r = 0.9, effs = c(-1, 0.5, 0, 0, 1),n = 2000)
#library(torch)
data = sim()
train = data[1:1000,]
test = data[1001:2000,]
result = vector("list", 8L)
rmse = function(y, y_hat) sqrt(mean((y-y_hat)**2))
## LM
m = lm(Y~., data = data.frame(train))
eff = diag(marginalEffects(m)$mean)
pred = predict(m, newdata = data.frame(test))
result[[1]] = list(eff, rmse(test[,1], pred))
rmse(test[,1], pred)
## RF
m = ranger(Y ~., data = data.frame(train), num.trees = 100L,num.threads = 3L)
eff = diag(marginalEffects(m, data = data.frame(train))$mean)
pred = predict(m, data = data.frame(test))$predictions
result[[2]] = list(eff, rmse(test[,1], pred))
list(eff, rmse(test[,1], pred))
## BRT
m = xgboost::xgboost(data=xgboost::xgb.DMatrix(as.matrix(train)[,-1],
label = (as.matrix(train)[,1, drop=FALSE])),
nrounds = 140L,
objective="reg:squarederror", nthread = 1, verbose = 0)
eff = diag(marginalEffects(m, data = data.frame(train)[,-1])$mean)
pred = predict(m, newdata = xgboost::xgb.DMatrix(test[,-1]))
result[[3]] = list(eff, rmse(test[,1], pred))
list(eff, rmse(test[,1], pred))
## BRT
m = xgboost::xgboost(data=xgboost::xgb.DMatrix(as.matrix(train)[,-1],
label = (as.matrix(train)[,1, drop=FALSE])),
nrounds = 140L,
max_depth = 3L,
objective="reg:squarederror", nthread = 1, verbose = 0)
eff = diag(marginalEffects(m, data = data.frame(train)[,-1])$mean)
pred = predict(m, newdata = xgboost::xgb.DMatrix(test[,-1]))
result[[3]] = list(eff, rmse(test[,1], pred))
rmse(test[,1], pred)
## BRT
m = xgboost::xgboost(data=xgboost::xgb.DMatrix(as.matrix(train)[,-1],
label = (as.matrix(train)[,1, drop=FALSE])),
nrounds = 20L,
max_depth = 3L,
objective="reg:squarederror", nthread = 1, verbose = 0)
eff = diag(marginalEffects(m, data = data.frame(train)[,-1])$mean)
pred = predict(m, newdata = xgboost::xgb.DMatrix(test[,-1]))
result[[3]] = list(eff, rmse(test[,1], pred))
rmse(test[,1], pred)
## BRT
m = xgboost::xgboost(data=xgboost::xgb.DMatrix(as.matrix(train)[,-1],
label = (as.matrix(train)[,1, drop=FALSE])),
nrounds = 20L,
max_depth = 2L,
objective="reg:squarederror", nthread = 1, verbose = 0)
eff = diag(marginalEffects(m, data = data.frame(train)[,-1])$mean)
pred = predict(m, newdata = xgboost::xgb.DMatrix(test[,-1]))
rmse(test[,1], pred)
## BRT
m = xgboost::xgboost(data=xgboost::xgb.DMatrix(as.matrix(train)[,-1],
label = (as.matrix(train)[,1, drop=FALSE])),
nrounds = 20L,
max_depth = 200L,
objective="reg:squarederror", nthread = 1, verbose = 0)
eff = diag(marginalEffects(m, data = data.frame(train)[,-1])$mean)
pred = predict(m, newdata = xgboost::xgb.DMatrix(test[,-1]))
result[[3]] = list(eff, rmse(test[,1], pred))
rmse(test[,1], pred)
## BRT
m = xgboost::xgboost(data=xgboost::xgb.DMatrix(as.matrix(train)[,-1],
label = (as.matrix(train)[,1, drop=FALSE])),
nrounds = 140L,
max_depth = 200L,
objective="reg:squarederror", nthread = 1, verbose = 0)
eff = diag(marginalEffects(m, data = data.frame(train)[,-1])$mean)
pred = predict(m, newdata = xgboost::xgb.DMatrix(test[,-1]))
result[[3]] = list(eff, rmse(test[,1], pred))
rmse(test[,1], pred)
## BRT
m = xgboost::xgboost(data=xgboost::xgb.DMatrix(as.matrix(train)[,-1],
label = (as.matrix(train)[,1, drop=FALSE])),
nrounds = 140L,
max_depth = 2L,
objective="reg:squarederror", nthread = 1, verbose = 0)
eff = diag(marginalEffects(m, data = data.frame(train)[,-1])$mean)
pred = predict(m, newdata = xgboost::xgb.DMatrix(test[,-1]))
result[[3]] = list(eff, rmse(test[,1], pred))
rmse(test[,1], pred)
eff
## LM
m = lm(Y~., data = data.frame(train))
summary(m)
## BRT
m = xgboost::xgboost(data=xgboost::xgb.DMatrix(as.matrix(train)[,-1],
label = (as.matrix(train)[,1, drop=FALSE])),
nrounds = 140L,
objective="reg:squarederror", nthread = 1, verbose = 0)
eff = diag(marginalEffects(m, data = data.frame(train)[,-1])$mean)
pred = predict(m, newdata = xgboost::xgb.DMatrix(test[,-1]))
result[[3]] = list(eff, rmse(test[,1], pred))
eff
pred
library(tidymodels)
install.packages(tidymodels)
install.packages("tidymodels")
library(tidymodels)
(eff = diag(marginalEffects(m, data = data.frame(train)[,-1])$mean))
(eff = diag(marginalEffects(m, data = data.frame(train)[,-1], epsilon = 1)$mean))
source("~/Causal-ML/code/AME.R")
(eff = diag(marginalEffects(m, data = data.frame(train)[,-1], epsilon = 1)$mean))
(eff = diag(marginalEffects(m, data = data.frame(train)[,-1], epsilon = -1)$mean))
(eff = diag(marginalEffects(m, data = data.frame(train)[,-1], epsilon = -0.1)$mean))
(eff = diag(marginalEffects(m, data = data.frame(train)[,-1], epsilon = 0.1)$mean))
xgb_spec <- boost_tree(
trees = 140,
tree_depth = tune(), min_n = tune(),
loss_reduction = tune(),                     ## first three: model complexity
sample_size = tune(), mtry = tune(),         ## randomness
learn_rate = tune(),                         ## step size
) %>%
set_engine("xgboost") %>%
set_mode("regression")
xgb_grid <- grid_latin_hypercube(
tree_depth(),
min_n(),
loss_reduction(),
sample_size = sample_prop(),
finalize(mtry(), train),
learn_rate(),
size = 30
)
head(train)
xgb_wf <- workflow() %>%
add_formula(Y ~ .) %>%
add_model(xgb_spec)
xgb_wf
vb_folds <- vfold_cv(train, v = 5)
xgb_res <- tune_grid(
xgb_wf,
resamples = vb_folds,
grid = xgb_grid,
control = control_grid(save_pred = TRUE)
)
xgb_res
collect_metrics(xgb_res)
xgb_res %>%
collect_metrics() %>%
filter(.metric == "roc_auc") %>%
select(mean, mtry:sample_size) %>%
pivot_longer(mtry:sample_size,
values_to = "value",
names_to = "parameter"
) %>%
ggplot(aes(value, mean, color = parameter)) +
geom_point(alpha = 0.8, show.legend = FALSE) +
facet_wrap(~parameter, scales = "free_x") +
labs(x = NULL, y = "AUC")
xgb_res %>%
collect_metrics() %>%
filter(.metric == "rmse") %>%
select(mean, mtry:sample_size) %>%
pivot_longer(mtry:sample_size,
values_to = "value",
names_to = "parameter"
) %>%
ggplot(aes(value, mean, color = parameter)) +
geom_point(alpha = 0.8, show.legend = FALSE) +
facet_wrap(~parameter, scales = "free_x") +
labs(x = NULL, y = "AUC")
show_best(xgb_res, "rmse")
best_auc <- select_best(xgb_res, "rmse")
final_xgb <- finalize_workflow(
xgb_wf,
best_auc
)
final_xgb
final_xgb$fit
final_xgb$fit$actions$model
final_xgb$fit$actions$model$spec
final_xgb$fit$actions$model$spec$eng_args
pull_workflow_fit(final_xgb)
final_xgb <- finalize_workflow(
xgb_wf,
best_auc
)
pull_workflow_fit(final_xgb)
final_xgb <- finalize_workflow(
xgb_wf,
best_auc
)
final_xgb <- finalize_workflow(
xgb_wf,
best_auc
) %>% fit(train)
pull_workflow_fit(final_xgb)
m = pull_workflow_fit(final_xgb)
pred = predict(m, newdata = xgboost::xgb.DMatrix(test[,-1]))
pred = predict(m, new_data = xgboost::xgb.DMatrix(test[,-1]))
m
m$fit
m = pull_workflow_fit(final_xgb)$fit
pred = predict(m, newdata = xgboost::xgb.DMatrix(test[,-1]))
rmse(test[,1], pred)
(eff = diag(marginalEffects(m, data = data.frame(train)[,-1], epsilon = 0.1)$mean))
doParallel::registerDoParallel()
xgb_spec <- boost_tree(
trees = 240,
tree_depth = tune(), min_n = tune(),
loss_reduction = tune(),                     ## first three: model complexity
sample_size = tune(), mtry = tune(),         ## randomness
learn_rate = tune(),                         ## step size
) %>%
set_engine("xgboost") %>%
set_mode("regression")
xgb_grid <- grid_latin_hypercube(
tree_depth(),
min_n(),
loss_reduction(),
sample_size = sample_prop(),
finalize(mtry(), train),
learn_rate(),
size = 50
)
xgb_wf <- workflow() %>%
add_formula(Y ~ .) %>%
add_model(xgb_spec)
vb_folds <- vfold_cv(train, v = 5)
xgb_res <- tune_grid(
xgb_wf,
resamples = vb_folds,
grid = xgb_grid,
control = control_grid(save_pred = TRUE)
)
doParallel::stopImplicitCluster()
xgb_spec <- boost_tree(
trees = 240,
tree_depth = tune(), min_n = tune(),
loss_reduction = tune(),                     ## first three: model complexity
sample_size = tune(), mtry = tune(),         ## randomness
learn_rate = tune(),                         ## step size
) %>%
set_engine("xgboost") %>%
set_mode("regression")
xgb_grid <- grid_latin_hypercube(
tree_depth(),
min_n(),
loss_reduction(),
sample_size = sample_prop(),
finalize(mtry(), train),
learn_rate(),
size = 30
)
xgb_wf <- workflow() %>%
add_formula(Y ~ .) %>%
add_model(xgb_spec)
vb_folds <- vfold_cv(train, v = 5)
xgb_res <- tune_grid(
xgb_wf,
resamples = vb_folds,
grid = xgb_grid,
control = control_grid(save_pred = TRUE)
)
=======
names(Results_sd) = unlist(strsplit(files, ".RDS", TRUE))
eqarrowPlot <- function(graph, layout, edge.lty=rep(1, ecount(graph)),edge.width=rep(1, ecount(graph)),
edge.arrow.size=rep(1, ecount(graph)), cols = c( "pink","pink", "skyblue"), edge.arrow.mode = NULL, edge.colors = NULL,
rangeX = c(0, 1), rangeY = c(0, 2), ...) {
plot(graph, edge.lty=0, edge.arrow.size=0, layout=layout,
vertex.shape="none",  vertex.size=50, vertex.color = cols, rescale=FALSE, xlim = rangeX, ylim = rangeY)
if(is.null(edge.arrow.mode)) edge.arrow.mode = rep(">", (ecount(graph)))
if(is.null(edge.colors)) edge.colors = rep(NULL, ecount(graph))
for (e in seq_len(ecount(graph))) {
graph2 <- delete.edges(graph, E(graph)[(1:ecount(graph))[-e]])
plot(graph2, edge.lty=edge.lty[e], edge.arrow.size=edge.arrow.size[e], layout=layout,edge.color = edge.colors[e],
vertex.label=NA, add=TRUE, vertex.color = cols, edge.width=edge.width[e], vertex.size=50,edge.arrow.mode = edge.arrow.mode[e], rescale=FALSE,
xlim = rangeX, ylim = rangeY)
}
plot(graph, edge.lty=0,
edge.arrow.size=0,
layout=layout,
add=TRUE,
vertex.size=50,
vertex.color = cols,
vertex.label.color="black", xlim = rangeX, ylim = rangeY,
edge.label.color = "black", rescale=FALSE,...)
invisible(NULL)
}
layout = matrix(c(0,10,
0,5,
0,0,
5,5), nrow = 4L, 2L, byrow = TRUE)
x00 = 1.4
plot_scenarios = function(cex_fac = 1.3, layout = layout) {
g1 <- graph(c("x\U2081", "y", "x\U2082", "y", "x\U2083", "y"),
#c(bquote(X[1]), bquote(y), bquote(X[2]), bquote(y), bquote(X[3]), bquote(y)),
directed=TRUE )
eqarrowPlot(g1, layout,
#cols = c( "skyblue","#B0A8B9", "#B0A8B9", "#B0A8B9"),
cols = c(addA(rep("#87CEEB", 1), 1.0), "#B0A8B9", addA(rep("#87CEEB", 1), 1.0), addA(rep("#87CEEB", 2), 1.0)),
edge.arrow.size=c(1, 0.5,1.0),
edge.width=c(1, 0.5,1.0)*cex_fac,
edge.label = c("1.0\n\n","0.5\n","1.0"),
edge.label.cex = 1.4,
edge.colors = c(rep("grey", 2), "grey"))
text(letters[1], cex = 1.9, x = -1.6, y = 1.5, xpd = NA, font = 2)
text("Simulation", x = 0.3, y = 2.3, xpd = NA, cex = 1.4, pos = 3)
segments(x0 = x00, x1 = x00, y0 = -0.5, y1 = 2.5, xpd = NA)
# Collinearity
g1 <- graph(c("x\U2081", "y", "x\U2082","y", "x\U2083", "y", "x\U2081", "x\U2082"),
directed=TRUE )
eqarrowPlot(g1, layout,
#cols = c( "skyblue","#B0A8B9", "#B0A8B9", "#B0A8B9"),
cols = c(addA(rep("#87CEEB", 1), 1.0), "#B0A8B9", addA(rep("#87CEEB", 1), 1.0), addA(rep("#87CEEB", 2), 1.0)),
edge.arrow.size=c(1.0, 0.0,1.0,0.95)*cex_fac,
edge.width=c(1.0, 0.5,1.0,0.95)*cex_fac,
edge.label = c("1.0\n\n","\n","1.0", "\n0.90"),
edge.label.cex = 1.4,
edge.arrow.mode = c(rep(">", 3), "-"),
edge.colors = c(rep("grey", 1),"white","grey", "#ffab02"))
text(letters[3], cex = 1.9, x = -1.6, y = 1.5, xpd = NA, font = 2)
text("Simulation", x = 0.3, y = 2.3, xpd = NA, cex = 1.4, pos = 3)
segments(x0 = x00, x1 = x00, y0 = -0.5, y1 = 3.5, xpd = NA)
# Confounder
g1 <- graph(c("x\U2081", "y", "x\U2082","y", "x\U2083", "y", "x\U2081", "x\U2082"),
directed=TRUE )
eqarrowPlot(g1, layout,
#cols = c( "skyblue","#B0A8B9", "#B0A8B9", "#B0A8B9"),
cols = c(addA(rep("#87CEEB", 1), 1.0), "#B0A8B9", addA(rep("#87CEEB", 1), 1.0), addA(rep("#87CEEB", 2), 1.0)),
edge.arrow.size=c(1.0, 0.5,1.0,0.95)*cex_fac,
edge.width=c(1.0, 0.5,1.0,0.95)*cex_fac,
edge.label = c("-1.0\n\n","0.5\n","1.0", "\n0.90"),
edge.label.cex = 1.4,
edge.arrow.mode = c(rep(">", 3), "-"),
edge.colors = c(rep("grey", 2),"grey", "#ffab02"))
text(letters[2], cex = 1.9, x = -1.6, y = 1.5, xpd = NA, font = 2)
text("Simulation", x = 0.3, y = 2.3, xpd = NA, cex = 1.4, pos = 3)
segments(x0 = x00, x1 = x00, y0 = -0.5, y1 = 3.5, xpd = NA)
}
#| label: Fig_2
#| fig-format: pdf
#| fig-width: 10
#| fig-height: 9
sc = c("no_effects", "effects", "confounder_unequal", "collinearity_0.90")
algorithms = c("LM","RF",  "BRT", "NN", "l1", "l2", "l1l2")
par(mfcol = c(3,6), mar = c(5,0.5, 2, 1.4), oma = c(1, 2, 2, 1))
labs =  c("LM","RF",  "BRT", "NN", "l1", "l2", "Elastic-net")
#plot_scenarios(1.0)
#dev.off()
cex_fac = 1.3
plot_scenarios(1.0, layout = matrix(c(1,1,
0,1,
0,0,
0,2), nrow = 4L, 2L, byrow = TRUE))
points(x = 0, y = -0.55, col = "grey", xpd = NA, pch = 15, cex = 1.8)
text(x = 0.1, y = -0.55, label = "True effect", xpd = NA, pos = 4, cex = 1.4)
points(x = 0, y = -0.75, col = "#ffab02", xpd = NA, pch = 15, cex = 1.8)
text(x = 0.1, y = -0.75, label = "Correlation", xpd = NA, pos = 4, cex = 1.4)
true_effs = matrix(c(
NA, NA, NA,
1, 0.5, 1,
-1, 0.5, 1,
1, 0, 1
), 4, 3, byrow = TRUE)
for(i in c(1, 2, 3, 4, 7)) {
counter = 1
for(j in c(2, 4, 3)) {
tmp = Results[[sc[j]]]
sd = Results_sd[[sc[j]]][i,]
edges = round(tmp[i,], 5)
bias = edges[c(1, 2, 5)] - true_effs[j,]
g1 = graph(c("x\U2081", "y", "x\U2082", "y", "x\U2083", "y"),
directed=TRUE )
layout_as_tree(g1, root = "Y", circular = TRUE, flip.y = TRUE)
eqarrowPlot(g1, matrix(c(1,1,
0,1,
0,0,
0,2), nrow = 4L, 2L, byrow = TRUE) ,
#cols = c( "skyblue","#B0A8B9", "#B0A8B9", "#B0A8B9"),
cols = c(addA(rep("#87CEEB", 1), 1.0), "#B0A8B9", addA(rep("#87CEEB", 1), 1.0), addA(rep("#87CEEB", 1), 1.0)),
edge.arrow.size=abs(bias)*2.3,#abs(edges[c(1, 2, 5)]),
edge.width=abs(bias)*cex_fac*5,#abs(edges[c(1, 2, 5)])*cex_fac,
edge.label = c(paste0(format(round(bias, 2)[1], nsmall = 1), "\n\n"),
paste0("          ",format(round(bias, 2)[2], nsmall = 1), "\n"),
paste0("          ", format(round(bias, 2)[3], nsmall=1))),
edge.label.cex = 1.4,
edge.colors = ifelse(abs(edges[c(1, 2, 5)]) < 0.001, "white", "#e60000"))
text(labs[i], x = 0, y = 2.3, xpd = NA, cex = 1.4, pos = 3)
if(i == 1) {
text(letters[counter], cex = 1.9, x = -2.2, y = 2.5, xpd = NA, font = 2)
counter = counter + 1
}
}
if(i == 3) {
points(x = 0-1, y = -1.1*0.5, col = "#e60000", xpd = NA, pch = 15, cex = 1.8)
text(x = 0.1-1, y = -1.1*0.5, label = "Bias = Estimate - True effect", xpd = NA, pos = 4, cex = 1.4)
}
}
i
j
counter = 1
tmp = Results[[sc[j]]]
sd = Results_sd[[sc[j]]][i,]
edges = round(tmp[i,], 5)
bias = edges[c(1, 2, 5)] - true_effs[j,]
g1 = graph(c("x\U2081", "y", "x\U2082", "y", "x\U2083", "y"),
directed=TRUE )
layout_as_tree(g1, root = "Y", circular = TRUE, flip.y = TRUE)
eqarrowPlot(g1, matrix(c(1,1,
0,1,
0,0,
0,2), nrow = 4L, 2L, byrow = TRUE) ,
#cols = c( "skyblue","#B0A8B9", "#B0A8B9", "#B0A8B9"),
cols = c(addA(rep("#87CEEB", 1), 1.0), "#B0A8B9", addA(rep("#87CEEB", 1), 1.0), addA(rep("#87CEEB", 1), 1.0)),
edge.arrow.size=abs(bias)*2.3,#abs(edges[c(1, 2, 5)]),
edge.width=abs(bias)*cex_fac*5,#abs(edges[c(1, 2, 5)])*cex_fac,
edge.label = c(paste0(format(round(bias, 2)[1], nsmall = 1), "\n\n"),
paste0("          ",format(round(bias, 2)[2], nsmall = 1), "\n"),
paste0("          ", format(round(bias, 2)[3], nsmall=1))),
edge.label.cex = 1.4,
edge.colors = ifelse(abs(edges[c(1, 2, 5)]) < 0.001, "white", "#e60000"))
layout_as_tree(g1, root = "Y", circular = TRUE, flip.y = TRUE)
layout_as_tree(g1, root = "y", circular = TRUE, flip.y = TRUE)
eqarrowPlot(g1, matrix(c(1,1,
0,1,
0,0,
0,2), nrow = 4L, 2L, byrow = TRUE) ,
#cols = c( "skyblue","#B0A8B9", "#B0A8B9", "#B0A8B9"),
cols = c(addA(rep("#87CEEB", 1), 1.0), "#B0A8B9", addA(rep("#87CEEB", 1), 1.0), addA(rep("#87CEEB", 1), 1.0)),
edge.arrow.size=abs(bias)*2.3,#abs(edges[c(1, 2, 5)]),
edge.width=abs(bias)*cex_fac*5,#abs(edges[c(1, 2, 5)])*cex_fac,
edge.label = c(paste0(format(round(bias, 2)[1], nsmall = 1), "\n\n"),
paste0("          ",format(round(bias, 2)[2], nsmall = 1), "\n"),
paste0("          ", format(round(bias, 2)[3], nsmall=1))),
edge.label.cex = 1.4,
edge.colors = ifelse(abs(edges[c(1, 2, 5)]) < 0.001, "white", "#e60000"))
#| label: Fig_2
#| fig-format: pdf
#| fig-width: 10
#| fig-height: 9
sc = c("no_effects", "effects", "confounder_unequal", "collinearity_0.90")
algorithms = c("LM","RF",  "BRT", "NN", "l1", "l2", "l1l2")
par(mfcol = c(3,6), mar = c(5,0.5, 2, 1.4), oma = c(1, 2, 2, 1))
labs =  c("LM","RF",  "BRT", "NN", "l1", "l2", "Elastic-net")
#plot_scenarios(1.0)
#dev.off()
cex_fac = 1.3
plot_scenarios(1.0, layout = matrix(c(1,1,
0,1,
0,0,
0,2), nrow = 4L, 2L, byrow = TRUE))
points(x = 0, y = -0.55, col = "grey", xpd = NA, pch = 15, cex = 1.8)
text(x = 0.1, y = -0.55, label = "True effect", xpd = NA, pos = 4, cex = 1.4)
points(x = 0, y = -0.75, col = "#ffab02", xpd = NA, pch = 15, cex = 1.8)
text(x = 0.1, y = -0.75, label = "Correlation", xpd = NA, pos = 4, cex = 1.4)
true_effs = matrix(c(
NA, NA, NA,
1, 0.5, 1,
-1, 0.5, 1,
1, 0, 1
), 4, 3, byrow = TRUE)
for(i in c(1, 2, 3, 4, 7)) {
counter = 1
for(j in c(2, 4, 3)) {
tmp = Results[[sc[j]]]
sd = Results_sd[[sc[j]]][i,]
edges = round(tmp[i,], 5)
bias = edges[c(1, 2, 5)] - true_effs[j,]
g1 = graph(c("x\U2081", "y", "x\U2082", "y", "x\U2083", "y"),
directed=TRUE )
layout_as_tree(g1, root = "y", circular = TRUE, flip.y = TRUE)
eqarrowPlot(g1, matrix(c(1,1,
0,1,
0,0,
0,2), nrow = 4L, 2L, byrow = TRUE) ,
#cols = c( "skyblue","#B0A8B9", "#B0A8B9", "#B0A8B9"),
cols = c(addA(rep("#87CEEB", 1), 1.0), "#B0A8B9", addA(rep("#87CEEB", 1), 1.0), addA(rep("#87CEEB", 1), 1.0)),
edge.arrow.size=abs(bias)*2.3,#abs(edges[c(1, 2, 5)]),
edge.width=abs(bias)*cex_fac*5,#abs(edges[c(1, 2, 5)])*cex_fac,
edge.label = c(paste0(format(round(bias, 2)[1], nsmall = 1), "\n\n"),
paste0("          ",format(round(bias, 2)[2], nsmall = 1), "\n"),
paste0("          ", format(round(bias, 2)[3], nsmall=1))),
edge.label.cex = 1.4,
edge.colors = ifelse(abs(edges[c(1, 2, 5)]) < 0.001, "white", "#e60000"))
text(labs[i], x = 0, y = 2.3, xpd = NA, cex = 1.4, pos = 3)
if(i == 1) {
text(letters[counter], cex = 1.9, x = -2.2, y = 2.5, xpd = NA, font = 2)
counter = counter + 1
}
}
if(i == 3) {
points(x = 0-1, y = -1.1*0.5, col = "#e60000", xpd = NA, pch = 15, cex = 1.8)
text(x = 0.1-1, y = -1.1*0.5, label = "Bias = Estimate - True effect", xpd = NA, pos = 4, cex = 1.4)
}
}
#| label: Fig_2
#| fig-format: pdf
#| fig-width: 10
#| fig-height: 9
sc = c("no_effects", "effects", "confounder_unequal", "collinearity_0.90")
algorithms = c("LM","RF",  "BRT", "NN", "l1", "l2", "l1l2")
par(mfcol = c(3,6), mar = c(5,0.5, 2, 1.4), oma = c(1, 2, 2, 1))
labs =  c("LM","RF",  "BRT", "NN", "l1", "l2", "Elastic-net")
#plot_scenarios(1.0)
#dev.off()
cex_fac = 1.3
plot_scenarios(1.0, layout = matrix(c(1,1,
0,1,
0,0,
0,2), nrow = 4L, 2L, byrow = TRUE))
points(x = 0, y = -0.55, col = "grey", xpd = NA, pch = 15, cex = 1.8)
text(x = 0.1, y = -0.55, label = "True effect", xpd = NA, pos = 4, cex = 1.4)
points(x = 0, y = -0.75, col = "#ffab02", xpd = NA, pch = 15, cex = 1.8)
text(x = 0.1, y = -0.75, label = "Correlation", xpd = NA, pos = 4, cex = 1.4)
true_effs = matrix(c(
NA, NA, NA,
1, 0.5, 1,
-1, 0.5, 1,
1, 0, 1
), 4, 3, byrow = TRUE)
for(i in c(1, 2, 3, 4, 7)) {
counter = 1
for(j in c(2, 4, 3)) {
tmp = Results[[sc[j]]]
sd = Results_sd[[sc[j]]][i,]
edges = round(tmp[i,], 5)
bias = edges[c(1, 2, 5)] - true_effs[j,]
g1 = graph(c("x\U2081", "y", "x\U2082", "y", "x\U2083", "y"),
directed=TRUE )
layout_as_tree(g1, root = "y", circular = TRUE, flip.y = TRUE)
eqarrowPlot(g1, matrix(c(1,1,
0,1,
0,0,
0,2), nrow = 4L, 2L, byrow = TRUE) ,
#cols = c( "skyblue","#B0A8B9", "#B0A8B9", "#B0A8B9"),
cols = c(addA(rep("#87CEEB", 1), 1.0), "#B0A8B9", addA(rep("#87CEEB", 1), 1.0), addA(rep("#87CEEB", 1), 1.0)),
edge.arrow.size=abs(bias)*2.3,#abs(edges[c(1, 2, 5)]),
edge.width=abs(bias)*cex_fac*5,#abs(edges[c(1, 2, 5)])*cex_fac,
edge.label = c(paste0(format(round(bias, 2)[1], nsmall = 1), "\n\n"),
paste0("          ",format(round(bias, 2)[2], nsmall = 1), "\n"),
paste0("          ", format(round(bias, 2)[3], nsmall=1))),
edge.label.cex = 1.4,
edge.colors = ifelse(abs(edges[c(1, 2, 5)]) < 0.001, "white", "#e60000"))
text(labs[i], x = 0, y = 2.3, xpd = NA, cex = 1.4, pos = 3)
if(i == 1) {
text(letters[counter], cex = 1.9, x = -2.2, y = 2.5, xpd = NA, font = 2)
counter = counter + 1
}
}
if(i == 3) {
points(x = 0-1, y = -1.1*0.5, col = "#e60000", xpd = NA, pch = 15, cex = 1.8)
text(x = 0.1-1, y = -1.1*0.5, label = "Bias = Estimate - True effect", xpd = NA, pos = 4, cex = 1.4)
}
}
install.packages("Cairo")
knitr::opts_chunk$set(dev = "cairo_pdf")
install.packages("cairoDevice")
?igraph::plot.igraph()
>>>>>>> 93a80d4eefaad6d6ca535c7c8f45269b2ebc0de9
